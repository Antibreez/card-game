{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/js/main.js","source/js/modules/card.js","source/js/modules/constants.js","source/js/modules/game.js","source/js/modules/plyr.js","source/js/utils/random.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import Game from './modules/game.js';\n\nconst game = new Game();\n\n\n","const $cardTemplate = document.getElementById(`card`)\n  .content\n  .querySelector(`.card`);\n\nclass Card {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getCard() {\n    const node = $cardTemplate.cloneNode(true);\n    node.querySelector(`.card__img`).src = `img/${this.name}`;\n    return node;\n  }\n}\n\nexport default Card;\n","export const IMAGES_NAMES = [\n  `apple.svg`,\n  `ball.svg`,\n  `banana.svg`,\n  `cake.svg`,\n  `car.svg`,\n  `cat.svg`,\n  `cloud.svg`,\n  `dog.svg`,\n  `duck.svg`,\n  `earth.svg`,\n  `ferris.svg`,\n  `frig.svg`,\n  `flag.svg`,\n  `frog.svg`,\n  `hat.svg`,\n  `hot-dog.svg`,\n  `house.svg`,\n  `leaf.svg`,\n  `lightning.svg`,\n  `moon.svg`,\n  `mustache.svg`,\n  `rainbow.svg`,\n  `road.svg`,\n  `rocket.svg`,\n  `ship.svg`,\n  `smile.svg`,\n  `star.svg`,\n  `sun.svg`,\n  `tree.svg`,\n  `t-shirt.svg`,\n  `tv-screen.svg`,\n  `umbrella.svg`\n];\n\nexport const CARTOONS_ID = [\n  `6NDYf3RZ1eY`,\n  `ba62uuv-5Dc`,\n  `yltlJEdSAHw`,\n  `URH0aKA1LiY`,\n  `tyx7UL-Uolw`,\n  `Qota928VTXw`,\n  `WjoDEQqyTig`,\n  `Po7RpGzFEIY`,\n  `uJJ2c0FFt9Y`,\n  `nUCf4_cDXwg`,\n];\n","import {IMAGES_NAMES} from './constants.js';\nimport {CARTOONS_ID} from './constants.js';\nimport {getShuffledArr} from '../utils/random.js';\nimport Plyr from '../modules/plyr.js';\nimport Card from './card.js';\n\nconst $menu = document.getElementById(`menu`);\nconst $menuForm = document.getElementById(`menu-form`);\nconst $sizesRadio = $menuForm.querySelectorAll(`input[name='fieldSize']`);\nconst $cardBlock = document.getElementById(`card-block`);\nconst $playerWrap = document.querySelector(`.player-wrap`);\nconst $playerContainer = document.querySelector(`.player-container`);\nconst $newGameBtn = document.querySelector(`.player-new-game`);\n//const $playerIframe = $playerWrap.querySelector(`iframe`);\n\n\n\n// const player = new Plyr(`#player`, {\n//   clickToPlay: true,\n// });\n// player.on(`ended`, function () {\n//   if (player.fullscreen.active) {\n//     player.fullscreen.exit();\n//   }\n// });\n\n// const playerWrap = document.querySelector(`.player-wrap`);\n// const play = document.getElementById(`play`);\n// const exit = document.getElementById(`exit`);\n\n// play.addEventListener('click', () => {\n//   playerWrap.classList.remove(`js-hidden`);\n//   player.fullscreen.enter();\n//   player.play();\n// });\n\nclass Game {\n  constructor() {\n    this.openedCards = 0;\n    this.size = 4;\n    this.isOddMove = true;\n    this.firstCard = {};\n    this.isDebounce = false;\n    this.addEventListeners();\n    this.player = {};\n    this.cartoonIds = [];\n  }\n\n  getCartoonId() {\n    let cartoonId = ``;\n    while (true) {\n      cartoonId = CARTOONS_ID[Math.floor(Math.random() * CARTOONS_ID.length)];\n      if (this.cartoonIds.indexOf(cartoonId) === -1) {\n        break;\n      } else if (this.cartoonIds.length === CARTOONS_ID.length) {\n        this.cartoonIds = [];\n        break;\n      }\n    }\n\n    this.cartoonIds.push(cartoonId);\n    return cartoonId;\n  }\n\n  addPlayer() {\n    const fragment = document.createDocumentFragment();\n    const player = document.createElement(`div`);\n    player.classList.add(`plyr__video-embed`);\n    player.setAttribute(`id`, `player`);\n    const iframe = document.createElement(`iframe`);\n    iframe.setAttribute(\n      `src`,\n      `https://www.youtube.com/embed/`\n      + this.getCartoonId()\n      + `?origin=window.location.host;iv_load_policy=3&amp;modestbranding=1&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;enablejsapi=1`\n    );\n    iframe.setAttribute(`allowfullscreen`, ``);\n    iframe.setAttribute(`allowtransparency`, ``);\n    iframe.setAttribute(`allow`, `autoplay`);\n    player.appendChild(iframe);\n    fragment.appendChild(player);\n    $playerContainer.appendChild(player);\n\n\n    // $playerIframe.setAttribute(\n    //   `src`,\n    //   `https://www.youtube.com/embed/`\n    //   + this.getCartoonId()\n    //   + `?origin=window.location.host;iv_load_policy=3&amp;modestbranding=1&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;enablejsapi=1`\n    // )\n\n    console.log(this.player);\n\n    this.player = new Plyr(`#player`, {\n      clickToPlay: true,\n    });\n    console.log(this.player);\n\n    this.player.on(`ended`, () => {\n      console.log(this.player);\n      if (this.player.fullscreen.active) {\n        this.player.fullscreen.exit();\n      }\n    });\n  }\n\n  removePlayer() {\n    this.player.destroy();\n    $playerContainer.innerHTML = ``;\n  }\n\n  addCards() {\n    $cardBlock.innerHTML = ``;\n    const x = this.size;\n    const shuffledArr = getShuffledArr(IMAGES_NAMES).slice(0, x * x / 2);\n    const cardsArr = [];\n    shuffledArr.forEach((name, idx) => {\n      const card = new Card(name).getCard();\n      card.setAttribute(`data-pairId`, idx);\n      cardsArr.push(card);\n      const copyCard = card.cloneNode(true);\n      cardsArr.push(copyCard);\n    });\n\n    const fragment = document.createDocumentFragment();\n    getShuffledArr(cardsArr).forEach((card, idx) => {\n      card.setAttribute(`data-id`, idx);\n      fragment.appendChild(card);\n    });\n\n    $cardBlock.appendChild(fragment);\n    $cardBlock.classList.add(`size-${x}`);\n  }\n\n  removeCards() {\n    $cardBlock.querySelectorAll(`.card`).forEach((card) => {\n      card.remove();\n    });\n  }\n\n  onNewGameClick() {\n    this.removeCardsEventListeners();\n    this.removeCards();\n    $playerWrap.classList.add(`js-hidden`);\n    $menu.classList.remove(`js-hidden`);\n    this.removePlayer();\n    this.openedCards = 0;\n    this.size = 4;\n    this.isOddMove = true;\n    this.firstCard = {};\n    this.isDebounce = false;\n  }\n\n  onCardClick(e) {\n    const card = e.currentTarget;\n\n    if (card.classList.contains(`done`)) {\n      return;\n    }\n\n    if (this.isDebounce === true) {\n      return;\n    }\n\n    if (this.isOddMove) {\n      this.firstCard = card;\n      card.classList.add(`done`);\n      this.isOddMove = false;\n      this.makeDebounce(600);\n    } else {\n      card.classList.add(`done`);\n      if (card.getAttribute(`data-pairid`) !== this.firstCard.getAttribute(`data-pairid`)) {\n        this.hideBothCards(card);\n        this.makeDebounce(1200);\n      } else {\n        this.makeDebounce(600);\n        card.classList.add(`opened`);\n        this.firstCard.classList.add(`opened`);\n        this.openedCards += 2;\n        if (this.openedCards === this.size * this.size) {\n          this.onFinish();\n        }\n      }\n      this.isOddMove = true;\n    }\n  }\n\n  onFinish() {\n    setTimeout(() => {\n      $playerWrap.classList.remove(`js-hidden`);\n      this.player.fullscreen.enter();\n      this.player.play();\n    }, 800);\n  }\n\n  makeDebounce(time) {\n    this.isDebounce = true;\n\n    setTimeout(() => {\n      this.isDebounce = false;\n    }, time);\n  }\n\n  hideBothCards(currentCard) {\n    return setTimeout(() => {\n      currentCard.classList.remove(`done`);\n      this.firstCard.classList.remove(`done`);\n    }, 600);\n  }\n\n  getCardById(id) {\n    return $cardBlock.querySelectorAll(`.card`)[id];\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    $sizesRadio.forEach((sizeRadio) => {\n      if (sizeRadio.checked) {\n        this.size = +sizeRadio.value;\n      }\n    });\n\n    this.addCards();\n    this.addCardsEventListeners();\n    $menu.classList.add(`js-hidden`);\n    this.addPlayer();\n  }\n\n  addCardsEventListeners() {\n    $cardBlock.querySelectorAll(`.card`).forEach((card) => {\n      card.addEventListener(`click`, this.onCardClick.bind(this));\n    });\n  }\n\n  removeCardsEventListeners() {\n    $cardBlock.querySelectorAll(`.card`).forEach((card) => {\n      card.removeEventListener(`click`, this.onCardClick.bind(this));\n    });\n  }\n\n  addEventListeners() {\n    $menuForm.addEventListener(`submit`, this.onSubmit.bind(this));\n    $newGameBtn.addEventListener(`click`, this.onNewGameClick.bind(this));\n  }\n}\n\nexport default Game;\n","typeof navigator === \"object\" && (function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define('Plyr', factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Plyr = factory());\n}(this, (function () { 'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function _classCallCheck$1(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function _defineProperties$1(e, t) {\n    for (var n = 0; n < t.length; n++) {\n      var r = t[n];\n      r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n    }\n  }\n\n  function _createClass$1(e, t, n) {\n    return t && _defineProperties$1(e.prototype, t), n && _defineProperties$1(e, n), e;\n  }\n\n  function _defineProperty$1(e, t, n) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = n, e;\n  }\n\n  function ownKeys$1(e, t) {\n    var n = Object.keys(e);\n\n    if (Object.getOwnPropertySymbols) {\n      var r = Object.getOwnPropertySymbols(e);\n      t && (r = r.filter(function (t) {\n        return Object.getOwnPropertyDescriptor(e, t).enumerable;\n      })), n.push.apply(n, r);\n    }\n\n    return n;\n  }\n\n  function _objectSpread2$1(e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = null != arguments[t] ? arguments[t] : {};\n      t % 2 ? ownKeys$1(Object(n), !0).forEach(function (t) {\n        _defineProperty$1(e, t, n[t]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : ownKeys$1(Object(n)).forEach(function (t) {\n        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));\n      });\n    }\n\n    return e;\n  }\n\n  var defaults = {\n    addCSS: !0,\n    thumbWidth: 15,\n    watch: !0\n  };\n\n  function matches(e, t) {\n    return function () {\n      return Array.from(document.querySelectorAll(t)).includes(this);\n    }.call(e, t);\n  }\n\n  function trigger(e, t) {\n    if (e && t) {\n      var n = new Event(t, {\n        bubbles: !0\n      });\n      e.dispatchEvent(n);\n    }\n  }\n\n  var getConstructor = function getConstructor(e) {\n    return null != e ? e.constructor : null;\n  },\n      instanceOf = function instanceOf(e, t) {\n    return !!(e && t && e instanceof t);\n  },\n      isNullOrUndefined = function isNullOrUndefined(e) {\n    return null == e;\n  },\n      isObject = function isObject(e) {\n    return getConstructor(e) === Object;\n  },\n      isNumber = function isNumber(e) {\n    return getConstructor(e) === Number && !Number.isNaN(e);\n  },\n      isString = function isString(e) {\n    return getConstructor(e) === String;\n  },\n      isBoolean = function isBoolean(e) {\n    return getConstructor(e) === Boolean;\n  },\n      isFunction = function isFunction(e) {\n    return getConstructor(e) === Function;\n  },\n      isArray = function isArray(e) {\n    return Array.isArray(e);\n  },\n      isNodeList = function isNodeList(e) {\n    return instanceOf(e, NodeList);\n  },\n      isElement = function isElement(e) {\n    return instanceOf(e, Element);\n  },\n      isEvent = function isEvent(e) {\n    return instanceOf(e, Event);\n  },\n      isEmpty = function isEmpty(e) {\n    return isNullOrUndefined(e) || (isString(e) || isArray(e) || isNodeList(e)) && !e.length || isObject(e) && !Object.keys(e).length;\n  },\n      is = {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty\n  };\n\n  function getDecimalPlaces(e) {\n    var t = \"\".concat(e).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    return t ? Math.max(0, (t[1] ? t[1].length : 0) - (t[2] ? +t[2] : 0)) : 0;\n  }\n\n  function round(e, t) {\n    if (1 > t) {\n      var n = getDecimalPlaces(t);\n      return parseFloat(e.toFixed(n));\n    }\n\n    return Math.round(e / t) * t;\n  }\n\n  var RangeTouch = function () {\n    function e(t, n) {\n      _classCallCheck$1(this, e), is.element(t) ? this.element = t : is.string(t) && (this.element = document.querySelector(t)), is.element(this.element) && is.empty(this.element.rangeTouch) && (this.config = _objectSpread2$1({}, defaults, {}, n), this.init());\n    }\n\n    return _createClass$1(e, [{\n      key: \"init\",\n      value: function value() {\n        e.enabled && (this.config.addCSS && (this.element.style.userSelect = \"none\", this.element.style.webKitUserSelect = \"none\", this.element.style.touchAction = \"manipulation\"), this.listeners(!0), this.element.rangeTouch = this);\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        e.enabled && (this.config.addCSS && (this.element.style.userSelect = \"\", this.element.style.webKitUserSelect = \"\", this.element.style.touchAction = \"\"), this.listeners(!1), this.element.rangeTouch = null);\n      }\n    }, {\n      key: \"listeners\",\n      value: function value(e) {\n        var t = this,\n            n = e ? \"addEventListener\" : \"removeEventListener\";\n        [\"touchstart\", \"touchmove\", \"touchend\"].forEach(function (e) {\n          t.element[n](e, function (e) {\n            return t.set(e);\n          }, !1);\n        });\n      }\n    }, {\n      key: \"get\",\n      value: function value(t) {\n        if (!e.enabled || !is.event(t)) return null;\n        var n,\n            r = t.target,\n            i = t.changedTouches[0],\n            o = parseFloat(r.getAttribute(\"min\")) || 0,\n            s = parseFloat(r.getAttribute(\"max\")) || 100,\n            u = parseFloat(r.getAttribute(\"step\")) || 1,\n            c = r.getBoundingClientRect(),\n            a = 100 / c.width * (this.config.thumbWidth / 2) / 100;\n        return 0 > (n = 100 / c.width * (i.clientX - c.left)) ? n = 0 : 100 < n && (n = 100), 50 > n ? n -= (100 - 2 * n) * a : 50 < n && (n += 2 * (n - 50) * a), o + round(n / 100 * (s - o), u);\n      }\n    }, {\n      key: \"set\",\n      value: function value(t) {\n        e.enabled && is.event(t) && !t.target.disabled && (t.preventDefault(), t.target.value = this.get(t), trigger(t.target, \"touchend\" === t.type ? \"change\" : \"input\"));\n      }\n    }], [{\n      key: \"setup\",\n      value: function value(t) {\n        var n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {},\n            r = null;\n        if (is.empty(t) || is.string(t) ? r = Array.from(document.querySelectorAll(is.string(t) ? t : 'input[type=\"range\"]')) : is.element(t) ? r = [t] : is.nodeList(t) ? r = Array.from(t) : is.array(t) && (r = t.filter(is.element)), is.empty(r)) return null;\n\n        var i = _objectSpread2$1({}, defaults, {}, n);\n\n        if (is.string(t) && i.watch) {\n          var o = new MutationObserver(function (n) {\n            Array.from(n).forEach(function (n) {\n              Array.from(n.addedNodes).forEach(function (n) {\n                is.element(n) && matches(n, t) && new e(n, i);\n              });\n            });\n          });\n          o.observe(document.body, {\n            childList: !0,\n            subtree: !0\n          });\n        }\n\n        return r.map(function (t) {\n          return new e(t, n);\n        });\n      }\n    }, {\n      key: \"enabled\",\n      get: function get() {\n        return \"ontouchstart\" in document.documentElement;\n      }\n    }]), e;\n  }();\n\n  // ==========================================================================\n  // Type checking utils\n  // ==========================================================================\n  var getConstructor$1 = function getConstructor(input) {\n    return input !== null && typeof input !== 'undefined' ? input.constructor : null;\n  };\n\n  var instanceOf$1 = function instanceOf(input, constructor) {\n    return Boolean(input && constructor && input instanceof constructor);\n  };\n\n  var isNullOrUndefined$1 = function isNullOrUndefined(input) {\n    return input === null || typeof input === 'undefined';\n  };\n\n  var isObject$1 = function isObject(input) {\n    return getConstructor$1(input) === Object;\n  };\n\n  var isNumber$1 = function isNumber(input) {\n    return getConstructor$1(input) === Number && !Number.isNaN(input);\n  };\n\n  var isString$1 = function isString(input) {\n    return getConstructor$1(input) === String;\n  };\n\n  var isBoolean$1 = function isBoolean(input) {\n    return getConstructor$1(input) === Boolean;\n  };\n\n  var isFunction$1 = function isFunction(input) {\n    return getConstructor$1(input) === Function;\n  };\n\n  var isArray$1 = function isArray(input) {\n    return Array.isArray(input);\n  };\n\n  var isWeakMap = function isWeakMap(input) {\n    return instanceOf$1(input, WeakMap);\n  };\n\n  var isNodeList$1 = function isNodeList(input) {\n    return instanceOf$1(input, NodeList);\n  };\n\n  var isElement$1 = function isElement(input) {\n    return instanceOf$1(input, Element);\n  };\n\n  var isTextNode = function isTextNode(input) {\n    return getConstructor$1(input) === Text;\n  };\n\n  var isEvent$1 = function isEvent(input) {\n    return instanceOf$1(input, Event);\n  };\n\n  var isKeyboardEvent = function isKeyboardEvent(input) {\n    return instanceOf$1(input, KeyboardEvent);\n  };\n\n  var isCue = function isCue(input) {\n    return instanceOf$1(input, window.TextTrackCue) || instanceOf$1(input, window.VTTCue);\n  };\n\n  var isTrack = function isTrack(input) {\n    return instanceOf$1(input, TextTrack) || !isNullOrUndefined$1(input) && isString$1(input.kind);\n  };\n\n  var isPromise = function isPromise(input) {\n    return instanceOf$1(input, Promise) && isFunction$1(input.then);\n  };\n\n  var isEmpty$1 = function isEmpty(input) {\n    return isNullOrUndefined$1(input) || (isString$1(input) || isArray$1(input) || isNodeList$1(input)) && !input.length || isObject$1(input) && !Object.keys(input).length;\n  };\n\n  var isUrl = function isUrl(input) {\n    // Accept a URL object\n    if (instanceOf$1(input, window.URL)) {\n      return true;\n    } // Must be string from here\n\n\n    if (!isString$1(input)) {\n      return false;\n    } // Add the protocol if required\n\n\n    var string = input;\n\n    if (!input.startsWith('http://') || !input.startsWith('https://')) {\n      string = \"http://\".concat(input);\n    }\n\n    try {\n      return !isEmpty$1(new URL(string).hostname);\n    } catch (e) {\n      return false;\n    }\n  };\n\n  var is$1 = {\n    nullOrUndefined: isNullOrUndefined$1,\n    object: isObject$1,\n    number: isNumber$1,\n    string: isString$1,\n    boolean: isBoolean$1,\n    function: isFunction$1,\n    array: isArray$1,\n    weakMap: isWeakMap,\n    nodeList: isNodeList$1,\n    element: isElement$1,\n    textNode: isTextNode,\n    event: isEvent$1,\n    keyboardEvent: isKeyboardEvent,\n    cue: isCue,\n    track: isTrack,\n    promise: isPromise,\n    url: isUrl,\n    empty: isEmpty$1\n  };\n\n  // ==========================================================================\n  var transitionEndEvent = function () {\n    var element = document.createElement('span');\n    var events = {\n      WebkitTransition: 'webkitTransitionEnd',\n      MozTransition: 'transitionend',\n      OTransition: 'oTransitionEnd otransitionend',\n      transition: 'transitionend'\n    };\n    var type = Object.keys(events).find(function (event) {\n      return element.style[event] !== undefined;\n    });\n    return is$1.string(type) ? events[type] : false;\n  }(); // Force repaint of element\n\n  function repaint(element, delay) {\n    setTimeout(function () {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        element.hidden = true; // eslint-disable-next-line no-unused-expressions\n\n        element.offsetHeight; // eslint-disable-next-line no-param-reassign\n\n        element.hidden = false;\n      } catch (e) {// Do nothing\n      }\n    }, delay);\n  }\n\n  // ==========================================================================\n  // Browser sniffing\n  // Unfortunately, due to mixed support, UA sniffing is required\n  // ==========================================================================\n  var browser = {\n    isIE:\n    /* @cc_on!@ */\n     !!document.documentMode,\n    isEdge: window.navigator.userAgent.includes('Edge'),\n    isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n    isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n    isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform)\n  };\n\n  function cloneDeep(object) {\n    return JSON.parse(JSON.stringify(object));\n  } // Get a nested value in an object\n\n  function getDeep(object, path) {\n    return path.split('.').reduce(function (obj, key) {\n      return obj && obj[key];\n    }, object);\n  } // Deep extend destination object with N more objects\n\n  function extend() {\n    var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    if (!sources.length) {\n      return target;\n    }\n\n    var source = sources.shift();\n\n    if (!is$1.object(source)) {\n      return target;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      if (is$1.object(source[key])) {\n        if (!Object.keys(target).includes(key)) {\n          Object.assign(target, _defineProperty({}, key, {}));\n        }\n\n        extend(target[key], source[key]);\n      } else {\n        Object.assign(target, _defineProperty({}, key, source[key]));\n      }\n    });\n    return extend.apply(void 0, [target].concat(sources));\n  }\n\n  function wrap(elements, wrapper) {\n    // Convert `elements` to an array, if necessary.\n    var targets = elements.length ? elements : [elements]; // Loops backwards to prevent having to clone the wrapper on the\n    // first element (see `child` below).\n\n    Array.from(targets).reverse().forEach(function (element, index) {\n      var child = index > 0 ? wrapper.cloneNode(true) : wrapper; // Cache the current parent and sibling.\n\n      var parent = element.parentNode;\n      var sibling = element.nextSibling; // Wrap the element (is automatically removed from its current\n      // parent).\n\n      child.appendChild(element); // If the element had a sibling, insert the wrapper before\n      // the sibling to maintain the HTML structure; otherwise, just\n      // append it to the parent.\n\n      if (sibling) {\n        parent.insertBefore(child, sibling);\n      } else {\n        parent.appendChild(child);\n      }\n    });\n  } // Set attributes\n\n  function setAttributes(element, attributes) {\n    if (!is$1.element(element) || is$1.empty(attributes)) {\n      return;\n    } // Assume null and undefined attributes should be left out,\n    // Setting them would otherwise convert them to \"null\" and \"undefined\"\n\n\n    Object.entries(attributes).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          value = _ref2[1];\n\n      return !is$1.nullOrUndefined(value);\n    }).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      return element.setAttribute(key, value);\n    });\n  } // Create a DocumentFragment\n\n  function createElement(type, attributes, text) {\n    // Create a new <element>\n    var element = document.createElement(type); // Set all passed attributes\n\n    if (is$1.object(attributes)) {\n      setAttributes(element, attributes);\n    } // Add text node\n\n\n    if (is$1.string(text)) {\n      element.innerText = text;\n    } // Return built element\n\n\n    return element;\n  } // Inaert an element after another\n\n  function insertAfter(element, target) {\n    if (!is$1.element(element) || !is$1.element(target)) {\n      return;\n    }\n\n    target.parentNode.insertBefore(element, target.nextSibling);\n  } // Insert a DocumentFragment\n\n  function insertElement(type, parent, attributes, text) {\n    if (!is$1.element(parent)) {\n      return;\n    }\n\n    parent.appendChild(createElement(type, attributes, text));\n  } // Remove element(s)\n\n  function removeElement(element) {\n    if (is$1.nodeList(element) || is$1.array(element)) {\n      Array.from(element).forEach(removeElement);\n      return;\n    }\n\n    if (!is$1.element(element) || !is$1.element(element.parentNode)) {\n      return;\n    }\n\n    element.parentNode.removeChild(element);\n  } // Remove all child elements\n\n  function emptyElement(element) {\n    if (!is$1.element(element)) {\n      return;\n    }\n\n    var length = element.childNodes.length;\n\n    while (length > 0) {\n      element.removeChild(element.lastChild);\n      length -= 1;\n    }\n  } // Replace element\n\n  function replaceElement(newChild, oldChild) {\n    if (!is$1.element(oldChild) || !is$1.element(oldChild.parentNode) || !is$1.element(newChild)) {\n      return null;\n    }\n\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n    return newChild;\n  } // Get an attribute object from a string selector\n\n  function getAttributesFromSelector(sel, existingAttributes) {\n    // For example:\n    // '.test' to { class: 'test' }\n    // '#test' to { id: 'test' }\n    // '[data-test=\"test\"]' to { 'data-test': 'test' }\n    if (!is$1.string(sel) || is$1.empty(sel)) {\n      return {};\n    }\n\n    var attributes = {};\n    var existing = extend({}, existingAttributes);\n    sel.split(',').forEach(function (s) {\n      // Remove whitespace\n      var selector = s.trim();\n      var className = selector.replace('.', '');\n      var stripped = selector.replace(/[[\\]]/g, ''); // Get the parts and value\n\n      var parts = stripped.split('=');\n\n      var _parts = _slicedToArray(parts, 1),\n          key = _parts[0];\n\n      var value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : ''; // Get the first character\n\n      var start = selector.charAt(0);\n\n      switch (start) {\n        case '.':\n          // Add to existing classname\n          if (is$1.string(existing.class)) {\n            attributes.class = \"\".concat(existing.class, \" \").concat(className);\n          } else {\n            attributes.class = className;\n          }\n\n          break;\n\n        case '#':\n          // ID selector\n          attributes.id = selector.replace('#', '');\n          break;\n\n        case '[':\n          // Attribute selector\n          attributes[key] = value;\n          break;\n      }\n    });\n    return extend(existing, attributes);\n  } // Toggle hidden\n\n  function toggleHidden(element, hidden) {\n    if (!is$1.element(element)) {\n      return;\n    }\n\n    var hide = hidden;\n\n    if (!is$1.boolean(hide)) {\n      hide = !element.hidden;\n    } // eslint-disable-next-line no-param-reassign\n\n\n    element.hidden = hide;\n  } // Mirror Element.classList.toggle, with IE compatibility for \"force\" argument\n\n  function toggleClass(element, className, force) {\n    if (is$1.nodeList(element)) {\n      return Array.from(element).map(function (e) {\n        return toggleClass(e, className, force);\n      });\n    }\n\n    if (is$1.element(element)) {\n      var method = 'toggle';\n\n      if (typeof force !== 'undefined') {\n        method = force ? 'add' : 'remove';\n      }\n\n      element.classList[method](className);\n      return element.classList.contains(className);\n    }\n\n    return false;\n  } // Has class name\n\n  function hasClass(element, className) {\n    return is$1.element(element) && element.classList.contains(className);\n  } // Element matches selector\n\n  function matches$1(element, selector) {\n    var _Element = Element,\n        prototype = _Element.prototype;\n\n    function match() {\n      return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    var method = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n    return method.call(element, selector);\n  } // Closest ancestor element matching selector (also tests element itself)\n\n  function closest(element, selector) {\n    var _Element2 = Element,\n        prototype = _Element2.prototype; // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n\n    function closestElement() {\n      var el = this;\n\n      do {\n        if (matches$1.matches(el, selector)) return el;\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n\n      return null;\n    }\n\n    var method = prototype.closest || closestElement;\n    return method.call(element, selector);\n  } // Find all elements\n\n  function getElements(selector) {\n    return this.elements.container.querySelectorAll(selector);\n  } // Find a single element\n\n  function getElement(selector) {\n    return this.elements.container.querySelector(selector);\n  } // Set focus and tab focus class\n\n  function setFocus() {\n    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var tabFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!is$1.element(element)) {\n      return;\n    } // Set regular focus\n\n\n    element.focus({\n      preventScroll: true\n    }); // If we want to mimic keyboard focus via tab\n\n    if (tabFocus) {\n      toggleClass(element, this.config.classNames.tabFocus);\n    }\n  }\n\n  var defaultCodecs = {\n    'audio/ogg': 'vorbis',\n    'audio/wav': '1',\n    'video/webm': 'vp8, vorbis',\n    'video/mp4': 'avc1.42E01E, mp4a.40.2',\n    'video/ogg': 'theora'\n  }; // Check for feature support\n\n  var support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n    // Check for support\n    // Basic functionality vs full UI\n    check: function check(type, provider, playsinline) {\n      var canPlayInline = browser.isIPhone && playsinline && support.playsinline;\n      var api = support[type] || provider !== 'html5';\n      var ui = api && support.rangeInput && (type !== 'video' || !browser.isIPhone || canPlayInline);\n      return {\n        api: api,\n        ui: ui\n      };\n    },\n    // Picture-in-picture support\n    // Safari & Chrome only currently\n    pip: function () {\n      if (browser.isIPhone) {\n        return false;\n      } // Safari\n      // https://developer.apple.com/documentation/webkitjs/adding_picture_in_picture_to_your_safari_media_controls\n\n\n      if (is$1.function(createElement('video').webkitSetPresentationMode)) {\n        return true;\n      } // Chrome\n      // https://developers.google.com/web/updates/2018/10/watch-video-using-picture-in-picture\n\n\n      if (document.pictureInPictureEnabled && !createElement('video').disablePictureInPicture) {\n        return true;\n      }\n\n      return false;\n    }(),\n    // Airplay support\n    // Safari only currently\n    airplay: is$1.function(window.WebKitPlaybackTargetAvailabilityEvent),\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    playsinline: 'playsInline' in document.createElement('video'),\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime: function mime(input) {\n      if (is$1.empty(input)) {\n        return false;\n      }\n\n      var _input$split = input.split('/'),\n          _input$split2 = _slicedToArray(_input$split, 1),\n          mediaType = _input$split2[0];\n\n      var type = input; // Verify we're using HTML5 and there's no media type mismatch\n\n      if (!this.isHTML5 || mediaType !== this.type) {\n        return false;\n      } // Add codec if required\n\n\n      if (Object.keys(defaultCodecs).includes(type)) {\n        type += \"; codecs=\\\"\".concat(defaultCodecs[input], \"\\\"\");\n      }\n\n      try {\n        return Boolean(type && this.media.canPlayType(type).replace(/no/, ''));\n      } catch (e) {\n        return false;\n      }\n    },\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n    // <input type=\"range\"> Sliders\n    rangeInput: function () {\n      var range = document.createElement('input');\n      range.type = 'range';\n      return range.type === 'range';\n    }(),\n    // Touch\n    // NOTE: Remember a device can be mouse + touch enabled so we check on first touch event\n    touch: 'ontouchstart' in document.documentElement,\n    // Detect transitions support\n    transitions: transitionEndEvent !== false,\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches\n  };\n\n  // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n  // https://www.youtube.com/watch?v=NPM6172J22g\n\n  var supportsPassiveListeners = function () {\n    // Test via a getter in the options object to see if the passive property is accessed\n    var supported = false;\n\n    try {\n      var options = Object.defineProperty({}, 'passive', {\n        get: function get() {\n          supported = true;\n          return null;\n        }\n      });\n      window.addEventListener('test', null, options);\n      window.removeEventListener('test', null, options);\n    } catch (e) {// Do nothing\n    }\n\n    return supported;\n  }(); // Toggle event listener\n\n\n  function toggleListener(element, event, callback) {\n    var _this = this;\n\n    var toggle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var passive = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var capture = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    // Bail if no element, event, or callback\n    if (!element || !('addEventListener' in element) || is$1.empty(event) || !is$1.function(callback)) {\n      return;\n    } // Allow multiple events\n\n\n    var events = event.split(' '); // Build options\n    // Default to just the capture boolean for browsers with no passive listener support\n\n    var options = capture; // If passive events listeners are supported\n\n    if (supportsPassiveListeners) {\n      options = {\n        // Whether the listener can be passive (i.e. default never prevented)\n        passive: passive,\n        // Whether the listener is a capturing listener or not\n        capture: capture\n      };\n    } // If a single node is passed, bind the event listener\n\n\n    events.forEach(function (type) {\n      if (_this && _this.eventListeners && toggle) {\n        // Cache event listener\n        _this.eventListeners.push({\n          element: element,\n          type: type,\n          callback: callback,\n          options: options\n        });\n      }\n\n      element[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n    });\n  } // Bind event handler\n\n  function on(element) {\n    var events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var callback = arguments.length > 2 ? arguments[2] : undefined;\n    var passive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var capture = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    toggleListener.call(this, element, events, callback, true, passive, capture);\n  } // Unbind event handler\n\n  function off(element) {\n    var events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var callback = arguments.length > 2 ? arguments[2] : undefined;\n    var passive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var capture = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    toggleListener.call(this, element, events, callback, false, passive, capture);\n  } // Bind once-only event handler\n\n  function once(element) {\n    var _this2 = this;\n\n    var events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var callback = arguments.length > 2 ? arguments[2] : undefined;\n    var passive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var capture = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    var onceCallback = function onceCallback() {\n      off(element, events, onceCallback, passive, capture);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      callback.apply(_this2, args);\n    };\n\n    toggleListener.call(this, element, events, onceCallback, true, passive, capture);\n  } // Trigger event\n\n  function triggerEvent(element) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var bubbles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var detail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    // Bail if no element\n    if (!is$1.element(element) || is$1.empty(type)) {\n      return;\n    } // Create and dispatch the event\n\n\n    var event = new CustomEvent(type, {\n      bubbles: bubbles,\n      detail: _objectSpread2(_objectSpread2({}, detail), {}, {\n        plyr: this\n      })\n    }); // Dispatch the event\n\n    element.dispatchEvent(event);\n  } // Unbind all cached event listeners\n\n  function unbindListeners() {\n    if (this && this.eventListeners) {\n      this.eventListeners.forEach(function (item) {\n        var element = item.element,\n            type = item.type,\n            callback = item.callback,\n            options = item.options;\n        element.removeEventListener(type, callback, options);\n      });\n      this.eventListeners = [];\n    }\n  } // Run method when / if player is ready\n\n  function ready() {\n    var _this3 = this;\n\n    return new Promise(function (resolve) {\n      return _this3.ready ? setTimeout(resolve, 0) : on.call(_this3, _this3.elements.container, 'ready', resolve);\n    }).then(function () {});\n  }\n\n  /**\n   * Silence a Promise-like object.\n   * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\n   * play promise\" rejection error messages.\n   * @param  {Object} value An object that may or may not be `Promise`-like.\n   */\n\n  function silencePromise(value) {\n    if (is$1.promise(value)) {\n      value.then(null, function () {});\n    }\n  }\n\n  function validateRatio(input) {\n    if (!is$1.array(input) && (!is$1.string(input) || !input.includes(':'))) {\n      return false;\n    }\n\n    var ratio = is$1.array(input) ? input : input.split(':');\n    return ratio.map(Number).every(is$1.number);\n  }\n  function reduceAspectRatio(ratio) {\n    if (!is$1.array(ratio) || !ratio.every(is$1.number)) {\n      return null;\n    }\n\n    var _ratio = _slicedToArray(ratio, 2),\n        width = _ratio[0],\n        height = _ratio[1];\n\n    var getDivider = function getDivider(w, h) {\n      return h === 0 ? w : getDivider(h, w % h);\n    };\n\n    var divider = getDivider(width, height);\n    return [width / divider, height / divider];\n  }\n  function getAspectRatio(input) {\n    var parse = function parse(ratio) {\n      return validateRatio(ratio) ? ratio.split(':').map(Number) : null;\n    }; // Try provided ratio\n\n\n    var ratio = parse(input); // Get from config\n\n    if (ratio === null) {\n      ratio = parse(this.config.ratio);\n    } // Get from embed\n\n\n    if (ratio === null && !is$1.empty(this.embed) && is$1.array(this.embed.ratio)) {\n      ratio = this.embed.ratio;\n    } // Get from HTML5 video\n\n\n    if (ratio === null && this.isHTML5) {\n      var _this$media = this.media,\n          videoWidth = _this$media.videoWidth,\n          videoHeight = _this$media.videoHeight;\n      ratio = reduceAspectRatio([videoWidth, videoHeight]);\n    }\n\n    return ratio;\n  } // Set aspect ratio for responsive container\n\n  function setAspectRatio(input) {\n    if (!this.isVideo) {\n      return {};\n    }\n\n    var wrapper = this.elements.wrapper;\n    var ratio = getAspectRatio.call(this, input);\n\n    var _ref = is$1.array(ratio) ? ratio : [0, 0],\n        _ref2 = _slicedToArray(_ref, 2),\n        w = _ref2[0],\n        h = _ref2[1];\n\n    var padding = 100 / w * h;\n    wrapper.style.paddingBottom = \"\".concat(padding, \"%\"); // For Vimeo we have an extra <div> to hide the standard controls and UI\n\n    if (this.isVimeo && !this.config.vimeo.premium && this.supported.ui) {\n      var height = 100 / this.media.offsetWidth * parseInt(window.getComputedStyle(this.media).paddingBottom, 10);\n      var offset = (height - padding) / (height / 50);\n\n      if (this.fullscreen.active) {\n        wrapper.style.paddingBottom = null;\n      } else {\n        this.media.style.transform = \"translateY(-\".concat(offset, \"%)\");\n      }\n    } else if (this.isHTML5) {\n      wrapper.classList.toggle(this.config.classNames.videoFixedRatio, ratio !== null);\n    }\n\n    return {\n      padding: padding,\n      ratio: ratio\n    };\n  }\n\n  // ==========================================================================\n  var html5 = {\n    getSources: function getSources() {\n      var _this = this;\n\n      if (!this.isHTML5) {\n        return [];\n      }\n\n      var sources = Array.from(this.media.querySelectorAll('source')); // Filter out unsupported sources (if type is specified)\n\n      return sources.filter(function (source) {\n        var type = source.getAttribute('type');\n\n        if (is$1.empty(type)) {\n          return true;\n        }\n\n        return support.mime.call(_this, type);\n      });\n    },\n    // Get quality levels\n    getQualityOptions: function getQualityOptions() {\n      // Whether we're forcing all options (e.g. for streaming)\n      if (this.config.quality.forced) {\n        return this.config.quality.options;\n      } // Get sizes from <source> elements\n\n\n      return html5.getSources.call(this).map(function (source) {\n        return Number(source.getAttribute('size'));\n      }).filter(Boolean);\n    },\n    setup: function setup() {\n      if (!this.isHTML5) {\n        return;\n      }\n\n      var player = this; // Set speed options from config\n\n      player.options.speed = player.config.speed.options; // Set aspect ratio if fixed\n\n      if (!is$1.empty(this.config.ratio)) {\n        setAspectRatio.call(player);\n      } // Quality\n\n\n      Object.defineProperty(player.media, 'quality', {\n        get: function get() {\n          // Get sources\n          var sources = html5.getSources.call(player);\n          var source = sources.find(function (s) {\n            return s.getAttribute('src') === player.source;\n          }); // Return size, if match is found\n\n          return source && Number(source.getAttribute('size'));\n        },\n        set: function set(input) {\n          if (player.quality === input) {\n            return;\n          } // If we're using an an external handler...\n\n\n          if (player.config.quality.forced && is$1.function(player.config.quality.onChange)) {\n            player.config.quality.onChange(input);\n          } else {\n            // Get sources\n            var sources = html5.getSources.call(player); // Get first match for requested size\n\n            var source = sources.find(function (s) {\n              return Number(s.getAttribute('size')) === input;\n            }); // No matching source found\n\n            if (!source) {\n              return;\n            } // Get current state\n\n\n            var _player$media = player.media,\n                currentTime = _player$media.currentTime,\n                paused = _player$media.paused,\n                preload = _player$media.preload,\n                readyState = _player$media.readyState,\n                playbackRate = _player$media.playbackRate; // Set new source\n\n            player.media.src = source.getAttribute('src'); // Prevent loading if preload=\"none\" and the current source isn't loaded (#1044)\n\n            if (preload !== 'none' || readyState) {\n              // Restore time\n              player.once('loadedmetadata', function () {\n                player.speed = playbackRate;\n                player.currentTime = currentTime; // Resume playing\n\n                if (!paused) {\n                  silencePromise(player.play());\n                }\n              }); // Load new source\n\n              player.media.load();\n            }\n          } // Trigger change event\n\n\n          triggerEvent.call(player, player.media, 'qualitychange', false, {\n            quality: input\n          });\n        }\n      });\n    },\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests: function cancelRequests() {\n      if (!this.isHTML5) {\n        return;\n      } // Remove child sources\n\n\n      removeElement(html5.getSources.call(this)); // Set blank video src attribute\n      // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n      // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n\n      this.media.setAttribute('src', this.config.blankVideo); // Load the new empty source\n      // This will cancel existing requests\n      // See https://github.com/sampotts/plyr/issues/174\n\n      this.media.load(); // Debugging\n\n      this.debug.log('Cancelled network requests');\n    }\n  };\n\n  // ==========================================================================\n\n  function dedupe(array) {\n    if (!is$1.array(array)) {\n      return array;\n    }\n\n    return array.filter(function (item, index) {\n      return array.indexOf(item) === index;\n    });\n  } // Get the closest value in an array\n\n  function closest$1(array, value) {\n    if (!is$1.array(array) || !array.length) {\n      return null;\n    }\n\n    return array.reduce(function (prev, curr) {\n      return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n    });\n  }\n\n  // ==========================================================================\n\n  function generateId(prefix) {\n    return \"\".concat(prefix, \"-\").concat(Math.floor(Math.random() * 10000));\n  } // Format string\n\n  function format(input) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (is$1.empty(input)) {\n      return input;\n    }\n\n    return input.toString().replace(/{(\\d+)}/g, function (match, i) {\n      return args[i].toString();\n    });\n  } // Get percentage\n\n  function getPercentage(current, max) {\n    if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n      return 0;\n    }\n\n    return (current / max * 100).toFixed(2);\n  } // Replace all occurances of a string in a string\n\n  var replaceAll = function replaceAll() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var find = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var replace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    return input.replace(new RegExp(find.toString().replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1'), 'g'), replace.toString());\n  }; // Convert to title case\n\n  var toTitleCase = function toTitleCase() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return input.toString().replace(/\\w\\S*/g, function (text) {\n      return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();\n    });\n  }; // Convert string to pascalCase\n\n  function toPascalCase() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var string = input.toString(); // Convert kebab case\n\n    string = replaceAll(string, '-', ' '); // Convert snake case\n\n    string = replaceAll(string, '_', ' '); // Convert to title case\n\n    string = toTitleCase(string); // Convert to pascal case\n\n    return replaceAll(string, ' ', '');\n  } // Convert string to pascalCase\n\n  function toCamelCase() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var string = input.toString(); // Convert to pascal case\n\n    string = toPascalCase(string); // Convert first character to lowercase\n\n    return string.charAt(0).toLowerCase() + string.slice(1);\n  } // Remove HTML from a string\n\n  function stripHTML(source) {\n    var fragment = document.createDocumentFragment();\n    var element = document.createElement('div');\n    fragment.appendChild(element);\n    element.innerHTML = source;\n    return fragment.firstChild.innerText;\n  } // Like outerHTML, but also works for DocumentFragment\n\n  function getHTML(element) {\n    var wrapper = document.createElement('div');\n    wrapper.appendChild(element);\n    return wrapper.innerHTML;\n  }\n\n  var resources = {\n    pip: 'PIP',\n    airplay: 'AirPlay',\n    html5: 'HTML5',\n    vimeo: 'Vimeo',\n    youtube: 'YouTube'\n  };\n  var i18n = {\n    get: function get() {\n      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (is$1.empty(key) || is$1.empty(config)) {\n        return '';\n      }\n\n      var string = getDeep(config.i18n, key);\n\n      if (is$1.empty(string)) {\n        if (Object.keys(resources).includes(key)) {\n          return resources[key];\n        }\n\n        return '';\n      }\n\n      var replace = {\n        '{seektime}': config.seekTime,\n        '{title}': config.title\n      };\n      Object.entries(replace).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            k = _ref2[0],\n            v = _ref2[1];\n\n        string = replaceAll(string, k, v);\n      });\n      return string;\n    }\n  };\n\n  var Storage = /*#__PURE__*/function () {\n    function Storage(player) {\n      _classCallCheck(this, Storage);\n\n      this.enabled = player.config.storage.enabled;\n      this.key = player.config.storage.key;\n    } // Check for actual support (see if we can use it)\n\n\n    _createClass(Storage, [{\n      key: \"get\",\n      value: function get(key) {\n        if (!Storage.supported || !this.enabled) {\n          return null;\n        }\n\n        var store = window.localStorage.getItem(this.key);\n\n        if (is$1.empty(store)) {\n          return null;\n        }\n\n        var json = JSON.parse(store);\n        return is$1.string(key) && key.length ? json[key] : json;\n      }\n    }, {\n      key: \"set\",\n      value: function set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n          return;\n        } // Can only store objectst\n\n\n        if (!is$1.object(object)) {\n          return;\n        } // Get current storage\n\n\n        var storage = this.get(); // Default to empty object\n\n        if (is$1.empty(storage)) {\n          storage = {};\n        } // Update the working copy of the values\n\n\n        extend(storage, object); // Update storage\n\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n      }\n    }], [{\n      key: \"supported\",\n      get: function get() {\n        try {\n          if (!('localStorage' in window)) {\n            return false;\n          }\n\n          var test = '___test'; // Try to use it (it might be disabled, e.g. user is in private mode)\n          // see: https://github.com/sampotts/plyr/issues/131\n\n          window.localStorage.setItem(test, test);\n          window.localStorage.removeItem(test);\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }\n    }]);\n\n    return Storage;\n  }();\n\n  // ==========================================================================\n  // Fetch wrapper\n  // Using XHR to avoid issues with older browsers\n  // ==========================================================================\n  function fetch(url) {\n    var responseType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';\n    return new Promise(function (resolve, reject) {\n      try {\n        var request = new XMLHttpRequest(); // Check for CORS support\n\n        if (!('withCredentials' in request)) {\n          return;\n        }\n\n        request.addEventListener('load', function () {\n          if (responseType === 'text') {\n            try {\n              resolve(JSON.parse(request.responseText));\n            } catch (e) {\n              resolve(request.responseText);\n            }\n          } else {\n            resolve(request.response);\n          }\n        });\n        request.addEventListener('error', function () {\n          throw new Error(request.status);\n        });\n        request.open('GET', url, true); // Set the required response type\n\n        request.responseType = responseType;\n        request.send();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  // ==========================================================================\n\n  function loadSprite(url, id) {\n    if (!is$1.string(url)) {\n      return;\n    }\n\n    var prefix = 'cache';\n    var hasId = is$1.string(id);\n    var isCached = false;\n\n    var exists = function exists() {\n      return document.getElementById(id) !== null;\n    };\n\n    var update = function update(container, data) {\n      // eslint-disable-next-line no-param-reassign\n      container.innerHTML = data; // Check again incase of race condition\n\n      if (hasId && exists()) {\n        return;\n      } // Inject the SVG to the body\n\n\n      document.body.insertAdjacentElement('afterbegin', container);\n    }; // Only load once if ID set\n\n\n    if (!hasId || !exists()) {\n      var useStorage = Storage.supported; // Create container\n\n      var container = document.createElement('div');\n      container.setAttribute('hidden', '');\n\n      if (hasId) {\n        container.setAttribute('id', id);\n      } // Check in cache\n\n\n      if (useStorage) {\n        var cached = window.localStorage.getItem(\"\".concat(prefix, \"-\").concat(id));\n        isCached = cached !== null;\n\n        if (isCached) {\n          var data = JSON.parse(cached);\n          update(container, data.content);\n        }\n      } // Get the sprite\n\n\n      fetch(url).then(function (result) {\n        if (is$1.empty(result)) {\n          return;\n        }\n\n        if (useStorage) {\n          window.localStorage.setItem(\"\".concat(prefix, \"-\").concat(id), JSON.stringify({\n            content: result\n          }));\n        }\n\n        update(container, result);\n      }).catch(function () {});\n    }\n  }\n\n  // ==========================================================================\n\n  var getHours = function getHours(value) {\n    return Math.trunc(value / 60 / 60 % 60, 10);\n  };\n  var getMinutes = function getMinutes(value) {\n    return Math.trunc(value / 60 % 60, 10);\n  };\n  var getSeconds = function getSeconds(value) {\n    return Math.trunc(value % 60, 10);\n  }; // Format time to UI friendly string\n\n  function formatTime() {\n    var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var displayHours = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var inverted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    // Bail if the value isn't a number\n    if (!is$1.number(time)) {\n      return formatTime(undefined, displayHours, inverted);\n    } // Format time component to add leading zero\n\n\n    var format = function format(value) {\n      return \"0\".concat(value).slice(-2);\n    }; // Breakdown to hours, mins, secs\n\n\n    var hours = getHours(time);\n    var mins = getMinutes(time);\n    var secs = getSeconds(time); // Do we need to display hours?\n\n    if (displayHours || hours > 0) {\n      hours = \"\".concat(hours, \":\");\n    } else {\n      hours = '';\n    } // Render\n\n\n    return \"\".concat(inverted && time > 0 ? '-' : '').concat(hours).concat(format(mins), \":\").concat(format(secs));\n  }\n\n  var controls = {\n    // Get icon URL\n    getIconUrl: function getIconUrl() {\n      var url = new URL(this.config.iconUrl, window.location);\n      var cors = url.host !== window.location.host || browser.isIE && !window.svg4everybody;\n      return {\n        url: this.config.iconUrl,\n        cors: cors\n      };\n    },\n    // Find the UI controls\n    findElements: function findElements() {\n      try {\n        this.elements.controls = getElement.call(this, this.config.selectors.controls.wrapper); // Buttons\n\n        this.elements.buttons = {\n          play: getElements.call(this, this.config.selectors.buttons.play),\n          pause: getElement.call(this, this.config.selectors.buttons.pause),\n          restart: getElement.call(this, this.config.selectors.buttons.restart),\n          rewind: getElement.call(this, this.config.selectors.buttons.rewind),\n          fastForward: getElement.call(this, this.config.selectors.buttons.fastForward),\n          mute: getElement.call(this, this.config.selectors.buttons.mute),\n          pip: getElement.call(this, this.config.selectors.buttons.pip),\n          airplay: getElement.call(this, this.config.selectors.buttons.airplay),\n          settings: getElement.call(this, this.config.selectors.buttons.settings),\n          captions: getElement.call(this, this.config.selectors.buttons.captions),\n          fullscreen: getElement.call(this, this.config.selectors.buttons.fullscreen)\n        }; // Progress\n\n        this.elements.progress = getElement.call(this, this.config.selectors.progress); // Inputs\n\n        this.elements.inputs = {\n          seek: getElement.call(this, this.config.selectors.inputs.seek),\n          volume: getElement.call(this, this.config.selectors.inputs.volume)\n        }; // Display\n\n        this.elements.display = {\n          buffer: getElement.call(this, this.config.selectors.display.buffer),\n          currentTime: getElement.call(this, this.config.selectors.display.currentTime),\n          duration: getElement.call(this, this.config.selectors.display.duration)\n        }; // Seek tooltip\n\n        if (is$1.element(this.elements.progress)) {\n          this.elements.display.seekTooltip = this.elements.progress.querySelector(\".\".concat(this.config.classNames.tooltip));\n        }\n\n        return true;\n      } catch (error) {\n        // Log it\n        this.debug.warn('It looks like there is a problem with your custom controls HTML', error); // Restore native video controls\n\n        this.toggleNativeControls(true);\n        return false;\n      }\n    },\n    // Create <svg> icon\n    createIcon: function createIcon(type, attributes) {\n      var namespace = 'http://www.w3.org/2000/svg';\n      var iconUrl = controls.getIconUrl.call(this);\n      var iconPath = \"\".concat(!iconUrl.cors ? iconUrl.url : '', \"#\").concat(this.config.iconPrefix); // Create <svg>\n\n      var icon = document.createElementNS(namespace, 'svg');\n      setAttributes(icon, extend(attributes, {\n        'aria-hidden': 'true',\n        focusable: 'false'\n      })); // Create the <use> to reference sprite\n\n      var use = document.createElementNS(namespace, 'use');\n      var path = \"\".concat(iconPath, \"-\").concat(type); // Set `href` attributes\n      // https://github.com/sampotts/plyr/issues/460\n      // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n\n      if ('href' in use) {\n        use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n      } // Always set the older attribute even though it's \"deprecated\" (it'll be around for ages)\n\n\n      use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path); // Add <use> to <svg>\n\n      icon.appendChild(use);\n      return icon;\n    },\n    // Create hidden text label\n    createLabel: function createLabel(key) {\n      var attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var text = i18n.get(key, this.config);\n\n      var attributes = _objectSpread2(_objectSpread2({}, attr), {}, {\n        class: [attr.class, this.config.classNames.hidden].filter(Boolean).join(' ')\n      });\n\n      return createElement('span', attributes, text);\n    },\n    // Create a badge\n    createBadge: function createBadge(text) {\n      if (is$1.empty(text)) {\n        return null;\n      }\n\n      var badge = createElement('span', {\n        class: this.config.classNames.menu.value\n      });\n      badge.appendChild(createElement('span', {\n        class: this.config.classNames.menu.badge\n      }, text));\n      return badge;\n    },\n    // Create a <button>\n    createButton: function createButton(buttonType, attr) {\n      var _this = this;\n\n      var attributes = extend({}, attr);\n      var type = toCamelCase(buttonType);\n      var props = {\n        element: 'button',\n        toggle: false,\n        label: null,\n        icon: null,\n        labelPressed: null,\n        iconPressed: null\n      };\n      ['element', 'icon', 'label'].forEach(function (key) {\n        if (Object.keys(attributes).includes(key)) {\n          props[key] = attributes[key];\n          delete attributes[key];\n        }\n      }); // Default to 'button' type to prevent form submission\n\n      if (props.element === 'button' && !Object.keys(attributes).includes('type')) {\n        attributes.type = 'button';\n      } // Set class name\n\n\n      if (Object.keys(attributes).includes('class')) {\n        if (!attributes.class.split(' ').some(function (c) {\n          return c === _this.config.classNames.control;\n        })) {\n          extend(attributes, {\n            class: \"\".concat(attributes.class, \" \").concat(this.config.classNames.control)\n          });\n        }\n      } else {\n        attributes.class = this.config.classNames.control;\n      } // Large play button\n\n\n      switch (buttonType) {\n        case 'play':\n          props.toggle = true;\n          props.label = 'play';\n          props.labelPressed = 'pause';\n          props.icon = 'play';\n          props.iconPressed = 'pause';\n          break;\n\n        case 'mute':\n          props.toggle = true;\n          props.label = 'mute';\n          props.labelPressed = 'unmute';\n          props.icon = 'volume';\n          props.iconPressed = 'muted';\n          break;\n\n        case 'captions':\n          props.toggle = true;\n          props.label = 'enableCaptions';\n          props.labelPressed = 'disableCaptions';\n          props.icon = 'captions-off';\n          props.iconPressed = 'captions-on';\n          break;\n\n        case 'fullscreen':\n          props.toggle = true;\n          props.label = 'enterFullscreen';\n          props.labelPressed = 'exitFullscreen';\n          props.icon = 'enter-fullscreen';\n          props.iconPressed = 'exit-fullscreen';\n          break;\n\n        case 'play-large':\n          attributes.class += \" \".concat(this.config.classNames.control, \"--overlaid\");\n          type = 'play';\n          props.label = 'play';\n          props.icon = 'play';\n          break;\n\n        default:\n          if (is$1.empty(props.label)) {\n            props.label = type;\n          }\n\n          if (is$1.empty(props.icon)) {\n            props.icon = buttonType;\n          }\n\n      }\n\n      var button = createElement(props.element); // Setup toggle icon and labels\n\n      if (props.toggle) {\n        // Icon\n        button.appendChild(controls.createIcon.call(this, props.iconPressed, {\n          class: 'icon--pressed'\n        }));\n        button.appendChild(controls.createIcon.call(this, props.icon, {\n          class: 'icon--not-pressed'\n        })); // Label/Tooltip\n\n        button.appendChild(controls.createLabel.call(this, props.labelPressed, {\n          class: 'label--pressed'\n        }));\n        button.appendChild(controls.createLabel.call(this, props.label, {\n          class: 'label--not-pressed'\n        }));\n      } else {\n        button.appendChild(controls.createIcon.call(this, props.icon));\n        button.appendChild(controls.createLabel.call(this, props.label));\n      } // Merge and set attributes\n\n\n      extend(attributes, getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n      setAttributes(button, attributes); // We have multiple play buttons\n\n      if (type === 'play') {\n        if (!is$1.array(this.elements.buttons[type])) {\n          this.elements.buttons[type] = [];\n        }\n\n        this.elements.buttons[type].push(button);\n      } else {\n        this.elements.buttons[type] = button;\n      }\n\n      return button;\n    },\n    // Create an <input type='range'>\n    createRange: function createRange(type, attributes) {\n      // Seek input\n      var input = createElement('input', extend(getAttributesFromSelector(this.config.selectors.inputs[type]), {\n        type: 'range',\n        min: 0,\n        max: 100,\n        step: 0.01,\n        value: 0,\n        autocomplete: 'off',\n        // A11y fixes for https://github.com/sampotts/plyr/issues/905\n        role: 'slider',\n        'aria-label': i18n.get(type, this.config),\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': 0\n      }, attributes));\n      this.elements.inputs[type] = input; // Set the fill for webkit now\n\n      controls.updateRangeFill.call(this, input); // Improve support on touch devices\n\n      RangeTouch.setup(input);\n      return input;\n    },\n    // Create a <progress>\n    createProgress: function createProgress(type, attributes) {\n      var progress = createElement('progress', extend(getAttributesFromSelector(this.config.selectors.display[type]), {\n        min: 0,\n        max: 100,\n        value: 0,\n        role: 'progressbar',\n        'aria-hidden': true\n      }, attributes)); // Create the label inside\n\n      if (type !== 'volume') {\n        progress.appendChild(createElement('span', null, '0'));\n        var suffixKey = {\n          played: 'played',\n          buffer: 'buffered'\n        }[type];\n        var suffix = suffixKey ? i18n.get(suffixKey, this.config) : '';\n        progress.innerText = \"% \".concat(suffix.toLowerCase());\n      }\n\n      this.elements.display[type] = progress;\n      return progress;\n    },\n    // Create time display\n    createTime: function createTime(type, attrs) {\n      var attributes = getAttributesFromSelector(this.config.selectors.display[type], attrs);\n      var container = createElement('div', extend(attributes, {\n        class: \"\".concat(attributes.class ? attributes.class : '', \" \").concat(this.config.classNames.display.time, \" \").trim(),\n        'aria-label': i18n.get(type, this.config)\n      }), '00:00'); // Reference for updates\n\n      this.elements.display[type] = container;\n      return container;\n    },\n    // Bind keyboard shortcuts for a menu item\n    // We have to bind to keyup otherwise Firefox triggers a click when a keydown event handler shifts focus\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n    bindMenuItemShortcuts: function bindMenuItemShortcuts(menuItem, type) {\n      var _this2 = this;\n\n      // Navigate through menus via arrow keys and space\n      on.call(this, menuItem, 'keydown keyup', function (event) {\n        // We only care about space and ⬆️ ⬇️️ ➡️\n        if (![32, 38, 39, 40].includes(event.which)) {\n          return;\n        } // Prevent play / seek\n\n\n        event.preventDefault();\n        event.stopPropagation(); // We're just here to prevent the keydown bubbling\n\n        if (event.type === 'keydown') {\n          return;\n        }\n\n        var isRadioButton = matches$1(menuItem, '[role=\"menuitemradio\"]'); // Show the respective menu\n\n        if (!isRadioButton && [32, 39].includes(event.which)) {\n          controls.showMenuPanel.call(_this2, type, true);\n        } else {\n          var target;\n\n          if (event.which !== 32) {\n            if (event.which === 40 || isRadioButton && event.which === 39) {\n              target = menuItem.nextElementSibling;\n\n              if (!is$1.element(target)) {\n                target = menuItem.parentNode.firstElementChild;\n              }\n            } else {\n              target = menuItem.previousElementSibling;\n\n              if (!is$1.element(target)) {\n                target = menuItem.parentNode.lastElementChild;\n              }\n            }\n\n            setFocus.call(_this2, target, true);\n          }\n        }\n      }, false); // Enter will fire a `click` event but we still need to manage focus\n      // So we bind to keyup which fires after and set focus here\n\n      on.call(this, menuItem, 'keyup', function (event) {\n        if (event.which !== 13) {\n          return;\n        }\n\n        controls.focusFirstMenuItem.call(_this2, null, true);\n      });\n    },\n    // Create a settings menu item\n    createMenuItem: function createMenuItem(_ref) {\n      var _this3 = this;\n\n      var value = _ref.value,\n          list = _ref.list,\n          type = _ref.type,\n          title = _ref.title,\n          _ref$badge = _ref.badge,\n          badge = _ref$badge === void 0 ? null : _ref$badge,\n          _ref$checked = _ref.checked,\n          checked = _ref$checked === void 0 ? false : _ref$checked;\n      var attributes = getAttributesFromSelector(this.config.selectors.inputs[type]);\n      var menuItem = createElement('button', extend(attributes, {\n        type: 'button',\n        role: 'menuitemradio',\n        class: \"\".concat(this.config.classNames.control, \" \").concat(attributes.class ? attributes.class : '').trim(),\n        'aria-checked': checked,\n        value: value\n      }));\n      var flex = createElement('span'); // We have to set as HTML incase of special characters\n\n      flex.innerHTML = title;\n\n      if (is$1.element(badge)) {\n        flex.appendChild(badge);\n      }\n\n      menuItem.appendChild(flex); // Replicate radio button behaviour\n\n      Object.defineProperty(menuItem, 'checked', {\n        enumerable: true,\n        get: function get() {\n          return menuItem.getAttribute('aria-checked') === 'true';\n        },\n        set: function set(check) {\n          // Ensure exclusivity\n          if (check) {\n            Array.from(menuItem.parentNode.children).filter(function (node) {\n              return matches$1(node, '[role=\"menuitemradio\"]');\n            }).forEach(function (node) {\n              return node.setAttribute('aria-checked', 'false');\n            });\n          }\n\n          menuItem.setAttribute('aria-checked', check ? 'true' : 'false');\n        }\n      });\n      this.listeners.bind(menuItem, 'click keyup', function (event) {\n        if (is$1.keyboardEvent(event) && event.which !== 32) {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        menuItem.checked = true;\n\n        switch (type) {\n          case 'language':\n            _this3.currentTrack = Number(value);\n            break;\n\n          case 'quality':\n            _this3.quality = value;\n            break;\n\n          case 'speed':\n            _this3.speed = parseFloat(value);\n            break;\n        }\n\n        controls.showMenuPanel.call(_this3, 'home', is$1.keyboardEvent(event));\n      }, type, false);\n      controls.bindMenuItemShortcuts.call(this, menuItem, type);\n      list.appendChild(menuItem);\n    },\n    // Format a time for display\n    formatTime: function formatTime$1() {\n      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var inverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // Bail if the value isn't a number\n      if (!is$1.number(time)) {\n        return time;\n      } // Always display hours if duration is over an hour\n\n\n      var forceHours = getHours(this.duration) > 0;\n      return formatTime(time, forceHours, inverted);\n    },\n    // Update the displayed time\n    updateTimeDisplay: function updateTimeDisplay() {\n      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var inverted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      // Bail if there's no element to display or the value isn't a number\n      if (!is$1.element(target) || !is$1.number(time)) {\n        return;\n      } // eslint-disable-next-line no-param-reassign\n\n\n      target.innerText = controls.formatTime(time, inverted);\n    },\n    // Update volume UI and storage\n    updateVolume: function updateVolume() {\n      if (!this.supported.ui) {\n        return;\n      } // Update range\n\n\n      if (is$1.element(this.elements.inputs.volume)) {\n        controls.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n      } // Update mute state\n\n\n      if (is$1.element(this.elements.buttons.mute)) {\n        this.elements.buttons.mute.pressed = this.muted || this.volume === 0;\n      }\n    },\n    // Update seek value and lower fill\n    setRange: function setRange(target) {\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (!is$1.element(target)) {\n        return;\n      } // eslint-disable-next-line\n\n\n      target.value = value; // Webkit range fill\n\n      controls.updateRangeFill.call(this, target);\n    },\n    // Update <progress> elements\n    updateProgress: function updateProgress(event) {\n      var _this4 = this;\n\n      if (!this.supported.ui || !is$1.event(event)) {\n        return;\n      }\n\n      var value = 0;\n\n      var setProgress = function setProgress(target, input) {\n        var val = is$1.number(input) ? input : 0;\n        var progress = is$1.element(target) ? target : _this4.elements.display.buffer; // Update value and label\n\n        if (is$1.element(progress)) {\n          progress.value = val; // Update text label inside\n\n          var label = progress.getElementsByTagName('span')[0];\n\n          if (is$1.element(label)) {\n            label.childNodes[0].nodeValue = val;\n          }\n        }\n      };\n\n      if (event) {\n        switch (event.type) {\n          // Video playing\n          case 'timeupdate':\n          case 'seeking':\n          case 'seeked':\n            value = getPercentage(this.currentTime, this.duration); // Set seek range value only if it's a 'natural' time event\n\n            if (event.type === 'timeupdate') {\n              controls.setRange.call(this, this.elements.inputs.seek, value);\n            }\n\n            break;\n          // Check buffer status\n\n          case 'playing':\n          case 'progress':\n            setProgress(this.elements.display.buffer, this.buffered * 100);\n            break;\n        }\n      }\n    },\n    // Webkit polyfill for lower fill range\n    updateRangeFill: function updateRangeFill(target) {\n      // Get range from event if event passed\n      var range = is$1.event(target) ? target.target : target; // Needs to be a valid <input type='range'>\n\n      if (!is$1.element(range) || range.getAttribute('type') !== 'range') {\n        return;\n      } // Set aria values for https://github.com/sampotts/plyr/issues/905\n\n\n      if (matches$1(range, this.config.selectors.inputs.seek)) {\n        range.setAttribute('aria-valuenow', this.currentTime);\n        var currentTime = controls.formatTime(this.currentTime);\n        var duration = controls.formatTime(this.duration);\n        var format = i18n.get('seekLabel', this.config);\n        range.setAttribute('aria-valuetext', format.replace('{currentTime}', currentTime).replace('{duration}', duration));\n      } else if (matches$1(range, this.config.selectors.inputs.volume)) {\n        var percent = range.value * 100;\n        range.setAttribute('aria-valuenow', percent);\n        range.setAttribute('aria-valuetext', \"\".concat(percent.toFixed(1), \"%\"));\n      } else {\n        range.setAttribute('aria-valuenow', range.value);\n      } // WebKit only\n\n\n      if (!browser.isWebkit) {\n        return;\n      } // Set CSS custom property\n\n\n      range.style.setProperty('--value', \"\".concat(range.value / range.max * 100, \"%\"));\n    },\n    // Update hover tooltip for seeking\n    updateSeekTooltip: function updateSeekTooltip(event) {\n      var _this5 = this;\n\n      // Bail if setting not true\n      if (!this.config.tooltips.seek || !is$1.element(this.elements.inputs.seek) || !is$1.element(this.elements.display.seekTooltip) || this.duration === 0) {\n        return;\n      }\n\n      var visible = \"\".concat(this.config.classNames.tooltip, \"--visible\");\n\n      var toggle = function toggle(show) {\n        return toggleClass(_this5.elements.display.seekTooltip, visible, show);\n      }; // Hide on touch\n\n\n      if (this.touch) {\n        toggle(false);\n        return;\n      } // Determine percentage, if already visible\n\n\n      var percent = 0;\n      var clientRect = this.elements.progress.getBoundingClientRect();\n\n      if (is$1.event(event)) {\n        percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n      } else if (hasClass(this.elements.display.seekTooltip, visible)) {\n        percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n      } else {\n        return;\n      } // Set bounds\n\n\n      if (percent < 0) {\n        percent = 0;\n      } else if (percent > 100) {\n        percent = 100;\n      } // Display the time a click would seek to\n\n\n      controls.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent); // Set position\n\n      this.elements.display.seekTooltip.style.left = \"\".concat(percent, \"%\"); // Show/hide the tooltip\n      // If the event is a moues in/out and percentage is inside bounds\n\n      if (is$1.event(event) && ['mouseenter', 'mouseleave'].includes(event.type)) {\n        toggle(event.type === 'mouseenter');\n      }\n    },\n    // Handle time change event\n    timeUpdate: function timeUpdate(event) {\n      // Only invert if only one time element is displayed and used for both duration and currentTime\n      var invert = !is$1.element(this.elements.display.duration) && this.config.invertTime; // Duration\n\n      controls.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert); // Ignore updates while seeking\n\n      if (event && event.type === 'timeupdate' && this.media.seeking) {\n        return;\n      } // Playing progress\n\n\n      controls.updateProgress.call(this, event);\n    },\n    // Show the duration on metadataloaded or durationchange events\n    durationUpdate: function durationUpdate() {\n      // Bail if no UI or durationchange event triggered after playing/seek when invertTime is false\n      if (!this.supported.ui || !this.config.invertTime && this.currentTime) {\n        return;\n      } // If duration is the 2**32 (shaka), Infinity (HLS), DASH-IF (Number.MAX_SAFE_INTEGER || Number.MAX_VALUE) indicating live we hide the currentTime and progressbar.\n      // https://github.com/video-dev/hls.js/blob/5820d29d3c4c8a46e8b75f1e3afa3e68c1a9a2db/src/controller/buffer-controller.js#L415\n      // https://github.com/google/shaka-player/blob/4d889054631f4e1cf0fbd80ddd2b71887c02e232/lib/media/streaming_engine.js#L1062\n      // https://github.com/Dash-Industry-Forum/dash.js/blob/69859f51b969645b234666800d4cb596d89c602d/src/dash/models/DashManifestModel.js#L338\n\n\n      if (this.duration >= Math.pow(2, 32)) {\n        toggleHidden(this.elements.display.currentTime, true);\n        toggleHidden(this.elements.progress, true);\n        return;\n      } // Update ARIA values\n\n\n      if (is$1.element(this.elements.inputs.seek)) {\n        this.elements.inputs.seek.setAttribute('aria-valuemax', this.duration);\n      } // If there's a spot to display duration\n\n\n      var hasDuration = is$1.element(this.elements.display.duration); // If there's only one time display, display duration there\n\n      if (!hasDuration && this.config.displayDuration && this.paused) {\n        controls.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n      } // If there's a duration element, update content\n\n\n      if (hasDuration) {\n        controls.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n      } // Update the tooltip (if visible)\n\n\n      controls.updateSeekTooltip.call(this);\n    },\n    // Hide/show a tab\n    toggleMenuButton: function toggleMenuButton(setting, toggle) {\n      toggleHidden(this.elements.settings.buttons[setting], !toggle);\n    },\n    // Update the selected setting\n    updateSetting: function updateSetting(setting, container, input) {\n      var pane = this.elements.settings.panels[setting];\n      var value = null;\n      var list = container;\n\n      if (setting === 'captions') {\n        value = this.currentTrack;\n      } else {\n        value = !is$1.empty(input) ? input : this[setting]; // Get default\n\n        if (is$1.empty(value)) {\n          value = this.config[setting].default;\n        } // Unsupported value\n\n\n        if (!is$1.empty(this.options[setting]) && !this.options[setting].includes(value)) {\n          this.debug.warn(\"Unsupported value of '\".concat(value, \"' for \").concat(setting));\n          return;\n        } // Disabled value\n\n\n        if (!this.config[setting].options.includes(value)) {\n          this.debug.warn(\"Disabled value of '\".concat(value, \"' for \").concat(setting));\n          return;\n        }\n      } // Get the list if we need to\n\n\n      if (!is$1.element(list)) {\n        list = pane && pane.querySelector('[role=\"menu\"]');\n      } // If there's no list it means it's not been rendered...\n\n\n      if (!is$1.element(list)) {\n        return;\n      } // Update the label\n\n\n      var label = this.elements.settings.buttons[setting].querySelector(\".\".concat(this.config.classNames.menu.value));\n      label.innerHTML = controls.getLabel.call(this, setting, value); // Find the radio option and check it\n\n      var target = list && list.querySelector(\"[value=\\\"\".concat(value, \"\\\"]\"));\n\n      if (is$1.element(target)) {\n        target.checked = true;\n      }\n    },\n    // Translate a value into a nice label\n    getLabel: function getLabel(setting, value) {\n      switch (setting) {\n        case 'speed':\n          return value === 1 ? i18n.get('normal', this.config) : \"\".concat(value, \"&times;\");\n\n        case 'quality':\n          if (is$1.number(value)) {\n            var label = i18n.get(\"qualityLabel.\".concat(value), this.config);\n\n            if (!label.length) {\n              return \"\".concat(value, \"p\");\n            }\n\n            return label;\n          }\n\n          return toTitleCase(value);\n\n        case 'captions':\n          return captions.getLabel.call(this);\n\n        default:\n          return null;\n      }\n    },\n    // Set the quality menu\n    setQualityMenu: function setQualityMenu(options) {\n      var _this6 = this;\n\n      // Menu required\n      if (!is$1.element(this.elements.settings.panels.quality)) {\n        return;\n      }\n\n      var type = 'quality';\n      var list = this.elements.settings.panels.quality.querySelector('[role=\"menu\"]'); // Set options if passed and filter based on uniqueness and config\n\n      if (is$1.array(options)) {\n        this.options.quality = dedupe(options).filter(function (quality) {\n          return _this6.config.quality.options.includes(quality);\n        });\n      } // Toggle the pane and tab\n\n\n      var toggle = !is$1.empty(this.options.quality) && this.options.quality.length > 1;\n      controls.toggleMenuButton.call(this, type, toggle); // Empty the menu\n\n      emptyElement(list); // Check if we need to toggle the parent\n\n      controls.checkMenu.call(this); // If we're hiding, nothing more to do\n\n      if (!toggle) {\n        return;\n      } // Get the badge HTML for HD, 4K etc\n\n\n      var getBadge = function getBadge(quality) {\n        var label = i18n.get(\"qualityBadge.\".concat(quality), _this6.config);\n\n        if (!label.length) {\n          return null;\n        }\n\n        return controls.createBadge.call(_this6, label);\n      }; // Sort options by the config and then render options\n\n\n      this.options.quality.sort(function (a, b) {\n        var sorting = _this6.config.quality.options;\n        return sorting.indexOf(a) > sorting.indexOf(b) ? 1 : -1;\n      }).forEach(function (quality) {\n        controls.createMenuItem.call(_this6, {\n          value: quality,\n          list: list,\n          type: type,\n          title: controls.getLabel.call(_this6, 'quality', quality),\n          badge: getBadge(quality)\n        });\n      });\n      controls.updateSetting.call(this, type, list);\n    },\n    // Set the looping options\n\n    /* setLoopMenu() {\n          // Menu required\n          if (!is.element(this.elements.settings.panels.loop)) {\n              return;\n          }\n           const options = ['start', 'end', 'all', 'reset'];\n          const list = this.elements.settings.panels.loop.querySelector('[role=\"menu\"]');\n           // Show the pane and tab\n          toggleHidden(this.elements.settings.buttons.loop, false);\n          toggleHidden(this.elements.settings.panels.loop, false);\n           // Toggle the pane and tab\n          const toggle = !is.empty(this.loop.options);\n          controls.toggleMenuButton.call(this, 'loop', toggle);\n           // Empty the menu\n          emptyElement(list);\n           options.forEach(option => {\n              const item = createElement('li');\n               const button = createElement(\n                  'button',\n                  extend(getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                      type: 'button',\n                      class: this.config.classNames.control,\n                      'data-plyr-loop-action': option,\n                  }),\n                  i18n.get(option, this.config)\n              );\n               if (['start', 'end'].includes(option)) {\n                  const badge = controls.createBadge.call(this, '00:00');\n                  button.appendChild(badge);\n              }\n               item.appendChild(button);\n              list.appendChild(item);\n          });\n      }, */\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    // Set a list of available captions languages\n    setCaptionsMenu: function setCaptionsMenu() {\n      var _this7 = this;\n\n      // Menu required\n      if (!is$1.element(this.elements.settings.panels.captions)) {\n        return;\n      } // TODO: Captions or language? Currently it's mixed\n\n\n      var type = 'captions';\n      var list = this.elements.settings.panels.captions.querySelector('[role=\"menu\"]');\n      var tracks = captions.getTracks.call(this);\n      var toggle = Boolean(tracks.length); // Toggle the pane and tab\n\n      controls.toggleMenuButton.call(this, type, toggle); // Empty the menu\n\n      emptyElement(list); // Check if we need to toggle the parent\n\n      controls.checkMenu.call(this); // If there's no captions, bail\n\n      if (!toggle) {\n        return;\n      } // Generate options data\n\n\n      var options = tracks.map(function (track, value) {\n        return {\n          value: value,\n          checked: _this7.captions.toggled && _this7.currentTrack === value,\n          title: captions.getLabel.call(_this7, track),\n          badge: track.language && controls.createBadge.call(_this7, track.language.toUpperCase()),\n          list: list,\n          type: 'language'\n        };\n      }); // Add the \"Disabled\" option to turn off captions\n\n      options.unshift({\n        value: -1,\n        checked: !this.captions.toggled,\n        title: i18n.get('disabled', this.config),\n        list: list,\n        type: 'language'\n      }); // Generate options\n\n      options.forEach(controls.createMenuItem.bind(this));\n      controls.updateSetting.call(this, type, list);\n    },\n    // Set a list of available captions languages\n    setSpeedMenu: function setSpeedMenu() {\n      var _this8 = this;\n\n      // Menu required\n      if (!is$1.element(this.elements.settings.panels.speed)) {\n        return;\n      }\n\n      var type = 'speed';\n      var list = this.elements.settings.panels.speed.querySelector('[role=\"menu\"]'); // Filter out invalid speeds\n\n      this.options.speed = this.options.speed.filter(function (o) {\n        return o >= _this8.minimumSpeed && o <= _this8.maximumSpeed;\n      }); // Toggle the pane and tab\n\n      var toggle = !is$1.empty(this.options.speed) && this.options.speed.length > 1;\n      controls.toggleMenuButton.call(this, type, toggle); // Empty the menu\n\n      emptyElement(list); // Check if we need to toggle the parent\n\n      controls.checkMenu.call(this); // If we're hiding, nothing more to do\n\n      if (!toggle) {\n        return;\n      } // Create items\n\n\n      this.options.speed.forEach(function (speed) {\n        controls.createMenuItem.call(_this8, {\n          value: speed,\n          list: list,\n          type: type,\n          title: controls.getLabel.call(_this8, 'speed', speed)\n        });\n      });\n      controls.updateSetting.call(this, type, list);\n    },\n    // Check if we need to hide/show the settings menu\n    checkMenu: function checkMenu() {\n      var buttons = this.elements.settings.buttons;\n      var visible = !is$1.empty(buttons) && Object.values(buttons).some(function (button) {\n        return !button.hidden;\n      });\n      toggleHidden(this.elements.settings.menu, !visible);\n    },\n    // Focus the first menu item in a given (or visible) menu\n    focusFirstMenuItem: function focusFirstMenuItem(pane) {\n      var tabFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.elements.settings.popup.hidden) {\n        return;\n      }\n\n      var target = pane;\n\n      if (!is$1.element(target)) {\n        target = Object.values(this.elements.settings.panels).find(function (p) {\n          return !p.hidden;\n        });\n      }\n\n      var firstItem = target.querySelector('[role^=\"menuitem\"]');\n      setFocus.call(this, firstItem, tabFocus);\n    },\n    // Show/hide menu\n    toggleMenu: function toggleMenu(input) {\n      var popup = this.elements.settings.popup;\n      var button = this.elements.buttons.settings; // Menu and button are required\n\n      if (!is$1.element(popup) || !is$1.element(button)) {\n        return;\n      } // True toggle by default\n\n\n      var hidden = popup.hidden;\n      var show = hidden;\n\n      if (is$1.boolean(input)) {\n        show = input;\n      } else if (is$1.keyboardEvent(input) && input.which === 27) {\n        show = false;\n      } else if (is$1.event(input)) {\n        // If Plyr is in a shadowDOM, the event target is set to the component, instead of the\n        // Element in the shadowDOM. The path, if available, is complete.\n        var target = is$1.function(input.composedPath) ? input.composedPath()[0] : input.target;\n        var isMenuItem = popup.contains(target); // If the click was inside the menu or if the click\n        // wasn't the button or menu item and we're trying to\n        // show the menu (a doc click shouldn't show the menu)\n\n        if (isMenuItem || !isMenuItem && input.target !== button && show) {\n          return;\n        }\n      } // Set button attributes\n\n\n      button.setAttribute('aria-expanded', show); // Show the actual popup\n\n      toggleHidden(popup, !show); // Add class hook\n\n      toggleClass(this.elements.container, this.config.classNames.menu.open, show); // Focus the first item if key interaction\n\n      if (show && is$1.keyboardEvent(input)) {\n        controls.focusFirstMenuItem.call(this, null, true);\n      } else if (!show && !hidden) {\n        // If closing, re-focus the button\n        setFocus.call(this, button, is$1.keyboardEvent(input));\n      }\n    },\n    // Get the natural size of a menu panel\n    getMenuSize: function getMenuSize(tab) {\n      var clone = tab.cloneNode(true);\n      clone.style.position = 'absolute';\n      clone.style.opacity = 0;\n      clone.removeAttribute('hidden'); // Append to parent so we get the \"real\" size\n\n      tab.parentNode.appendChild(clone); // Get the sizes before we remove\n\n      var width = clone.scrollWidth;\n      var height = clone.scrollHeight; // Remove from the DOM\n\n      removeElement(clone);\n      return {\n        width: width,\n        height: height\n      };\n    },\n    // Show a panel in the menu\n    showMenuPanel: function showMenuPanel() {\n      var _this9 = this;\n\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var tabFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var target = this.elements.container.querySelector(\"#plyr-settings-\".concat(this.id, \"-\").concat(type)); // Nothing to show, bail\n\n      if (!is$1.element(target)) {\n        return;\n      } // Hide all other panels\n\n\n      var container = target.parentNode;\n      var current = Array.from(container.children).find(function (node) {\n        return !node.hidden;\n      }); // If we can do fancy animations, we'll animate the height/width\n\n      if (support.transitions && !support.reducedMotion) {\n        // Set the current width as a base\n        container.style.width = \"\".concat(current.scrollWidth, \"px\");\n        container.style.height = \"\".concat(current.scrollHeight, \"px\"); // Get potential sizes\n\n        var size = controls.getMenuSize.call(this, target); // Restore auto height/width\n\n        var restore = function restore(event) {\n          // We're only bothered about height and width on the container\n          if (event.target !== container || !['width', 'height'].includes(event.propertyName)) {\n            return;\n          } // Revert back to auto\n\n\n          container.style.width = '';\n          container.style.height = ''; // Only listen once\n\n          off.call(_this9, container, transitionEndEvent, restore);\n        }; // Listen for the transition finishing and restore auto height/width\n\n\n        on.call(this, container, transitionEndEvent, restore); // Set dimensions to target\n\n        container.style.width = \"\".concat(size.width, \"px\");\n        container.style.height = \"\".concat(size.height, \"px\");\n      } // Set attributes on current tab\n\n\n      toggleHidden(current, true); // Set attributes on target\n\n      toggleHidden(target, false); // Focus the first item\n\n      controls.focusFirstMenuItem.call(this, target, tabFocus);\n    },\n    // Set the download URL\n    setDownloadUrl: function setDownloadUrl() {\n      var button = this.elements.buttons.download; // Bail if no button\n\n      if (!is$1.element(button)) {\n        return;\n      } // Set attribute\n\n\n      button.setAttribute('href', this.download);\n    },\n    // Build the default HTML\n    create: function create(data) {\n      var _this10 = this;\n\n      var bindMenuItemShortcuts = controls.bindMenuItemShortcuts,\n          createButton = controls.createButton,\n          createProgress = controls.createProgress,\n          createRange = controls.createRange,\n          createTime = controls.createTime,\n          setQualityMenu = controls.setQualityMenu,\n          setSpeedMenu = controls.setSpeedMenu,\n          showMenuPanel = controls.showMenuPanel;\n      this.elements.controls = null; // Larger overlaid play button\n\n      if (is$1.array(this.config.controls) && this.config.controls.includes('play-large')) {\n        this.elements.container.appendChild(createButton.call(this, 'play-large'));\n      } // Create the container\n\n\n      var container = createElement('div', getAttributesFromSelector(this.config.selectors.controls.wrapper));\n      this.elements.controls = container; // Default item attributes\n\n      var defaultAttributes = {\n        class: 'plyr__controls__item'\n      }; // Loop through controls in order\n\n      dedupe(is$1.array(this.config.controls) ? this.config.controls : []).forEach(function (control) {\n        // Restart button\n        if (control === 'restart') {\n          container.appendChild(createButton.call(_this10, 'restart', defaultAttributes));\n        } // Rewind button\n\n\n        if (control === 'rewind') {\n          container.appendChild(createButton.call(_this10, 'rewind', defaultAttributes));\n        } // Play/Pause button\n\n\n        if (control === 'play') {\n          container.appendChild(createButton.call(_this10, 'play', defaultAttributes));\n        } // Fast forward button\n\n\n        if (control === 'fast-forward') {\n          container.appendChild(createButton.call(_this10, 'fast-forward', defaultAttributes));\n        } // Progress\n\n\n        if (control === 'progress') {\n          var progressContainer = createElement('div', {\n            class: \"\".concat(defaultAttributes.class, \" plyr__progress__container\")\n          });\n          var progress = createElement('div', getAttributesFromSelector(_this10.config.selectors.progress)); // Seek range slider\n\n          progress.appendChild(createRange.call(_this10, 'seek', {\n            id: \"plyr-seek-\".concat(data.id)\n          })); // Buffer progress\n\n          progress.appendChild(createProgress.call(_this10, 'buffer')); // TODO: Add loop display indicator\n          // Seek tooltip\n\n          if (_this10.config.tooltips.seek) {\n            var tooltip = createElement('span', {\n              class: _this10.config.classNames.tooltip\n            }, '00:00');\n            progress.appendChild(tooltip);\n            _this10.elements.display.seekTooltip = tooltip;\n          }\n\n          _this10.elements.progress = progress;\n          progressContainer.appendChild(_this10.elements.progress);\n          container.appendChild(progressContainer);\n        } // Media current time display\n\n\n        if (control === 'current-time') {\n          container.appendChild(createTime.call(_this10, 'currentTime', defaultAttributes));\n        } // Media duration display\n\n\n        if (control === 'duration') {\n          container.appendChild(createTime.call(_this10, 'duration', defaultAttributes));\n        } // Volume controls\n\n\n        if (control === 'mute' || control === 'volume') {\n          var volume = _this10.elements.volume; // Create the volume container if needed\n\n          if (!is$1.element(volume) || !container.contains(volume)) {\n            volume = createElement('div', extend({}, defaultAttributes, {\n              class: \"\".concat(defaultAttributes.class, \" plyr__volume\").trim()\n            }));\n            _this10.elements.volume = volume;\n            container.appendChild(volume);\n          } // Toggle mute button\n\n\n          if (control === 'mute') {\n            volume.appendChild(createButton.call(_this10, 'mute'));\n          } // Volume range control\n          // Ignored on iOS as it's handled globally\n          // https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n\n\n          if (control === 'volume' && !browser.isIos) {\n            // Set the attributes\n            var attributes = {\n              max: 1,\n              step: 0.05,\n              value: _this10.config.volume\n            }; // Create the volume range slider\n\n            volume.appendChild(createRange.call(_this10, 'volume', extend(attributes, {\n              id: \"plyr-volume-\".concat(data.id)\n            })));\n          }\n        } // Toggle captions button\n\n\n        if (control === 'captions') {\n          container.appendChild(createButton.call(_this10, 'captions', defaultAttributes));\n        } // Settings button / menu\n\n\n        if (control === 'settings' && !is$1.empty(_this10.config.settings)) {\n          var wrapper = createElement('div', extend({}, defaultAttributes, {\n            class: \"\".concat(defaultAttributes.class, \" plyr__menu\").trim(),\n            hidden: ''\n          }));\n          wrapper.appendChild(createButton.call(_this10, 'settings', {\n            'aria-haspopup': true,\n            'aria-controls': \"plyr-settings-\".concat(data.id),\n            'aria-expanded': false\n          }));\n          var popup = createElement('div', {\n            class: 'plyr__menu__container',\n            id: \"plyr-settings-\".concat(data.id),\n            hidden: ''\n          });\n          var inner = createElement('div');\n          var home = createElement('div', {\n            id: \"plyr-settings-\".concat(data.id, \"-home\")\n          }); // Create the menu\n\n          var menu = createElement('div', {\n            role: 'menu'\n          });\n          home.appendChild(menu);\n          inner.appendChild(home);\n          _this10.elements.settings.panels.home = home; // Build the menu items\n\n          _this10.config.settings.forEach(function (type) {\n            // TODO: bundle this with the createMenuItem helper and bindings\n            var menuItem = createElement('button', extend(getAttributesFromSelector(_this10.config.selectors.buttons.settings), {\n              type: 'button',\n              class: \"\".concat(_this10.config.classNames.control, \" \").concat(_this10.config.classNames.control, \"--forward\"),\n              role: 'menuitem',\n              'aria-haspopup': true,\n              hidden: ''\n            })); // Bind menu shortcuts for keyboard users\n\n            bindMenuItemShortcuts.call(_this10, menuItem, type); // Show menu on click\n\n            on.call(_this10, menuItem, 'click', function () {\n              showMenuPanel.call(_this10, type, false);\n            });\n            var flex = createElement('span', null, i18n.get(type, _this10.config));\n            var value = createElement('span', {\n              class: _this10.config.classNames.menu.value\n            }); // Speed contains HTML entities\n\n            value.innerHTML = data[type];\n            flex.appendChild(value);\n            menuItem.appendChild(flex);\n            menu.appendChild(menuItem); // Build the panes\n\n            var pane = createElement('div', {\n              id: \"plyr-settings-\".concat(data.id, \"-\").concat(type),\n              hidden: ''\n            }); // Back button\n\n            var backButton = createElement('button', {\n              type: 'button',\n              class: \"\".concat(_this10.config.classNames.control, \" \").concat(_this10.config.classNames.control, \"--back\")\n            }); // Visible label\n\n            backButton.appendChild(createElement('span', {\n              'aria-hidden': true\n            }, i18n.get(type, _this10.config))); // Screen reader label\n\n            backButton.appendChild(createElement('span', {\n              class: _this10.config.classNames.hidden\n            }, i18n.get('menuBack', _this10.config))); // Go back via keyboard\n\n            on.call(_this10, pane, 'keydown', function (event) {\n              // We only care about <-\n              if (event.which !== 37) {\n                return;\n              } // Prevent seek\n\n\n              event.preventDefault();\n              event.stopPropagation(); // Show the respective menu\n\n              showMenuPanel.call(_this10, 'home', true);\n            }, false); // Go back via button click\n\n            on.call(_this10, backButton, 'click', function () {\n              showMenuPanel.call(_this10, 'home', false);\n            }); // Add to pane\n\n            pane.appendChild(backButton); // Menu\n\n            pane.appendChild(createElement('div', {\n              role: 'menu'\n            }));\n            inner.appendChild(pane);\n            _this10.elements.settings.buttons[type] = menuItem;\n            _this10.elements.settings.panels[type] = pane;\n          });\n\n          popup.appendChild(inner);\n          wrapper.appendChild(popup);\n          container.appendChild(wrapper);\n          _this10.elements.settings.popup = popup;\n          _this10.elements.settings.menu = wrapper;\n        } // Picture in picture button\n\n\n        if (control === 'pip' && support.pip) {\n          container.appendChild(createButton.call(_this10, 'pip', defaultAttributes));\n        } // Airplay button\n\n\n        if (control === 'airplay' && support.airplay) {\n          container.appendChild(createButton.call(_this10, 'airplay', defaultAttributes));\n        } // Download button\n\n\n        if (control === 'download') {\n          var _attributes = extend({}, defaultAttributes, {\n            element: 'a',\n            href: _this10.download,\n            target: '_blank'\n          }); // Set download attribute for HTML5 only\n\n\n          if (_this10.isHTML5) {\n            _attributes.download = '';\n          }\n\n          var download = _this10.config.urls.download;\n\n          if (!is$1.url(download) && _this10.isEmbed) {\n            extend(_attributes, {\n              icon: \"logo-\".concat(_this10.provider),\n              label: _this10.provider\n            });\n          }\n\n          container.appendChild(createButton.call(_this10, 'download', _attributes));\n        } // Toggle fullscreen button\n\n\n        if (control === 'fullscreen') {\n          container.appendChild(createButton.call(_this10, 'fullscreen', defaultAttributes));\n        }\n      }); // Set available quality levels\n\n      if (this.isHTML5) {\n        setQualityMenu.call(this, html5.getQualityOptions.call(this));\n      }\n\n      setSpeedMenu.call(this);\n      return container;\n    },\n    // Insert controls\n    inject: function inject() {\n      var _this11 = this;\n\n      // Sprite\n      if (this.config.loadSprite) {\n        var icon = controls.getIconUrl.call(this); // Only load external sprite using AJAX\n\n        if (icon.cors) {\n          loadSprite(icon.url, 'sprite-plyr');\n        }\n      } // Create a unique ID\n\n\n      this.id = Math.floor(Math.random() * 10000); // Null by default\n\n      var container = null;\n      this.elements.controls = null; // Set template properties\n\n      var props = {\n        id: this.id,\n        seektime: this.config.seekTime,\n        title: this.config.title\n      };\n      var update = true; // If function, run it and use output\n\n      if (is$1.function(this.config.controls)) {\n        this.config.controls = this.config.controls.call(this, props);\n      } // Convert falsy controls to empty array (primarily for empty strings)\n\n\n      if (!this.config.controls) {\n        this.config.controls = [];\n      }\n\n      if (is$1.element(this.config.controls) || is$1.string(this.config.controls)) {\n        // HTMLElement or Non-empty string passed as the option\n        container = this.config.controls;\n      } else {\n        // Create controls\n        container = controls.create.call(this, {\n          id: this.id,\n          seektime: this.config.seekTime,\n          speed: this.speed,\n          quality: this.quality,\n          captions: captions.getLabel.call(this) // TODO: Looping\n          // loop: 'None',\n\n        });\n        update = false;\n      } // Replace props with their value\n\n\n      var replace = function replace(input) {\n        var result = input;\n        Object.entries(props).forEach(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n              key = _ref3[0],\n              value = _ref3[1];\n\n          result = replaceAll(result, \"{\".concat(key, \"}\"), value);\n        });\n        return result;\n      }; // Update markup\n\n\n      if (update) {\n        if (is$1.string(this.config.controls)) {\n          container = replace(container);\n        }\n      } // Controls container\n\n\n      var target; // Inject to custom location\n\n      if (is$1.string(this.config.selectors.controls.container)) {\n        target = document.querySelector(this.config.selectors.controls.container);\n      } // Inject into the container by default\n\n\n      if (!is$1.element(target)) {\n        target = this.elements.container;\n      } // Inject controls HTML (needs to be before captions, hence \"afterbegin\")\n\n\n      var insertMethod = is$1.element(container) ? 'insertAdjacentElement' : 'insertAdjacentHTML';\n      target[insertMethod]('afterbegin', container); // Find the elements if need be\n\n      if (!is$1.element(this.elements.controls)) {\n        controls.findElements.call(this);\n      } // Add pressed property to buttons\n\n\n      if (!is$1.empty(this.elements.buttons)) {\n        var addProperty = function addProperty(button) {\n          var className = _this11.config.classNames.controlPressed;\n          Object.defineProperty(button, 'pressed', {\n            enumerable: true,\n            get: function get() {\n              return hasClass(button, className);\n            },\n            set: function set() {\n              var pressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n              toggleClass(button, className, pressed);\n            }\n          });\n        }; // Toggle classname when pressed property is set\n\n\n        Object.values(this.elements.buttons).filter(Boolean).forEach(function (button) {\n          if (is$1.array(button) || is$1.nodeList(button)) {\n            Array.from(button).filter(Boolean).forEach(addProperty);\n          } else {\n            addProperty(button);\n          }\n        });\n      } // Edge sometimes doesn't finish the paint so force a repaint\n\n\n      if (browser.isEdge) {\n        repaint(target);\n      } // Setup tooltips\n\n\n      if (this.config.tooltips.controls) {\n        var _this$config = this.config,\n            classNames = _this$config.classNames,\n            selectors = _this$config.selectors;\n        var selector = \"\".concat(selectors.controls.wrapper, \" \").concat(selectors.labels, \" .\").concat(classNames.hidden);\n        var labels = getElements.call(this, selector);\n        Array.from(labels).forEach(function (label) {\n          toggleClass(label, _this11.config.classNames.hidden, false);\n          toggleClass(label, _this11.config.classNames.tooltip, true);\n        });\n      }\n    }\n  };\n\n  /**\n   * Parse a string to a URL object\n   * @param {String} input - the URL to be parsed\n   * @param {Boolean} safe - failsafe parsing\n   */\n\n  function parseUrl(input) {\n    var safe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var url = input;\n\n    if (safe) {\n      var parser = document.createElement('a');\n      parser.href = url;\n      url = parser.href;\n    }\n\n    try {\n      return new URL(url);\n    } catch (e) {\n      return null;\n    }\n  } // Convert object to URLSearchParams\n\n  function buildUrlParams(input) {\n    var params = new URLSearchParams();\n\n    if (is$1.object(input)) {\n      Object.entries(input).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        params.set(key, value);\n      });\n    }\n\n    return params;\n  }\n\n  var captions = {\n    // Setup captions\n    setup: function setup() {\n      // Requires UI support\n      if (!this.supported.ui) {\n        return;\n      } // Only Vimeo and HTML5 video supported at this point\n\n\n      if (!this.isVideo || this.isYouTube || this.isHTML5 && !support.textTracks) {\n        // Clear menu and hide\n        if (is$1.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n          controls.setCaptionsMenu.call(this);\n        }\n\n        return;\n      } // Inject the container\n\n\n      if (!is$1.element(this.elements.captions)) {\n        this.elements.captions = createElement('div', getAttributesFromSelector(this.config.selectors.captions));\n        insertAfter(this.elements.captions, this.elements.wrapper);\n      } // Fix IE captions if CORS is used\n      // Fetch captions and inject as blobs instead (data URIs not supported!)\n\n\n      if (browser.isIE && window.URL) {\n        var elements = this.media.querySelectorAll('track');\n        Array.from(elements).forEach(function (track) {\n          var src = track.getAttribute('src');\n          var url = parseUrl(src);\n\n          if (url !== null && url.hostname !== window.location.href.hostname && ['http:', 'https:'].includes(url.protocol)) {\n            fetch(src, 'blob').then(function (blob) {\n              track.setAttribute('src', window.URL.createObjectURL(blob));\n            }).catch(function () {\n              removeElement(track);\n            });\n          }\n        });\n      } // Get and set initial data\n      // The \"preferred\" options are not realized unless / until the wanted language has a match\n      // * languages: Array of user's browser languages.\n      // * language:  The language preferred by user settings or config\n      // * active:    The state preferred by user settings or config\n      // * toggled:   The real captions state\n\n\n      var browserLanguages = navigator.languages || [navigator.language || navigator.userLanguage || 'en'];\n      var languages = dedupe(browserLanguages.map(function (language) {\n        return language.split('-')[0];\n      }));\n      var language = (this.storage.get('language') || this.config.captions.language || 'auto').toLowerCase(); // Use first browser language when language is 'auto'\n\n      if (language === 'auto') {\n        var _languages = _slicedToArray(languages, 1);\n\n        language = _languages[0];\n      }\n\n      var active = this.storage.get('captions');\n\n      if (!is$1.boolean(active)) {\n        active = this.config.captions.active;\n      }\n\n      Object.assign(this.captions, {\n        toggled: false,\n        active: active,\n        language: language,\n        languages: languages\n      }); // Watch changes to textTracks and update captions menu\n\n      if (this.isHTML5) {\n        var trackEvents = this.config.captions.update ? 'addtrack removetrack' : 'removetrack';\n        on.call(this, this.media.textTracks, trackEvents, captions.update.bind(this));\n      } // Update available languages in list next tick (the event must not be triggered before the listeners)\n\n\n      setTimeout(captions.update.bind(this), 0);\n    },\n    // Update available language options in settings based on tracks\n    update: function update() {\n      var _this = this;\n\n      var tracks = captions.getTracks.call(this, true); // Get the wanted language\n\n      var _this$captions = this.captions,\n          active = _this$captions.active,\n          language = _this$captions.language,\n          meta = _this$captions.meta,\n          currentTrackNode = _this$captions.currentTrackNode;\n      var languageExists = Boolean(tracks.find(function (track) {\n        return track.language === language;\n      })); // Handle tracks (add event listener and \"pseudo\"-default)\n\n      if (this.isHTML5 && this.isVideo) {\n        tracks.filter(function (track) {\n          return !meta.get(track);\n        }).forEach(function (track) {\n          _this.debug.log('Track added', track); // Attempt to store if the original dom element was \"default\"\n\n\n          meta.set(track, {\n            default: track.mode === 'showing'\n          }); // Turn off native caption rendering to avoid double captions\n          // Note: mode='hidden' forces a track to download. To ensure every track\n          // isn't downloaded at once, only 'showing' tracks should be reassigned\n          // eslint-disable-next-line no-param-reassign\n\n          if (track.mode === 'showing') {\n            // eslint-disable-next-line no-param-reassign\n            track.mode = 'hidden';\n          } // Add event listener for cue changes\n\n\n          on.call(_this, track, 'cuechange', function () {\n            return captions.updateCues.call(_this);\n          });\n        });\n      } // Update language first time it matches, or if the previous matching track was removed\n\n\n      if (languageExists && this.language !== language || !tracks.includes(currentTrackNode)) {\n        captions.setLanguage.call(this, language);\n        captions.toggle.call(this, active && languageExists);\n      } // Enable or disable captions based on track length\n\n\n      toggleClass(this.elements.container, this.config.classNames.captions.enabled, !is$1.empty(tracks)); // Update available languages in list\n\n      if (is$1.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n        controls.setCaptionsMenu.call(this);\n      }\n    },\n    // Toggle captions display\n    // Used internally for the toggleCaptions method, with the passive option forced to false\n    toggle: function toggle(input) {\n      var _this2 = this;\n\n      var passive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // If there's no full support\n      if (!this.supported.ui) {\n        return;\n      }\n\n      var toggled = this.captions.toggled; // Current state\n\n      var activeClass = this.config.classNames.captions.active; // Get the next state\n      // If the method is called without parameter, toggle based on current value\n\n      var active = is$1.nullOrUndefined(input) ? !toggled : input; // Update state and trigger event\n\n      if (active !== toggled) {\n        // When passive, don't override user preferences\n        if (!passive) {\n          this.captions.active = active;\n          this.storage.set({\n            captions: active\n          });\n        } // Force language if the call isn't passive and there is no matching language to toggle to\n\n\n        if (!this.language && active && !passive) {\n          var tracks = captions.getTracks.call(this);\n          var track = captions.findTrack.call(this, [this.captions.language].concat(_toConsumableArray(this.captions.languages)), true); // Override user preferences to avoid switching languages if a matching track is added\n\n          this.captions.language = track.language; // Set caption, but don't store in localStorage as user preference\n\n          captions.set.call(this, tracks.indexOf(track));\n          return;\n        } // Toggle button if it's enabled\n\n\n        if (this.elements.buttons.captions) {\n          this.elements.buttons.captions.pressed = active;\n        } // Add class hook\n\n\n        toggleClass(this.elements.container, activeClass, active);\n        this.captions.toggled = active; // Update settings menu\n\n        controls.updateSetting.call(this, 'captions'); // Trigger event (not used internally)\n\n        triggerEvent.call(this, this.media, active ? 'captionsenabled' : 'captionsdisabled');\n      } // Wait for the call stack to clear before setting mode='hidden'\n      // on the active track - forcing the browser to download it\n\n\n      setTimeout(function () {\n        if (active && _this2.captions.toggled) {\n          _this2.captions.currentTrackNode.mode = 'hidden';\n        }\n      });\n    },\n    // Set captions by track index\n    // Used internally for the currentTrack setter with the passive option forced to false\n    set: function set(index) {\n      var passive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var tracks = captions.getTracks.call(this); // Disable captions if setting to -1\n\n      if (index === -1) {\n        captions.toggle.call(this, false, passive);\n        return;\n      }\n\n      if (!is$1.number(index)) {\n        this.debug.warn('Invalid caption argument', index);\n        return;\n      }\n\n      if (!(index in tracks)) {\n        this.debug.warn('Track not found', index);\n        return;\n      }\n\n      if (this.captions.currentTrack !== index) {\n        this.captions.currentTrack = index;\n        var track = tracks[index];\n\n        var _ref = track || {},\n            language = _ref.language; // Store reference to node for invalidation on remove\n\n\n        this.captions.currentTrackNode = track; // Update settings menu\n\n        controls.updateSetting.call(this, 'captions'); // When passive, don't override user preferences\n\n        if (!passive) {\n          this.captions.language = language;\n          this.storage.set({\n            language: language\n          });\n        } // Handle Vimeo captions\n\n\n        if (this.isVimeo) {\n          this.embed.enableTextTrack(language);\n        } // Trigger event\n\n\n        triggerEvent.call(this, this.media, 'languagechange');\n      } // Show captions\n\n\n      captions.toggle.call(this, true, passive);\n\n      if (this.isHTML5 && this.isVideo) {\n        // If we change the active track while a cue is already displayed we need to update it\n        captions.updateCues.call(this);\n      }\n    },\n    // Set captions by language\n    // Used internally for the language setter with the passive option forced to false\n    setLanguage: function setLanguage(input) {\n      var passive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!is$1.string(input)) {\n        this.debug.warn('Invalid language argument', input);\n        return;\n      } // Normalize\n\n\n      var language = input.toLowerCase();\n      this.captions.language = language; // Set currentTrack\n\n      var tracks = captions.getTracks.call(this);\n      var track = captions.findTrack.call(this, [language]);\n      captions.set.call(this, tracks.indexOf(track), passive);\n    },\n    // Get current valid caption tracks\n    // If update is false it will also ignore tracks without metadata\n    // This is used to \"freeze\" the language options when captions.update is false\n    getTracks: function getTracks() {\n      var _this3 = this;\n\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // Handle media or textTracks missing or null\n      var tracks = Array.from((this.media || {}).textTracks || []); // For HTML5, use cache instead of current tracks when it exists (if captions.update is false)\n      // Filter out removed tracks and tracks that aren't captions/subtitles (for example metadata)\n\n      return tracks.filter(function (track) {\n        return !_this3.isHTML5 || update || _this3.captions.meta.has(track);\n      }).filter(function (track) {\n        return ['captions', 'subtitles'].includes(track.kind);\n      });\n    },\n    // Match tracks based on languages and get the first\n    findTrack: function findTrack(languages) {\n      var _this4 = this;\n\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var tracks = captions.getTracks.call(this);\n\n      var sortIsDefault = function sortIsDefault(track) {\n        return Number((_this4.captions.meta.get(track) || {}).default);\n      };\n\n      var sorted = Array.from(tracks).sort(function (a, b) {\n        return sortIsDefault(b) - sortIsDefault(a);\n      });\n      var track;\n      languages.every(function (language) {\n        track = sorted.find(function (t) {\n          return t.language === language;\n        });\n        return !track; // Break iteration if there is a match\n      }); // If no match is found but is required, get first\n\n      return track || (force ? sorted[0] : undefined);\n    },\n    // Get the current track\n    getCurrentTrack: function getCurrentTrack() {\n      return captions.getTracks.call(this)[this.currentTrack];\n    },\n    // Get UI label for track\n    getLabel: function getLabel(track) {\n      var currentTrack = track;\n\n      if (!is$1.track(currentTrack) && support.textTracks && this.captions.toggled) {\n        currentTrack = captions.getCurrentTrack.call(this);\n      }\n\n      if (is$1.track(currentTrack)) {\n        if (!is$1.empty(currentTrack.label)) {\n          return currentTrack.label;\n        }\n\n        if (!is$1.empty(currentTrack.language)) {\n          return track.language.toUpperCase();\n        }\n\n        return i18n.get('enabled', this.config);\n      }\n\n      return i18n.get('disabled', this.config);\n    },\n    // Update captions using current track's active cues\n    // Also optional array argument in case there isn't any track (ex: vimeo)\n    updateCues: function updateCues(input) {\n      // Requires UI\n      if (!this.supported.ui) {\n        return;\n      }\n\n      if (!is$1.element(this.elements.captions)) {\n        this.debug.warn('No captions element to render to');\n        return;\n      } // Only accept array or empty input\n\n\n      if (!is$1.nullOrUndefined(input) && !Array.isArray(input)) {\n        this.debug.warn('updateCues: Invalid input', input);\n        return;\n      }\n\n      var cues = input; // Get cues from track\n\n      if (!cues) {\n        var track = captions.getCurrentTrack.call(this);\n        cues = Array.from((track || {}).activeCues || []).map(function (cue) {\n          return cue.getCueAsHTML();\n        }).map(getHTML);\n      } // Set new caption text\n\n\n      var content = cues.map(function (cueText) {\n        return cueText.trim();\n      }).join('\\n');\n      var changed = content !== this.elements.captions.innerHTML;\n\n      if (changed) {\n        // Empty the container and create a new child element\n        emptyElement(this.elements.captions);\n        var caption = createElement('span', getAttributesFromSelector(this.config.selectors.caption));\n        caption.innerHTML = content;\n        this.elements.captions.appendChild(caption); // Trigger event\n\n        triggerEvent.call(this, this.media, 'cuechange');\n      }\n    }\n  };\n\n  // ==========================================================================\n  // Plyr default config\n  // ==========================================================================\n  var defaults$1 = {\n    // Disable\n    enabled: true,\n    // Custom media title\n    title: '',\n    // Logging to console\n    debug: false,\n    // Auto play (if supported)\n    autoplay: false,\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n    // Allow inline playback on iOS (this effects YouTube/Vimeo - HTML5 requires the attribute present)\n    // TODO: Remove iosNative fullscreen option in favour of this (logic needs work)\n    playsinline: true,\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n    // Default volume\n    volume: 1,\n    muted: false,\n    // Pass a custom duration\n    duration: null,\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n    // Invert the current time to be a countdown\n    invertTime: true,\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n    // Force an aspect ratio\n    // The format must be `'w:h'` (e.g. `'16:9'`)\n    ratio: null,\n    // Click video container to play/pause\n    clickToPlay: true,\n    // Auto hide the controls\n    hideControls: true,\n    // Reset to start when playback ended\n    resetOnEnd: false,\n    // Disable the standard context menu\n    disableContextMenu: true,\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.6.3/plyr.svg',\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n    // Quality default\n    quality: {\n      default: 576,\n      // The options to display in the UI, if available for the source media\n      options: [4320, 2880, 2160, 1440, 1080, 720, 576, 480, 360, 240],\n      forced: false,\n      onChange: null\n    },\n    // Set loops\n    loop: {\n      active: false // start: null,\n      // end: null,\n\n    },\n    // Speed default and options to display\n    speed: {\n      selected: 1,\n      // The options to display in the UI, if available for the source media (e.g. Vimeo and YouTube only support 0.5x-4x)\n      options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 4]\n    },\n    // Keyboard shortcut settings\n    keyboard: {\n      focused: true,\n      global: false\n    },\n    // Display tooltips\n    tooltips: {\n      controls: false,\n      seek: true\n    },\n    // Captions settings\n    captions: {\n      active: false,\n      language: 'auto',\n      // Listen to new tracks added after Plyr is initialized.\n      // This is needed for streaming captions, but may result in unselectable options\n      update: false\n    },\n    // Fullscreen settings\n    fullscreen: {\n      enabled: true,\n      // Allow fullscreen?\n      fallback: true,\n      // Fallback using full viewport/window\n      iosNative: false // Use the native fullscreen in iOS (disables custom controls)\n      // Selector for the fullscreen container so contextual / non-player content can remain visible in fullscreen mode\n      // Non-ancestors of the player element will be ignored\n      // container: null, // defaults to the player element\n\n    },\n    // Local storage\n    storage: {\n      enabled: true,\n      key: 'plyr'\n    },\n    // Default controls\n    controls: ['play-large', // 'restart',\n    // 'rewind',\n    'play', // 'fast-forward',\n    'progress', 'current-time', // 'duration',\n    'mute', 'volume', 'captions', 'settings', 'pip', 'airplay', // 'download',\n    'fullscreen'],\n    settings: ['captions', 'quality', 'speed'],\n    // Localisation\n    i18n: {\n      restart: 'Restart',\n      rewind: 'Rewind {seektime}s',\n      play: 'Play',\n      pause: 'Pause',\n      fastForward: 'Forward {seektime}s',\n      seek: 'Seek',\n      seekLabel: '{currentTime} of {duration}',\n      played: 'Played',\n      buffered: 'Buffered',\n      currentTime: 'Current time',\n      duration: 'Duration',\n      volume: 'Volume',\n      mute: 'Mute',\n      unmute: 'Unmute',\n      enableCaptions: 'Enable captions',\n      disableCaptions: 'Disable captions',\n      download: 'Download',\n      enterFullscreen: 'Enter fullscreen',\n      exitFullscreen: 'Exit fullscreen',\n      frameTitle: 'Player for {title}',\n      captions: 'Captions',\n      settings: 'Settings',\n      pip: 'PIP',\n      menuBack: 'Go back to previous menu',\n      speed: 'Speed',\n      normal: 'Normal',\n      quality: 'Quality',\n      loop: 'Loop',\n      start: 'Start',\n      end: 'End',\n      all: 'All',\n      reset: 'Reset',\n      disabled: 'Disabled',\n      enabled: 'Enabled',\n      advertisement: 'Ad',\n      qualityBadge: {\n        2160: '4K',\n        1440: 'HD',\n        1080: 'HD',\n        720: 'HD',\n        576: 'SD',\n        480: 'SD'\n      }\n    },\n    // URLs\n    urls: {\n      download: null,\n      vimeo: {\n        sdk: 'https://player.vimeo.com/api/player.js',\n        iframe: 'https://player.vimeo.com/video/{0}?{1}',\n        api: 'https://vimeo.com/api/oembed.json?url={0}'\n      },\n      youtube: {\n        sdk: 'https://www.youtube.com/iframe_api',\n        api: 'https://noembed.com/embed?url=https://www.youtube.com/watch?v={0}'\n      },\n      googleIMA: {\n        sdk: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js'\n      }\n    },\n    // Custom control listeners\n    listeners: {\n      seek: null,\n      play: null,\n      pause: null,\n      restart: null,\n      rewind: null,\n      fastForward: null,\n      mute: null,\n      volume: null,\n      captions: null,\n      download: null,\n      fullscreen: null,\n      pip: null,\n      airplay: null,\n      speed: null,\n      quality: null,\n      loop: null,\n      language: null\n    },\n    // Events to watch and bubble\n    events: [// Events to watch on HTML5 media elements and bubble\n    // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n    'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied', 'ratechange', 'cuechange', // Custom events\n    'download', 'enterfullscreen', 'exitfullscreen', 'captionsenabled', 'captionsdisabled', 'languagechange', 'controlshidden', 'controlsshown', 'ready', // YouTube\n    'statechange', // Quality\n    'qualitychange', // Ads\n    'adsloaded', 'adscontentpause', 'adscontentresume', 'adstarted', 'adsmidpoint', 'adscomplete', 'adsallcomplete', 'adsimpression', 'adsclick'],\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n      editable: 'input, textarea, select, [contenteditable]',\n      container: '.plyr',\n      controls: {\n        container: null,\n        wrapper: '.plyr__controls'\n      },\n      labels: '[data-plyr]',\n      buttons: {\n        play: '[data-plyr=\"play\"]',\n        pause: '[data-plyr=\"pause\"]',\n        restart: '[data-plyr=\"restart\"]',\n        rewind: '[data-plyr=\"rewind\"]',\n        fastForward: '[data-plyr=\"fast-forward\"]',\n        mute: '[data-plyr=\"mute\"]',\n        captions: '[data-plyr=\"captions\"]',\n        download: '[data-plyr=\"download\"]',\n        fullscreen: '[data-plyr=\"fullscreen\"]',\n        pip: '[data-plyr=\"pip\"]',\n        airplay: '[data-plyr=\"airplay\"]',\n        settings: '[data-plyr=\"settings\"]',\n        loop: '[data-plyr=\"loop\"]'\n      },\n      inputs: {\n        seek: '[data-plyr=\"seek\"]',\n        volume: '[data-plyr=\"volume\"]',\n        speed: '[data-plyr=\"speed\"]',\n        language: '[data-plyr=\"language\"]',\n        quality: '[data-plyr=\"quality\"]'\n      },\n      display: {\n        currentTime: '.plyr__time--current',\n        duration: '.plyr__time--duration',\n        buffer: '.plyr__progress__buffer',\n        loop: '.plyr__progress__loop',\n        // Used later\n        volume: '.plyr__volume--display'\n      },\n      progress: '.plyr__progress',\n      captions: '.plyr__captions',\n      caption: '.plyr__caption'\n    },\n    // Class hooks added to the player in different states\n    classNames: {\n      type: 'plyr--{0}',\n      provider: 'plyr--{0}',\n      video: 'plyr__video-wrapper',\n      embed: 'plyr__video-embed',\n      videoFixedRatio: 'plyr__video-wrapper--fixed-ratio',\n      embedContainer: 'plyr__video-embed__container',\n      poster: 'plyr__poster',\n      posterEnabled: 'plyr__poster-enabled',\n      ads: 'plyr__ads',\n      control: 'plyr__control',\n      controlPressed: 'plyr__control--pressed',\n      playing: 'plyr--playing',\n      paused: 'plyr--paused',\n      stopped: 'plyr--stopped',\n      loading: 'plyr--loading',\n      hover: 'plyr--hover',\n      tooltip: 'plyr__tooltip',\n      cues: 'plyr__cues',\n      hidden: 'plyr__sr-only',\n      hideControls: 'plyr--hide-controls',\n      isIos: 'plyr--is-ios',\n      isTouch: 'plyr--is-touch',\n      uiSupported: 'plyr--full-ui',\n      noTransition: 'plyr--no-transition',\n      display: {\n        time: 'plyr__time'\n      },\n      menu: {\n        value: 'plyr__menu__value',\n        badge: 'plyr__badge',\n        open: 'plyr--menu-open'\n      },\n      captions: {\n        enabled: 'plyr--captions-enabled',\n        active: 'plyr--captions-active'\n      },\n      fullscreen: {\n        enabled: 'plyr--fullscreen-enabled',\n        fallback: 'plyr--fullscreen-fallback'\n      },\n      pip: {\n        supported: 'plyr--pip-supported',\n        active: 'plyr--pip-active'\n      },\n      airplay: {\n        supported: 'plyr--airplay-supported',\n        active: 'plyr--airplay-active'\n      },\n      tabFocus: 'plyr__tab-focus',\n      previewThumbnails: {\n        // Tooltip thumbs\n        thumbContainer: 'plyr__preview-thumb',\n        thumbContainerShown: 'plyr__preview-thumb--is-shown',\n        imageContainer: 'plyr__preview-thumb__image-container',\n        timeContainer: 'plyr__preview-thumb__time-container',\n        // Scrubbing\n        scrubbingContainer: 'plyr__preview-scrubbing',\n        scrubbingContainerShown: 'plyr__preview-scrubbing--is-shown'\n      }\n    },\n    // Embed attributes\n    attributes: {\n      embed: {\n        provider: 'data-plyr-provider',\n        id: 'data-plyr-embed-id'\n      }\n    },\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n      enabled: false,\n      publisherId: '',\n      tagUrl: ''\n    },\n    // Preview Thumbnails plugin\n    previewThumbnails: {\n      enabled: false,\n      src: ''\n    },\n    // Vimeo plugin\n    vimeo: {\n      byline: false,\n      portrait: false,\n      title: false,\n      speed: true,\n      transparent: false,\n      // Custom settings from Plyr\n      customControls: true,\n      referrerPolicy: null,\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy\n      // Whether the owner of the video has a Pro or Business account\n      // (which allows us to properly hide controls without CSS hacks, etc)\n      premium: false\n    },\n    // YouTube plugin\n    youtube: {\n      rel: 0,\n      // No related vids\n      showinfo: 0,\n      // Hide info\n      iv_load_policy: 3,\n      // Hide annotations\n      modestbranding: 1,\n      // Hide logos as much as possible (they still show one in the corner when paused)\n      // Custom settings from Plyr\n      customControls: true,\n      noCookie: false // Whether to use an alternative version of YouTube without cookies\n\n    }\n  };\n\n  // ==========================================================================\n  // Plyr states\n  // ==========================================================================\n  var pip = {\n    active: 'picture-in-picture',\n    inactive: 'inline'\n  };\n\n  // ==========================================================================\n  // Plyr supported types and providers\n  // ==========================================================================\n  var providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo'\n  };\n  var types = {\n    audio: 'audio',\n    video: 'video'\n  };\n  /**\n   * Get provider by URL\n   * @param {String} url\n   */\n\n  function getProviderByUrl(url) {\n    // YouTube\n    if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtube-nocookie\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n      return providers.youtube;\n    } // Vimeo\n\n\n    if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{0,9}(?=\\b|\\/)/.test(url)) {\n      return providers.vimeo;\n    }\n\n    return null;\n  }\n\n  // ==========================================================================\n  // Console wrapper\n  // ==========================================================================\n  var noop = function noop() {};\n\n  var Console = /*#__PURE__*/function () {\n    function Console() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      _classCallCheck(this, Console);\n\n      this.enabled = window.console && enabled;\n\n      if (this.enabled) {\n        this.log('Debugging enabled');\n      }\n    }\n\n    _createClass(Console, [{\n      key: \"log\",\n      get: function get() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n      }\n    }, {\n      key: \"warn\",\n      get: function get() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n      }\n    }, {\n      key: \"error\",\n      get: function get() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n      }\n    }]);\n\n    return Console;\n  }();\n\n  var Fullscreen = /*#__PURE__*/function () {\n    function Fullscreen(player) {\n      var _this = this;\n\n      _classCallCheck(this, Fullscreen);\n\n      // Keep reference to parent\n      this.player = player; // Get prefix\n\n      this.prefix = Fullscreen.prefix;\n      this.property = Fullscreen.property; // Scroll position\n\n      this.scrollPosition = {\n        x: 0,\n        y: 0\n      }; // Force the use of 'full window/browser' rather than fullscreen\n\n      this.forceFallback = player.config.fullscreen.fallback === 'force'; // Get the fullscreen element\n      // Checks container is an ancestor, defaults to null\n\n      this.player.elements.fullscreen = player.config.fullscreen.container && closest(this.player.elements.container, player.config.fullscreen.container); // Register event listeners\n      // Handle event (incase user presses escape etc)\n\n      on.call(this.player, document, this.prefix === 'ms' ? 'MSFullscreenChange' : \"\".concat(this.prefix, \"fullscreenchange\"), function () {\n        // TODO: Filter for target??\n        _this.onChange();\n      }); // Fullscreen toggle on double click\n\n      on.call(this.player, this.player.elements.container, 'dblclick', function (event) {\n        // Ignore double click in controls\n        if (is$1.element(_this.player.elements.controls) && _this.player.elements.controls.contains(event.target)) {\n          return;\n        }\n\n        _this.player.listeners.proxy(event, _this.toggle, 'fullscreen');\n      }); // Tap focus when in fullscreen\n\n      on.call(this, this.player.elements.container, 'keydown', function (event) {\n        return _this.trapFocus(event);\n      }); // Update the UI\n\n      this.update();\n    } // Determine if native supported\n\n\n    _createClass(Fullscreen, [{\n      key: \"onChange\",\n      value: function onChange() {\n        if (!this.enabled) {\n          return;\n        } // Update toggle button\n\n\n        var button = this.player.elements.buttons.fullscreen;\n\n        if (is$1.element(button)) {\n          button.pressed = this.active;\n        } // Always trigger events on the plyr / media element (not a fullscreen container) and let them bubble up\n\n\n        var target = this.target === this.player.media ? this.target : this.player.elements.container; // Trigger an event\n\n        triggerEvent.call(this.player, target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n      }\n    }, {\n      key: \"toggleFallback\",\n      value: function toggleFallback() {\n        var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        // Store or restore scroll position\n        if (toggle) {\n          this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0\n          };\n        } else {\n          window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n        } // Toggle scroll\n\n\n        document.body.style.overflow = toggle ? 'hidden' : ''; // Toggle class hook\n\n        toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle); // Force full viewport on iPhone X+\n\n        if (browser.isIos) {\n          var viewport = document.head.querySelector('meta[name=\"viewport\"]');\n          var property = 'viewport-fit=cover'; // Inject the viewport meta if required\n\n          if (!viewport) {\n            viewport = document.createElement('meta');\n            viewport.setAttribute('name', 'viewport');\n          } // Check if the property already exists\n\n\n          var hasProperty = is$1.string(viewport.content) && viewport.content.includes(property);\n\n          if (toggle) {\n            this.cleanupViewport = !hasProperty;\n\n            if (!hasProperty) {\n              viewport.content += \",\".concat(property);\n            }\n          } else if (this.cleanupViewport) {\n            viewport.content = viewport.content.split(',').filter(function (part) {\n              return part.trim() !== property;\n            }).join(',');\n          }\n        } // Toggle button and fire events\n\n\n        this.onChange();\n      } // Trap focus inside container\n\n    }, {\n      key: \"trapFocus\",\n      value: function trapFocus(event) {\n        // Bail if iOS, not active, not the tab key\n        if (browser.isIos || !this.active || event.key !== 'Tab' || event.keyCode !== 9) {\n          return;\n        } // Get the current focused element\n\n\n        var focused = document.activeElement;\n        var focusable = getElements.call(this.player, 'a[href], button:not(:disabled), input:not(:disabled), [tabindex]');\n\n        var _focusable = _slicedToArray(focusable, 1),\n            first = _focusable[0];\n\n        var last = focusable[focusable.length - 1];\n\n        if (focused === last && !event.shiftKey) {\n          // Move focus to first element that can be tabbed if Shift isn't used\n          first.focus();\n          event.preventDefault();\n        } else if (focused === first && event.shiftKey) {\n          // Move focus to last element that can be tabbed if Shift is used\n          last.focus();\n          event.preventDefault();\n        }\n      } // Update UI\n\n    }, {\n      key: \"update\",\n      value: function update() {\n        if (this.enabled) {\n          var mode;\n\n          if (this.forceFallback) {\n            mode = 'Fallback (forced)';\n          } else if (Fullscreen.native) {\n            mode = 'Native';\n          } else {\n            mode = 'Fallback';\n          }\n\n          this.player.debug.log(\"\".concat(mode, \" fullscreen enabled\"));\n        } else {\n          this.player.debug.log('Fullscreen not supported and fallback disabled');\n        } // Add styling hook to show button\n\n\n        toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n      } // Make an element fullscreen\n\n    }, {\n      key: \"enter\",\n      value: function enter() {\n        if (!this.enabled) {\n          return;\n        } // iOS native fullscreen doesn't need the request step\n\n\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n          this.target.webkitEnterFullscreen();\n        } else if (!Fullscreen.native || this.forceFallback) {\n          this.toggleFallback(true);\n        } else if (!this.prefix) {\n          this.target.requestFullscreen({\n            navigationUI: 'hide'\n          });\n        } else if (!is$1.empty(this.prefix)) {\n          this.target[\"\".concat(this.prefix, \"Request\").concat(this.property)]();\n        }\n      } // Bail from fullscreen\n\n    }, {\n      key: \"exit\",\n      value: function exit() {\n        if (!this.enabled) {\n          return;\n        } // iOS native fullscreen\n\n\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n          this.target.webkitExitFullscreen();\n          silencePromise(this.player.play());\n        } else if (!Fullscreen.native || this.forceFallback) {\n          this.toggleFallback(false);\n        } else if (!this.prefix) {\n          (document.cancelFullScreen || document.exitFullscreen).call(document);\n        } else if (!is$1.empty(this.prefix)) {\n          var action = this.prefix === 'moz' ? 'Cancel' : 'Exit';\n          document[\"\".concat(this.prefix).concat(action).concat(this.property)]();\n        }\n      } // Toggle state\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        if (!this.active) {\n          this.enter();\n        } else {\n          this.exit();\n        }\n      }\n    }, {\n      key: \"usingNative\",\n      // If we're actually using native\n      get: function get() {\n        return Fullscreen.native && !this.forceFallback;\n      } // Get the prefix for handlers\n\n    }, {\n      key: \"enabled\",\n      // Determine if fullscreen is enabled\n      get: function get() {\n        return (Fullscreen.native || this.player.config.fullscreen.fallback) && this.player.config.fullscreen.enabled && this.player.supported.ui && this.player.isVideo;\n      } // Get active state\n\n    }, {\n      key: \"active\",\n      get: function get() {\n        if (!this.enabled) {\n          return false;\n        } // Fallback using classname\n\n\n        if (!Fullscreen.native || this.forceFallback) {\n          return hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        var element = !this.prefix ? document.fullscreenElement : document[\"\".concat(this.prefix).concat(this.property, \"Element\")];\n        return element && element.shadowRoot ? element === this.target.getRootNode().host : element === this.target;\n      } // Get target element\n\n    }, {\n      key: \"target\",\n      get: function get() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.fullscreen || this.player.elements.container;\n      }\n    }], [{\n      key: \"native\",\n      get: function get() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n      }\n    }, {\n      key: \"prefix\",\n      get: function get() {\n        // No prefix\n        if (is$1.function(document.exitFullscreen)) {\n          return '';\n        } // Check for fullscreen support by vendor prefix\n\n\n        var value = '';\n        var prefixes = ['webkit', 'moz', 'ms'];\n        prefixes.some(function (pre) {\n          if (is$1.function(document[\"\".concat(pre, \"ExitFullscreen\")]) || is$1.function(document[\"\".concat(pre, \"CancelFullScreen\")])) {\n            value = pre;\n            return true;\n          }\n\n          return false;\n        });\n        return value;\n      }\n    }, {\n      key: \"property\",\n      get: function get() {\n        return this.prefix === 'moz' ? 'FullScreen' : 'Fullscreen';\n      }\n    }]);\n\n    return Fullscreen;\n  }();\n\n  // ==========================================================================\n  // Load image avoiding xhr/fetch CORS issues\n  // Server status can't be obtained this way unfortunately, so this uses \"naturalWidth\" to determine if the image has loaded\n  // By default it checks if it is at least 1px, but you can add a second argument to change this\n  // ==========================================================================\n  function loadImage(src) {\n    var minWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return new Promise(function (resolve, reject) {\n      var image = new Image();\n\n      var handler = function handler() {\n        delete image.onload;\n        delete image.onerror;\n        (image.naturalWidth >= minWidth ? resolve : reject)(image);\n      };\n\n      Object.assign(image, {\n        onload: handler,\n        onerror: handler,\n        src: src\n      });\n    });\n  }\n\n  var ui = {\n    addStyleHook: function addStyleHook() {\n      toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n      toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n    // Toggle native HTML5 media controls\n    toggleNativeControls: function toggleNativeControls() {\n      var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (toggle && this.isHTML5) {\n        this.media.setAttribute('controls', '');\n      } else {\n        this.media.removeAttribute('controls');\n      }\n    },\n    // Setup the UI\n    build: function build() {\n      var _this = this;\n\n      // Re-attach media element listeners\n      // TODO: Use event bubbling?\n      this.listeners.media(); // Don't setup interface if no support\n\n      if (!this.supported.ui) {\n        this.debug.warn(\"Basic support only for \".concat(this.provider, \" \").concat(this.type)); // Restore native controls\n\n        ui.toggleNativeControls.call(this, true); // Bail\n\n        return;\n      } // Inject custom controls if not present\n\n\n      if (!is$1.element(this.elements.controls)) {\n        // Inject custom controls\n        controls.inject.call(this); // Re-attach control listeners\n\n        this.listeners.controls();\n      } // Remove native controls\n\n\n      ui.toggleNativeControls.call(this); // Setup captions for HTML5\n\n      if (this.isHTML5) {\n        captions.setup.call(this);\n      } // Reset volume\n\n\n      this.volume = null; // Reset mute state\n\n      this.muted = null; // Reset loop state\n\n      this.loop = null; // Reset quality setting\n\n      this.quality = null; // Reset speed\n\n      this.speed = null; // Reset volume display\n\n      controls.updateVolume.call(this); // Reset time display\n\n      controls.timeUpdate.call(this); // Update the UI\n\n      ui.checkPlaying.call(this); // Check for picture-in-picture support\n\n      toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo); // Check for airplay support\n\n      toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5); // Add iOS class\n\n      toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos); // Add touch class\n\n      toggleClass(this.elements.container, this.config.classNames.isTouch, this.touch); // Ready for API calls\n\n      this.ready = true; // Ready event at end of execution stack\n\n      setTimeout(function () {\n        triggerEvent.call(_this, _this.media, 'ready');\n      }, 0); // Set the title\n\n      ui.setTitle.call(this); // Assure the poster image is set, if the property was added before the element was created\n\n      if (this.poster) {\n        ui.setPoster.call(this, this.poster, false).catch(function () {});\n      } // Manually set the duration if user has overridden it.\n      // The event listeners for it doesn't get called if preload is disabled (#701)\n\n\n      if (this.config.duration) {\n        controls.durationUpdate.call(this);\n      }\n    },\n    // Setup aria attribute for play and iframe title\n    setTitle: function setTitle() {\n      // Find the current text\n      var label = i18n.get('play', this.config); // If there's a media title set, use that for the label\n\n      if (is$1.string(this.config.title) && !is$1.empty(this.config.title)) {\n        label += \", \".concat(this.config.title);\n      } // If there's a play button, set label\n\n\n      Array.from(this.elements.buttons.play || []).forEach(function (button) {\n        button.setAttribute('aria-label', label);\n      }); // Set iframe title\n      // https://github.com/sampotts/plyr/issues/124\n\n      if (this.isEmbed) {\n        var iframe = getElement.call(this, 'iframe');\n\n        if (!is$1.element(iframe)) {\n          return;\n        } // Default to media type\n\n\n        var title = !is$1.empty(this.config.title) ? this.config.title : 'video';\n        var format = i18n.get('frameTitle', this.config);\n        iframe.setAttribute('title', format.replace('{title}', title));\n      }\n    },\n    // Toggle poster\n    togglePoster: function togglePoster(enable) {\n      toggleClass(this.elements.container, this.config.classNames.posterEnabled, enable);\n    },\n    // Set the poster image (async)\n    // Used internally for the poster setter, with the passive option forced to false\n    setPoster: function setPoster(poster) {\n      var _this2 = this;\n\n      var passive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // Don't override if call is passive\n      if (passive && this.poster) {\n        return Promise.reject(new Error('Poster already set'));\n      } // Set property synchronously to respect the call order\n\n\n      this.media.setAttribute('data-poster', poster); // Show the poster\n\n      this.elements.poster.removeAttribute('hidden'); // Wait until ui is ready\n\n      return ready.call(this) // Load image\n      .then(function () {\n        return loadImage(poster);\n      }).catch(function (err) {\n        // Hide poster on error unless it's been set by another call\n        if (poster === _this2.poster) {\n          ui.togglePoster.call(_this2, false);\n        } // Rethrow\n\n\n        throw err;\n      }).then(function () {\n        // Prevent race conditions\n        if (poster !== _this2.poster) {\n          throw new Error('setPoster cancelled by later call to setPoster');\n        }\n      }).then(function () {\n        Object.assign(_this2.elements.poster.style, {\n          backgroundImage: \"url('\".concat(poster, \"')\"),\n          // Reset backgroundSize as well (since it can be set to \"cover\" for padded thumbnails for youtube)\n          backgroundSize: ''\n        });\n        ui.togglePoster.call(_this2, true);\n        return poster;\n      });\n    },\n    // Check playing state\n    checkPlaying: function checkPlaying(event) {\n      var _this3 = this;\n\n      // Class hooks\n      toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n      toggleClass(this.elements.container, this.config.classNames.paused, this.paused);\n      toggleClass(this.elements.container, this.config.classNames.stopped, this.stopped); // Set state\n\n      Array.from(this.elements.buttons.play || []).forEach(function (target) {\n        Object.assign(target, {\n          pressed: _this3.playing\n        });\n        target.setAttribute('aria-label', i18n.get(_this3.playing ? 'pause' : 'play', _this3.config));\n      }); // Only update controls on non timeupdate events\n\n      if (is$1.event(event) && event.type === 'timeupdate') {\n        return;\n      } // Toggle controls\n\n\n      ui.toggleControls.call(this);\n    },\n    // Check if media is loading\n    checkLoading: function checkLoading(event) {\n      var _this4 = this;\n\n      this.loading = ['stalled', 'waiting'].includes(event.type); // Clear timer\n\n      clearTimeout(this.timers.loading); // Timer to prevent flicker when seeking\n\n      this.timers.loading = setTimeout(function () {\n        // Update progress bar loading class state\n        toggleClass(_this4.elements.container, _this4.config.classNames.loading, _this4.loading); // Update controls visibility\n\n        ui.toggleControls.call(_this4);\n      }, this.loading ? 250 : 0);\n    },\n    // Toggle controls based on state and `force` argument\n    toggleControls: function toggleControls(force) {\n      var controlsElement = this.elements.controls;\n\n      if (controlsElement && this.config.hideControls) {\n        // Don't hide controls if a touch-device user recently seeked. (Must be limited to touch devices, or it occasionally prevents desktop controls from hiding.)\n        var recentTouchSeek = this.touch && this.lastSeekTime + 2000 > Date.now(); // Show controls if force, loading, paused, button interaction, or recent seek, otherwise hide\n\n        this.toggleControls(Boolean(force || this.loading || this.paused || controlsElement.pressed || controlsElement.hover || recentTouchSeek));\n      }\n    },\n    // Migrate any custom properties from the media to the parent\n    migrateStyles: function migrateStyles() {\n      var _this5 = this;\n\n      // Loop through values (as they are the keys when the object is spread 🤔)\n      Object.values(_objectSpread2({}, this.media.style)) // We're only fussed about Plyr specific properties\n      .filter(function (key) {\n        return !is$1.empty(key) && is$1.string(key) && key.startsWith('--plyr');\n      }).forEach(function (key) {\n        // Set on the container\n        _this5.elements.container.style.setProperty(key, _this5.media.style.getPropertyValue(key)); // Clean up from media element\n\n\n        _this5.media.style.removeProperty(key);\n      }); // Remove attribute if empty\n\n      if (is$1.empty(this.media.style)) {\n        this.media.removeAttribute('style');\n      }\n    }\n  };\n\n  var Listeners = /*#__PURE__*/function () {\n    function Listeners(player) {\n      _classCallCheck(this, Listeners);\n\n      this.player = player;\n      this.lastKey = null;\n      this.focusTimer = null;\n      this.lastKeyDown = null;\n      this.handleKey = this.handleKey.bind(this);\n      this.toggleMenu = this.toggleMenu.bind(this);\n      this.setTabFocus = this.setTabFocus.bind(this);\n      this.firstTouch = this.firstTouch.bind(this);\n    } // Handle key presses\n\n\n    _createClass(Listeners, [{\n      key: \"handleKey\",\n      value: function handleKey(event) {\n        var player = this.player;\n        var elements = player.elements;\n        var code = event.keyCode ? event.keyCode : event.which;\n        var pressed = event.type === 'keydown';\n        var repeat = pressed && code === this.lastKey; // Bail if a modifier key is set\n\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n          return;\n        } // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n\n\n        if (!is$1.number(code)) {\n          return;\n        } // Seek by the number keys\n\n\n        var seekByKey = function seekByKey() {\n          // Divide the max duration into 10th's and times by the number value\n          player.currentTime = player.duration / 10 * (code - 48);\n        }; // Handle the key on keydown\n        // Reset on keyup\n\n\n        if (pressed) {\n          // Check focused element\n          // and if the focused element is not editable (e.g. text input)\n          // and any that accept key input http://webaim.org/techniques/keyboard/\n          var focused = document.activeElement;\n\n          if (is$1.element(focused)) {\n            var editable = player.config.selectors.editable;\n            var seek = elements.inputs.seek;\n\n            if (focused !== seek && matches$1(focused, editable)) {\n              return;\n            }\n\n            if (event.which === 32 && matches$1(focused, 'button, [role^=\"menuitem\"]')) {\n              return;\n            }\n          } // Which keycodes should we prevent default\n\n\n          var preventDefault = [32, 37, 38, 39, 40, 48, 49, 50, 51, 52, 53, 54, 56, 57, 67, 70, 73, 75, 76, 77, 79]; // If the code is found prevent default (e.g. prevent scrolling for arrows)\n\n          if (preventDefault.includes(code)) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n\n          switch (code) {\n            case 48:\n            case 49:\n            case 50:\n            case 51:\n            case 52:\n            case 53:\n            case 54:\n            case 55:\n            case 56:\n            case 57:\n              // 0-9\n              if (!repeat) {\n                seekByKey();\n              }\n\n              break;\n\n            case 32:\n            case 75:\n              // Space and K key\n              if (!repeat) {\n                silencePromise(player.togglePlay());\n              }\n\n              break;\n\n            case 38:\n              // Arrow up\n              player.increaseVolume(0.1);\n              break;\n\n            case 40:\n              // Arrow down\n              player.decreaseVolume(0.1);\n              break;\n\n            case 77:\n              // M key\n              if (!repeat) {\n                player.muted = !player.muted;\n              }\n\n              break;\n\n            case 39:\n              // Arrow forward\n              player.forward();\n              break;\n\n            case 37:\n              // Arrow back\n              player.rewind();\n              break;\n\n            case 70:\n              // F key\n              player.fullscreen.toggle();\n              break;\n\n            case 67:\n              // C key\n              if (!repeat) {\n                player.toggleCaptions();\n              }\n\n              break;\n\n            case 76:\n              // L key\n              player.loop = !player.loop;\n              break;\n          } // Escape is handle natively when in full screen\n          // So we only need to worry about non native\n\n\n          if (code === 27 && !player.fullscreen.usingNative && player.fullscreen.active) {\n            player.fullscreen.toggle();\n          } // Store last code for next cycle\n\n\n          this.lastKey = code;\n        } else {\n          this.lastKey = null;\n        }\n      } // Toggle menu\n\n    }, {\n      key: \"toggleMenu\",\n      value: function toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n      } // Device is touch enabled\n\n    }, {\n      key: \"firstTouch\",\n      value: function firstTouch() {\n        var player = this.player;\n        var elements = player.elements;\n        player.touch = true; // Add touch class\n\n        toggleClass(elements.container, player.config.classNames.isTouch, true);\n      }\n    }, {\n      key: \"setTabFocus\",\n      value: function setTabFocus(event) {\n        var player = this.player;\n        var elements = player.elements;\n        clearTimeout(this.focusTimer); // Ignore any key other than tab\n\n        if (event.type === 'keydown' && event.which !== 9) {\n          return;\n        } // Store reference to event timeStamp\n\n\n        if (event.type === 'keydown') {\n          this.lastKeyDown = event.timeStamp;\n        } // Remove current classes\n\n\n        var removeCurrent = function removeCurrent() {\n          var className = player.config.classNames.tabFocus;\n          var current = getElements.call(player, \".\".concat(className));\n          toggleClass(current, className, false);\n        }; // Determine if a key was pressed to trigger this event\n\n\n        var wasKeyDown = event.timeStamp - this.lastKeyDown <= 20; // Ignore focus events if a key was pressed prior\n\n        if (event.type === 'focus' && !wasKeyDown) {\n          return;\n        } // Remove all current\n\n\n        removeCurrent(); // Delay the adding of classname until the focus has changed\n        // This event fires before the focusin event\n\n        if (event.type !== 'focusout') {\n          this.focusTimer = setTimeout(function () {\n            var focused = document.activeElement; // Ignore if current focus element isn't inside the player\n\n            if (!elements.container.contains(focused)) {\n              return;\n            }\n\n            toggleClass(document.activeElement, player.config.classNames.tabFocus, true);\n          }, 10);\n        }\n      } // Global window & document listeners\n\n    }, {\n      key: \"global\",\n      value: function global() {\n        var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var player = this.player; // Keyboard shortcuts\n\n        if (player.config.keyboard.global) {\n          toggleListener.call(player, window, 'keydown keyup', this.handleKey, toggle, false);\n        } // Click anywhere closes menu\n\n\n        toggleListener.call(player, document.body, 'click', this.toggleMenu, toggle); // Detect touch by events\n\n        once.call(player, document.body, 'touchstart', this.firstTouch); // Tab focus detection\n\n        toggleListener.call(player, document.body, 'keydown focus blur focusout', this.setTabFocus, toggle, false, true);\n      } // Container listeners\n\n    }, {\n      key: \"container\",\n      value: function container() {\n        var player = this.player;\n        var config = player.config,\n            elements = player.elements,\n            timers = player.timers; // Keyboard shortcuts\n\n        if (!config.keyboard.global && config.keyboard.focused) {\n          on.call(player, elements.container, 'keydown keyup', this.handleKey, false);\n        } // Toggle controls on mouse events and entering fullscreen\n\n\n        on.call(player, elements.container, 'mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen', function (event) {\n          var controlsElement = elements.controls; // Remove button states for fullscreen\n\n          if (controlsElement && event.type === 'enterfullscreen') {\n            controlsElement.pressed = false;\n            controlsElement.hover = false;\n          } // Show, then hide after a timeout unless another control event occurs\n\n\n          var show = ['touchstart', 'touchmove', 'mousemove'].includes(event.type);\n          var delay = 0;\n\n          if (show) {\n            ui.toggleControls.call(player, true); // Use longer timeout for touch devices\n\n            delay = player.touch ? 3000 : 2000;\n          } // Clear timer\n\n\n          clearTimeout(timers.controls); // Set new timer to prevent flicker when seeking\n\n          timers.controls = setTimeout(function () {\n            return ui.toggleControls.call(player, false);\n          }, delay);\n        }); // Set a gutter for Vimeo\n\n        var setGutter = function setGutter(ratio, padding, toggle) {\n          if (!player.isVimeo || player.config.vimeo.premium) {\n            return;\n          }\n\n          var target = player.elements.wrapper.firstChild;\n\n          var _ratio = _slicedToArray(ratio, 2),\n              y = _ratio[1];\n\n          var _getAspectRatio$call = getAspectRatio.call(player),\n              _getAspectRatio$call2 = _slicedToArray(_getAspectRatio$call, 2),\n              videoX = _getAspectRatio$call2[0],\n              videoY = _getAspectRatio$call2[1];\n\n          target.style.maxWidth = toggle ? \"\".concat(y / videoY * videoX, \"px\") : null;\n          target.style.margin = toggle ? '0 auto' : null;\n        }; // Resize on fullscreen change\n\n\n        var setPlayerSize = function setPlayerSize(measure) {\n          // If we don't need to measure the viewport\n          if (!measure) {\n            return setAspectRatio.call(player);\n          }\n\n          var rect = elements.container.getBoundingClientRect();\n          var width = rect.width,\n              height = rect.height;\n          return setAspectRatio.call(player, \"\".concat(width, \":\").concat(height));\n        };\n\n        var resized = function resized() {\n          clearTimeout(timers.resized);\n          timers.resized = setTimeout(setPlayerSize, 50);\n        };\n\n        on.call(player, elements.container, 'enterfullscreen exitfullscreen', function (event) {\n          var _player$fullscreen = player.fullscreen,\n              target = _player$fullscreen.target,\n              usingNative = _player$fullscreen.usingNative; // Ignore events not from target\n\n          if (target !== elements.container) {\n            return;\n          } // If it's not an embed and no ratio specified\n\n\n          if (!player.isEmbed && is$1.empty(player.config.ratio)) {\n            return;\n          }\n\n          var isEnter = event.type === 'enterfullscreen'; // Set the player size when entering fullscreen to viewport size\n\n          var _setPlayerSize = setPlayerSize(isEnter),\n              padding = _setPlayerSize.padding,\n              ratio = _setPlayerSize.ratio; // Set Vimeo gutter\n\n\n          setGutter(ratio, padding, isEnter); // Horrible hack for Safari 14 not repainting properly on entering fullscreen\n\n          if (isEnter) {\n            setTimeout(function () {\n              return repaint(elements.container);\n            }, 100);\n          } // If not using native browser fullscreen API, we need to check for resizes of viewport\n\n\n          if (!usingNative) {\n            if (isEnter) {\n              on.call(player, window, 'resize', resized);\n            } else {\n              off.call(player, window, 'resize', resized);\n            }\n          }\n        });\n      } // Listen for media events\n\n    }, {\n      key: \"media\",\n      value: function media() {\n        var _this = this;\n\n        var player = this.player;\n        var elements = player.elements; // Time change on media\n\n        on.call(player, player.media, 'timeupdate seeking seeked', function (event) {\n          return controls.timeUpdate.call(player, event);\n        }); // Display duration\n\n        on.call(player, player.media, 'durationchange loadeddata loadedmetadata', function (event) {\n          return controls.durationUpdate.call(player, event);\n        }); // Handle the media finishing\n\n        on.call(player, player.media, 'ended', function () {\n          // Show poster on end\n          if (player.isHTML5 && player.isVideo && player.config.resetOnEnd) {\n            // Restart\n            player.restart(); // Call pause otherwise IE11 will start playing the video again\n\n            player.pause();\n          }\n        }); // Check for buffer progress\n\n        on.call(player, player.media, 'progress playing seeking seeked', function (event) {\n          return controls.updateProgress.call(player, event);\n        }); // Handle volume changes\n\n        on.call(player, player.media, 'volumechange', function (event) {\n          return controls.updateVolume.call(player, event);\n        }); // Handle play/pause\n\n        on.call(player, player.media, 'playing play pause ended emptied timeupdate', function (event) {\n          return ui.checkPlaying.call(player, event);\n        }); // Loading state\n\n        on.call(player, player.media, 'waiting canplay seeked playing', function (event) {\n          return ui.checkLoading.call(player, event);\n        }); // Click video\n\n        if (player.supported.ui && player.config.clickToPlay && !player.isAudio) {\n          // Re-fetch the wrapper\n          var wrapper = getElement.call(player, \".\".concat(player.config.classNames.video)); // Bail if there's no wrapper (this should never happen)\n\n          if (!is$1.element(wrapper)) {\n            return;\n          } // On click play, pause or restart\n\n\n          on.call(player, elements.container, 'click', function (event) {\n            var targets = [elements.container, wrapper]; // Ignore if click if not container or in video wrapper\n\n            if (!targets.includes(event.target) && !wrapper.contains(event.target)) {\n              return;\n            } // Touch devices will just show controls (if hidden)\n\n\n            if (player.touch && player.config.hideControls) {\n              return;\n            }\n\n            if (player.ended) {\n              _this.proxy(event, player.restart, 'restart');\n\n              _this.proxy(event, function () {\n                silencePromise(player.play());\n              }, 'play');\n            } else {\n              _this.proxy(event, function () {\n                silencePromise(player.togglePlay());\n              }, 'play');\n            }\n          });\n        } // Disable right click\n\n\n        if (player.supported.ui && player.config.disableContextMenu) {\n          on.call(player, elements.wrapper, 'contextmenu', function (event) {\n            event.preventDefault();\n          }, false);\n        } // Volume change\n\n\n        on.call(player, player.media, 'volumechange', function () {\n          // Save to storage\n          player.storage.set({\n            volume: player.volume,\n            muted: player.muted\n          });\n        }); // Speed change\n\n        on.call(player, player.media, 'ratechange', function () {\n          // Update UI\n          controls.updateSetting.call(player, 'speed'); // Save to storage\n\n\n          player.storage.set({\n            speed: player.speed\n          });\n        }); // Quality change\n\n        on.call(player, player.media, 'qualitychange', function (event) {\n          // Update UI\n          controls.updateSetting.call(player, 'quality', null, event.detail.quality);\n        }); // Update download link when ready and if quality changes\n\n        on.call(player, player.media, 'ready qualitychange', function () {\n          controls.setDownloadUrl.call(player);\n        }); // Proxy events to container\n        // Bubble up key events for Edge\n\n        var proxyEvents = player.config.events.concat(['keyup', 'keydown']).join(' ');\n        on.call(player, player.media, proxyEvents, function (event) {\n          var _event$detail = event.detail,\n              detail = _event$detail === void 0 ? {} : _event$detail; // Get error details from media\n\n          if (event.type === 'error') {\n            detail = player.media.error;\n          }\n\n          triggerEvent.call(player, elements.container, event.type, true, detail);\n        });\n      } // Run default and custom handlers\n\n    }, {\n      key: \"proxy\",\n      value: function proxy(event, defaultHandler, customHandlerKey) {\n        var player = this.player;\n        var customHandler = player.config.listeners[customHandlerKey];\n        var hasCustomHandler = is$1.function(customHandler);\n        var returned = true; // Execute custom handler\n\n        if (hasCustomHandler) {\n          returned = customHandler.call(player, event);\n        } // Only call default handler if not prevented in custom handler\n\n\n        if (returned !== false && is$1.function(defaultHandler)) {\n          defaultHandler.call(player, event);\n        }\n      } // Trigger custom and default handlers\n\n    }, {\n      key: \"bind\",\n      value: function bind(element, type, defaultHandler, customHandlerKey) {\n        var _this2 = this;\n\n        var passive = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n        var player = this.player;\n        var customHandler = player.config.listeners[customHandlerKey];\n        var hasCustomHandler = is$1.function(customHandler);\n        on.call(player, element, type, function (event) {\n          return _this2.proxy(event, defaultHandler, customHandlerKey);\n        }, passive && !hasCustomHandler);\n      } // Listen for control events\n\n    }, {\n      key: \"controls\",\n      value: function controls$1() {\n        var _this3 = this;\n\n        var player = this.player;\n        var elements = player.elements; // IE doesn't support input event, so we fallback to change\n\n        var inputEvent = browser.isIE ? 'change' : 'input'; // Play/pause toggle\n\n        if (elements.buttons.play) {\n          Array.from(elements.buttons.play).forEach(function (button) {\n            _this3.bind(button, 'click', function () {\n              silencePromise(player.togglePlay());\n            }, 'play');\n          });\n        } // Pause\n\n\n        this.bind(elements.buttons.restart, 'click', player.restart, 'restart'); // Rewind\n\n        this.bind(elements.buttons.rewind, 'click', function () {\n          // Record seek time so we can prevent hiding controls for a few seconds after rewind\n          player.lastSeekTime = Date.now();\n          player.rewind();\n        }, 'rewind'); // Rewind\n\n        this.bind(elements.buttons.fastForward, 'click', function () {\n          // Record seek time so we can prevent hiding controls for a few seconds after fast forward\n          player.lastSeekTime = Date.now();\n          player.forward();\n        }, 'fastForward'); // Mute toggle\n\n        this.bind(elements.buttons.mute, 'click', function () {\n          player.muted = !player.muted;\n        }, 'mute'); // Captions toggle\n\n        this.bind(elements.buttons.captions, 'click', function () {\n          return player.toggleCaptions();\n        }); // Download\n\n        this.bind(elements.buttons.download, 'click', function () {\n          triggerEvent.call(player, player.media, 'download');\n        }, 'download'); // Fullscreen toggle\n\n        this.bind(elements.buttons.fullscreen, 'click', function () {\n          player.fullscreen.toggle();\n        }, 'fullscreen'); // Picture-in-Picture\n\n        this.bind(elements.buttons.pip, 'click', function () {\n          player.pip = 'toggle';\n        }, 'pip'); // Airplay\n\n        this.bind(elements.buttons.airplay, 'click', player.airplay, 'airplay'); // Settings menu - click toggle\n\n        this.bind(elements.buttons.settings, 'click', function (event) {\n          // Prevent the document click listener closing the menu\n          event.stopPropagation();\n          event.preventDefault();\n\n          controls.toggleMenu.call(player, event);\n        }, null, false); // Can't be passive as we're preventing default\n        // Settings menu - keyboard toggle\n        // We have to bind to keyup otherwise Firefox triggers a click when a keydown event handler shifts focus\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n\n        this.bind(elements.buttons.settings, 'keyup', function (event) {\n          var code = event.which; // We only care about space and return\n\n          if (![13, 32].includes(code)) {\n            return;\n          } // Because return triggers a click anyway, all we need to do is set focus\n\n\n          if (code === 13) {\n            controls.focusFirstMenuItem.call(player, null, true);\n\n            return;\n          } // Prevent scroll\n\n\n          event.preventDefault(); // Prevent playing video (Firefox)\n\n          event.stopPropagation(); // Toggle menu\n\n          controls.toggleMenu.call(player, event);\n        }, null, false // Can't be passive as we're preventing default\n        ); // Escape closes menu\n\n        this.bind(elements.settings.menu, 'keydown', function (event) {\n          if (event.which === 27) {\n            controls.toggleMenu.call(player, event);\n          }\n        }); // Set range input alternative \"value\", which matches the tooltip time (#954)\n\n        this.bind(elements.inputs.seek, 'mousedown mousemove', function (event) {\n          var rect = elements.progress.getBoundingClientRect();\n          var percent = 100 / rect.width * (event.pageX - rect.left);\n          event.currentTarget.setAttribute('seek-value', percent);\n        }); // Pause while seeking\n\n        this.bind(elements.inputs.seek, 'mousedown mouseup keydown keyup touchstart touchend', function (event) {\n          var seek = event.currentTarget;\n          var code = event.keyCode ? event.keyCode : event.which;\n          var attribute = 'play-on-seeked';\n\n          if (is$1.keyboardEvent(event) && code !== 39 && code !== 37) {\n            return;\n          } // Record seek time so we can prevent hiding controls for a few seconds after seek\n\n\n          player.lastSeekTime = Date.now(); // Was playing before?\n\n          var play = seek.hasAttribute(attribute); // Done seeking\n\n          var done = ['mouseup', 'touchend', 'keyup'].includes(event.type); // If we're done seeking and it was playing, resume playback\n\n          if (play && done) {\n            seek.removeAttribute(attribute);\n            silencePromise(player.play());\n          } else if (!done && player.playing) {\n            seek.setAttribute(attribute, '');\n            player.pause();\n          }\n        }); // Fix range inputs on iOS\n        // Super weird iOS bug where after you interact with an <input type=\"range\">,\n        // it takes over further interactions on the page. This is a hack\n\n        if (browser.isIos) {\n          var inputs = getElements.call(player, 'input[type=\"range\"]');\n          Array.from(inputs).forEach(function (input) {\n            return _this3.bind(input, inputEvent, function (event) {\n              return repaint(event.target);\n            });\n          });\n        } // Seek\n\n\n        this.bind(elements.inputs.seek, inputEvent, function (event) {\n          var seek = event.currentTarget; // If it exists, use seek-value instead of \"value\" for consistency with tooltip time (#954)\n\n          var seekTo = seek.getAttribute('seek-value');\n\n          if (is$1.empty(seekTo)) {\n            seekTo = seek.value;\n          }\n\n          seek.removeAttribute('seek-value');\n          player.currentTime = seekTo / seek.max * player.duration;\n        }, 'seek'); // Seek tooltip\n\n        this.bind(elements.progress, 'mouseenter mouseleave mousemove', function (event) {\n          return controls.updateSeekTooltip.call(player, event);\n        }); // Preview thumbnails plugin\n        // TODO: Really need to work on some sort of plug-in wide event bus or pub-sub for this\n\n        this.bind(elements.progress, 'mousemove touchmove', function (event) {\n          var previewThumbnails = player.previewThumbnails;\n\n          if (previewThumbnails && previewThumbnails.loaded) {\n            previewThumbnails.startMove(event);\n          }\n        }); // Hide thumbnail preview - on mouse click, mouse leave, and video play/seek. All four are required, e.g., for buffering\n\n        this.bind(elements.progress, 'mouseleave touchend click', function () {\n          var previewThumbnails = player.previewThumbnails;\n\n          if (previewThumbnails && previewThumbnails.loaded) {\n            previewThumbnails.endMove(false, true);\n          }\n        }); // Show scrubbing preview\n\n        this.bind(elements.progress, 'mousedown touchstart', function (event) {\n          var previewThumbnails = player.previewThumbnails;\n\n          if (previewThumbnails && previewThumbnails.loaded) {\n            previewThumbnails.startScrubbing(event);\n          }\n        });\n        this.bind(elements.progress, 'mouseup touchend', function (event) {\n          var previewThumbnails = player.previewThumbnails;\n\n          if (previewThumbnails && previewThumbnails.loaded) {\n            previewThumbnails.endScrubbing(event);\n          }\n        }); // Polyfill for lower fill in <input type=\"range\"> for webkit\n\n        if (browser.isWebkit) {\n          Array.from(getElements.call(player, 'input[type=\"range\"]')).forEach(function (element) {\n            _this3.bind(element, 'input', function (event) {\n              return controls.updateRangeFill.call(player, event.target);\n            });\n          });\n        } // Current time invert\n        // Only if one time element is used for both currentTime and duration\n\n\n        if (player.config.toggleInvert && !is$1.element(elements.display.duration)) {\n          this.bind(elements.display.currentTime, 'click', function () {\n            // Do nothing if we're at the start\n            if (player.currentTime === 0) {\n              return;\n            }\n\n            player.config.invertTime = !player.config.invertTime;\n\n            controls.timeUpdate.call(player);\n          });\n        } // Volume\n\n\n        this.bind(elements.inputs.volume, inputEvent, function (event) {\n          player.volume = event.target.value;\n        }, 'volume'); // Update controls.hover state (used for ui.toggleControls to avoid hiding when interacting)\n\n        this.bind(elements.controls, 'mouseenter mouseleave', function (event) {\n          elements.controls.hover = !player.touch && event.type === 'mouseenter';\n        }); // Also update controls.hover state for any non-player children of fullscreen element (as above)\n\n        if (elements.fullscreen) {\n          Array.from(elements.fullscreen.children).filter(function (c) {\n            return !c.contains(elements.container);\n          }).forEach(function (child) {\n            _this3.bind(child, 'mouseenter mouseleave', function (event) {\n              elements.controls.hover = !player.touch && event.type === 'mouseenter';\n            });\n          });\n        } // Update controls.pressed state (used for ui.toggleControls to avoid hiding when interacting)\n\n\n        this.bind(elements.controls, 'mousedown mouseup touchstart touchend touchcancel', function (event) {\n          elements.controls.pressed = ['mousedown', 'touchstart'].includes(event.type);\n        }); // Show controls when they receive focus (e.g., when using keyboard tab key)\n\n        this.bind(elements.controls, 'focusin', function () {\n          var config = player.config,\n              timers = player.timers; // Skip transition to prevent focus from scrolling the parent element\n\n          toggleClass(elements.controls, config.classNames.noTransition, true); // Toggle\n\n          ui.toggleControls.call(player, true); // Restore transition\n\n          setTimeout(function () {\n            toggleClass(elements.controls, config.classNames.noTransition, false);\n          }, 0); // Delay a little more for mouse users\n\n          var delay = _this3.touch ? 3000 : 4000; // Clear timer\n\n          clearTimeout(timers.controls); // Hide again after delay\n\n          timers.controls = setTimeout(function () {\n            return ui.toggleControls.call(player, false);\n          }, delay);\n        }); // Mouse wheel for volume\n\n        this.bind(elements.inputs.volume, 'wheel', function (event) {\n          // Detect \"natural\" scroll - suppored on OS X Safari only\n          // Other browsers on OS X will be inverted until support improves\n          var inverted = event.webkitDirectionInvertedFromDevice; // Get delta from event. Invert if `inverted` is true\n\n          var _map = [event.deltaX, -event.deltaY].map(function (value) {\n            return inverted ? -value : value;\n          }),\n              _map2 = _slicedToArray(_map, 2),\n              x = _map2[0],\n              y = _map2[1]; // Using the biggest delta, normalize to 1 or -1 (or 0 if no delta)\n\n\n          var direction = Math.sign(Math.abs(x) > Math.abs(y) ? x : y); // Change the volume by 2%\n\n          player.increaseVolume(direction / 50); // Don't break page scrolling at max and min\n\n          var volume = player.media.volume;\n\n          if (direction === 1 && volume < 1 || direction === -1 && volume > 0) {\n            event.preventDefault();\n          }\n        }, 'volume', false);\n      }\n    }]);\n\n    return Listeners;\n  }();\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var loadjs_umd = createCommonjsModule(function (module, exports) {\n    (function (root, factory) {\n      {\n        module.exports = factory();\n      }\n    })(commonjsGlobal, function () {\n      /**\n       * Global dependencies.\n       * @global {Object} document - DOM\n       */\n      var devnull = function devnull() {},\n          bundleIdCache = {},\n          bundleResultCache = {},\n          bundleCallbackQueue = {};\n      /**\n       * Subscribe to bundle load event.\n       * @param {string[]} bundleIds - Bundle ids\n       * @param {Function} callbackFn - The callback function\n       */\n\n\n      function subscribe(bundleIds, callbackFn) {\n        // listify\n        bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n        var depsNotFound = [],\n            i = bundleIds.length,\n            numWaiting = i,\n            fn,\n            bundleId,\n            r,\n            q; // define callback function\n\n        fn = function fn(bundleId, pathsNotFound) {\n          if (pathsNotFound.length) depsNotFound.push(bundleId);\n          numWaiting--;\n          if (!numWaiting) callbackFn(depsNotFound);\n        }; // register callback\n\n\n        while (i--) {\n          bundleId = bundleIds[i]; // execute callback if in result cache\n\n          r = bundleResultCache[bundleId];\n\n          if (r) {\n            fn(bundleId, r);\n            continue;\n          } // add to callback queue\n\n\n          q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n          q.push(fn);\n        }\n      }\n      /**\n       * Publish bundle load event.\n       * @param {string} bundleId - Bundle id\n       * @param {string[]} pathsNotFound - List of files not found\n       */\n\n\n      function publish(bundleId, pathsNotFound) {\n        // exit if id isn't defined\n        if (!bundleId) return;\n        var q = bundleCallbackQueue[bundleId]; // cache result\n\n        bundleResultCache[bundleId] = pathsNotFound; // exit if queue is empty\n\n        if (!q) return; // empty callback queue\n\n        while (q.length) {\n          q[0](bundleId, pathsNotFound);\n          q.splice(0, 1);\n        }\n      }\n      /**\n       * Execute callbacks.\n       * @param {Object or Function} args - The callback args\n       * @param {string[]} depsNotFound - List of dependencies not found\n       */\n\n\n      function executeCallbacks(args, depsNotFound) {\n        // accept function as argument\n        if (args.call) args = {\n          success: args\n        }; // success and error callbacks\n\n        if (depsNotFound.length) (args.error || devnull)(depsNotFound);else (args.success || devnull)(args);\n      }\n      /**\n       * Load individual file.\n       * @param {string} path - The file path\n       * @param {Function} callbackFn - The callback function\n       */\n\n\n      function loadFile(path, callbackFn, args, numTries) {\n        var doc = document,\n            async = args.async,\n            maxTries = (args.numRetries || 0) + 1,\n            beforeCallbackFn = args.before || devnull,\n            pathname = path.replace(/[\\?|#].*$/, ''),\n            pathStripped = path.replace(/^(css|img)!/, ''),\n            isLegacyIECss,\n            e;\n        numTries = numTries || 0;\n\n        if (/(^css!|\\.css$)/.test(pathname)) {\n          // css\n          e = doc.createElement('link');\n          e.rel = 'stylesheet';\n          e.href = pathStripped; // tag IE9+\n\n          isLegacyIECss = 'hideFocus' in e; // use preload in IE Edge (to detect load errors)\n\n          if (isLegacyIECss && e.relList) {\n            isLegacyIECss = 0;\n            e.rel = 'preload';\n            e.as = 'style';\n          }\n        } else if (/(^img!|\\.(png|gif|jpg|svg|webp)$)/.test(pathname)) {\n          // image\n          e = doc.createElement('img');\n          e.src = pathStripped;\n        } else {\n          // javascript\n          e = doc.createElement('script');\n          e.src = path;\n          e.async = async === undefined ? true : async;\n        }\n\n        e.onload = e.onerror = e.onbeforeload = function (ev) {\n          var result = ev.type[0]; // treat empty stylesheets as failures to get around lack of onerror\n          // support in IE9-11\n\n          if (isLegacyIECss) {\n            try {\n              if (!e.sheet.cssText.length) result = 'e';\n            } catch (x) {\n              // sheets objects created from load errors don't allow access to\n              // `cssText` (unless error is Code:18 SecurityError)\n              if (x.code != 18) result = 'e';\n            }\n          } // handle retries in case of load failure\n\n\n          if (result == 'e') {\n            // increment counter\n            numTries += 1; // exit function and try again\n\n            if (numTries < maxTries) {\n              return loadFile(path, callbackFn, args, numTries);\n            }\n          } else if (e.rel == 'preload' && e.as == 'style') {\n            // activate preloaded stylesheets\n            return e.rel = 'stylesheet'; // jshint ignore:line\n          } // execute callback\n\n\n          callbackFn(path, result, ev.defaultPrevented);\n        }; // add to document (unless callback returns `false`)\n\n\n        if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n      }\n      /**\n       * Load multiple files.\n       * @param {string[]} paths - The file paths\n       * @param {Function} callbackFn - The callback function\n       */\n\n\n      function loadFiles(paths, callbackFn, args) {\n        // listify paths\n        paths = paths.push ? paths : [paths];\n        var numWaiting = paths.length,\n            x = numWaiting,\n            pathsNotFound = [],\n            fn,\n            i; // define callback function\n\n        fn = function fn(path, result, defaultPrevented) {\n          // handle error\n          if (result == 'e') pathsNotFound.push(path); // handle beforeload event. If defaultPrevented then that means the load\n          // will be blocked (ex. Ghostery/ABP on Safari)\n\n          if (result == 'b') {\n            if (defaultPrevented) pathsNotFound.push(path);else return;\n          }\n\n          numWaiting--;\n          if (!numWaiting) callbackFn(pathsNotFound);\n        }; // load scripts\n\n\n        for (i = 0; i < x; i++) {\n          loadFile(paths[i], fn, args);\n        }\n      }\n      /**\n       * Initiate script load and register bundle.\n       * @param {(string|string[])} paths - The file paths\n       * @param {(string|Function|Object)} [arg1] - The (1) bundleId or (2) success\n       *   callback or (3) object literal with success/error arguments, numRetries,\n       *   etc.\n       * @param {(Function|Object)} [arg2] - The (1) success callback or (2) object\n       *   literal with success/error arguments, numRetries, etc.\n       */\n\n\n      function loadjs(paths, arg1, arg2) {\n        var bundleId, args; // bundleId (if string)\n\n        if (arg1 && arg1.trim) bundleId = arg1; // args (default is {})\n\n        args = (bundleId ? arg2 : arg1) || {}; // throw error if bundle is already defined\n\n        if (bundleId) {\n          if (bundleId in bundleIdCache) {\n            throw \"LoadJS\";\n          } else {\n            bundleIdCache[bundleId] = true;\n          }\n        }\n\n        function loadFn(resolve, reject) {\n          loadFiles(paths, function (pathsNotFound) {\n            // execute callbacks\n            executeCallbacks(args, pathsNotFound); // resolve Promise\n\n            if (resolve) {\n              executeCallbacks({\n                success: resolve,\n                error: reject\n              }, pathsNotFound);\n            } // publish bundle load event\n\n\n            publish(bundleId, pathsNotFound);\n          }, args);\n        }\n\n        if (args.returnPromise) return new Promise(loadFn);else loadFn();\n      }\n      /**\n       * Execute callbacks when dependencies have been satisfied.\n       * @param {(string|string[])} deps - List of bundle ids\n       * @param {Object} args - success/error arguments\n       */\n\n\n      loadjs.ready = function ready(deps, args) {\n        // subscribe to bundle load event\n        subscribe(deps, function (depsNotFound) {\n          // execute callbacks\n          executeCallbacks(args, depsNotFound);\n        });\n        return loadjs;\n      };\n      /**\n       * Manually satisfy bundle dependencies.\n       * @param {string} bundleId - The bundle id\n       */\n\n\n      loadjs.done = function done(bundleId) {\n        publish(bundleId, []);\n      };\n      /**\n       * Reset loadjs dependencies statuses\n       */\n\n\n      loadjs.reset = function reset() {\n        bundleIdCache = {};\n        bundleResultCache = {};\n        bundleCallbackQueue = {};\n      };\n      /**\n       * Determine if bundle has already been defined\n       * @param String} bundleId - The bundle id\n       */\n\n\n      loadjs.isDefined = function isDefined(bundleId) {\n        return bundleId in bundleIdCache;\n      }; // export\n\n\n      return loadjs;\n    });\n  });\n\n  // ==========================================================================\n  function loadScript(url) {\n    return new Promise(function (resolve, reject) {\n      loadjs_umd(url, {\n        success: resolve,\n        error: reject\n      });\n    });\n  }\n\n  function parseId(url) {\n    if (is$1.empty(url)) {\n      return null;\n    }\n\n    if (is$1.number(Number(url))) {\n      return url;\n    }\n\n    var regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n    return url.match(regex) ? RegExp.$2 : url;\n  } // Set playback state and trigger change (only on actual change)\n\n\n  function assurePlaybackState(play) {\n    if (play && !this.embed.hasPlayed) {\n      this.embed.hasPlayed = true;\n    }\n\n    if (this.media.paused === play) {\n      this.media.paused = !play;\n      triggerEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n  }\n\n  var vimeo = {\n    setup: function setup() {\n      var player = this; // Add embed class for responsive\n\n      toggleClass(player.elements.wrapper, player.config.classNames.embed, true); // Set speed options from config\n\n      player.options.speed = player.config.speed.options; // Set intial ratio\n\n      setAspectRatio.call(player); // Load the SDK if not already\n\n      if (!is$1.object(window.Vimeo)) {\n        loadScript(player.config.urls.vimeo.sdk).then(function () {\n          vimeo.ready.call(player);\n        }).catch(function (error) {\n          player.debug.warn('Vimeo SDK (player.js) failed to load', error);\n        });\n      } else {\n        vimeo.ready.call(player);\n      }\n    },\n    // API Ready\n    ready: function ready() {\n      var _this = this;\n\n      var player = this;\n      var config = player.config.vimeo;\n\n      var premium = config.premium,\n          referrerPolicy = config.referrerPolicy,\n          frameParams = _objectWithoutProperties(config, [\"premium\", \"referrerPolicy\"]); // If the owner has a pro or premium account then we can hide controls etc\n\n\n      if (premium) {\n        Object.assign(frameParams, {\n          controls: false,\n          sidedock: false\n        });\n      } // Get Vimeo params for the iframe\n\n\n      var params = buildUrlParams(_objectSpread2({\n        loop: player.config.loop.active,\n        autoplay: player.autoplay,\n        muted: player.muted,\n        gesture: 'media',\n        playsinline: !this.config.fullscreen.iosNative\n      }, frameParams)); // Get the source URL or ID\n\n      var source = player.media.getAttribute('src'); // Get from <div> if needed\n\n      if (is$1.empty(source)) {\n        source = player.media.getAttribute(player.config.attributes.embed.id);\n      }\n\n      var id = parseId(source); // Build an iframe\n\n      var iframe = createElement('iframe');\n      var src = format(player.config.urls.vimeo.iframe, id, params);\n      iframe.setAttribute('src', src);\n      iframe.setAttribute('allowfullscreen', '');\n      iframe.setAttribute('allow', 'autoplay,fullscreen,picture-in-picture'); // Set the referrer policy if required\n\n      if (!is$1.empty(referrerPolicy)) {\n        iframe.setAttribute('referrerPolicy', referrerPolicy);\n      } // Inject the package\n\n\n      if (premium || !config.customControls) {\n        iframe.setAttribute('data-poster', player.poster);\n        player.media = replaceElement(iframe, player.media);\n      } else {\n        var wrapper = createElement('div', {\n          class: player.config.classNames.embedContainer,\n          'data-poster': player.poster\n        });\n        wrapper.appendChild(iframe);\n        player.media = replaceElement(wrapper, player.media);\n      } // Get poster image\n\n\n      if (!config.customControls) {\n        fetch(format(player.config.urls.vimeo.api, src)).then(function (response) {\n          if (is$1.empty(response) || !response.thumbnail_url) {\n            return;\n          } // Set and show poster\n\n\n          ui.setPoster.call(player, response.thumbnail_url).catch(function () {});\n        });\n      } // Setup instance\n      // https://github.com/vimeo/player.js\n\n\n      player.embed = new window.Vimeo.Player(iframe, {\n        autopause: player.config.autopause,\n        muted: player.muted\n      });\n      player.media.paused = true;\n      player.media.currentTime = 0; // Disable native text track rendering\n\n      if (player.supported.ui) {\n        player.embed.disableTextTrack();\n      } // Create a faux HTML5 API using the Vimeo API\n\n\n      player.media.play = function () {\n        assurePlaybackState.call(player, true);\n        return player.embed.play();\n      };\n\n      player.media.pause = function () {\n        assurePlaybackState.call(player, false);\n        return player.embed.pause();\n      };\n\n      player.media.stop = function () {\n        player.pause();\n        player.currentTime = 0;\n      }; // Seeking\n\n\n      var currentTime = player.media.currentTime;\n      Object.defineProperty(player.media, 'currentTime', {\n        get: function get() {\n          return currentTime;\n        },\n        set: function set(time) {\n          // Vimeo will automatically play on seek if the video hasn't been played before\n          // Get current paused state and volume etc\n          var embed = player.embed,\n              media = player.media,\n              paused = player.paused,\n              volume = player.volume;\n          var restorePause = paused && !embed.hasPlayed; // Set seeking state and trigger event\n\n          media.seeking = true;\n          triggerEvent.call(player, media, 'seeking'); // If paused, mute until seek is complete\n\n          Promise.resolve(restorePause && embed.setVolume(0)) // Seek\n          .then(function () {\n            return embed.setCurrentTime(time);\n          }) // Restore paused\n          .then(function () {\n            return restorePause && embed.pause();\n          }) // Restore volume\n          .then(function () {\n            return restorePause && embed.setVolume(volume);\n          }).catch(function () {// Do nothing\n          });\n        }\n      }); // Playback speed\n\n      var speed = player.config.speed.selected;\n      Object.defineProperty(player.media, 'playbackRate', {\n        get: function get() {\n          return speed;\n        },\n        set: function set(input) {\n          player.embed.setPlaybackRate(input).then(function () {\n            speed = input;\n            triggerEvent.call(player, player.media, 'ratechange');\n          }).catch(function () {\n            // Cannot set Playback Rate, Video is probably not on Pro account\n            player.options.speed = [1];\n          });\n        }\n      }); // Volume\n\n      var volume = player.config.volume;\n      Object.defineProperty(player.media, 'volume', {\n        get: function get() {\n          return volume;\n        },\n        set: function set(input) {\n          player.embed.setVolume(input).then(function () {\n            volume = input;\n            triggerEvent.call(player, player.media, 'volumechange');\n          });\n        }\n      }); // Muted\n\n      var muted = player.config.muted;\n      Object.defineProperty(player.media, 'muted', {\n        get: function get() {\n          return muted;\n        },\n        set: function set(input) {\n          var toggle = is$1.boolean(input) ? input : false;\n          player.embed.setVolume(toggle ? 0 : player.config.volume).then(function () {\n            muted = toggle;\n            triggerEvent.call(player, player.media, 'volumechange');\n          });\n        }\n      }); // Loop\n\n      var loop = player.config.loop;\n      Object.defineProperty(player.media, 'loop', {\n        get: function get() {\n          return loop;\n        },\n        set: function set(input) {\n          var toggle = is$1.boolean(input) ? input : player.config.loop.active;\n          player.embed.setLoop(toggle).then(function () {\n            loop = toggle;\n          });\n        }\n      }); // Source\n\n      var currentSrc;\n      player.embed.getVideoUrl().then(function (value) {\n        currentSrc = value;\n        controls.setDownloadUrl.call(player);\n      }).catch(function (error) {\n        _this.debug.warn(error);\n      });\n      Object.defineProperty(player.media, 'currentSrc', {\n        get: function get() {\n          return currentSrc;\n        }\n      }); // Ended\n\n      Object.defineProperty(player.media, 'ended', {\n        get: function get() {\n          return player.currentTime === player.duration;\n        }\n      }); // Set aspect ratio based on video size\n\n      Promise.all([player.embed.getVideoWidth(), player.embed.getVideoHeight()]).then(function (dimensions) {\n        var _dimensions = _slicedToArray(dimensions, 2),\n            width = _dimensions[0],\n            height = _dimensions[1];\n\n        player.embed.ratio = [width, height];\n        setAspectRatio.call(_this);\n      }); // Set autopause\n\n      player.embed.setAutopause(player.config.autopause).then(function (state) {\n        player.config.autopause = state;\n      }); // Get title\n\n      player.embed.getVideoTitle().then(function (title) {\n        player.config.title = title;\n        ui.setTitle.call(_this);\n      }); // Get current time\n\n      player.embed.getCurrentTime().then(function (value) {\n        currentTime = value;\n        triggerEvent.call(player, player.media, 'timeupdate');\n      }); // Get duration\n\n      player.embed.getDuration().then(function (value) {\n        player.media.duration = value;\n        triggerEvent.call(player, player.media, 'durationchange');\n      }); // Get captions\n\n      player.embed.getTextTracks().then(function (tracks) {\n        player.media.textTracks = tracks;\n        captions.setup.call(player);\n      });\n      player.embed.on('cuechange', function (_ref) {\n        var _ref$cues = _ref.cues,\n            cues = _ref$cues === void 0 ? [] : _ref$cues;\n        var strippedCues = cues.map(function (cue) {\n          return stripHTML(cue.text);\n        });\n        captions.updateCues.call(player, strippedCues);\n      });\n      player.embed.on('loaded', function () {\n        // Assure state and events are updated on autoplay\n        player.embed.getPaused().then(function (paused) {\n          assurePlaybackState.call(player, !paused);\n\n          if (!paused) {\n            triggerEvent.call(player, player.media, 'playing');\n          }\n        });\n\n        if (is$1.element(player.embed.element) && player.supported.ui) {\n          var frame = player.embed.element; // Fix keyboard focus issues\n          // https://github.com/sampotts/plyr/issues/317\n\n          frame.setAttribute('tabindex', -1);\n        }\n      });\n      player.embed.on('bufferstart', function () {\n        triggerEvent.call(player, player.media, 'waiting');\n      });\n      player.embed.on('bufferend', function () {\n        triggerEvent.call(player, player.media, 'playing');\n      });\n      player.embed.on('play', function () {\n        assurePlaybackState.call(player, true);\n        triggerEvent.call(player, player.media, 'playing');\n      });\n      player.embed.on('pause', function () {\n        assurePlaybackState.call(player, false);\n      });\n      player.embed.on('timeupdate', function (data) {\n        player.media.seeking = false;\n        currentTime = data.seconds;\n        triggerEvent.call(player, player.media, 'timeupdate');\n      });\n      player.embed.on('progress', function (data) {\n        player.media.buffered = data.percent;\n        triggerEvent.call(player, player.media, 'progress'); // Check all loaded\n\n        if (parseInt(data.percent, 10) === 1) {\n          triggerEvent.call(player, player.media, 'canplaythrough');\n        } // Get duration as if we do it before load, it gives an incorrect value\n        // https://github.com/sampotts/plyr/issues/891\n\n\n        player.embed.getDuration().then(function (value) {\n          if (value !== player.media.duration) {\n            player.media.duration = value;\n            triggerEvent.call(player, player.media, 'durationchange');\n          }\n        });\n      });\n      player.embed.on('seeked', function () {\n        player.media.seeking = false;\n        triggerEvent.call(player, player.media, 'seeked');\n      });\n      player.embed.on('ended', function () {\n        player.media.paused = true;\n        triggerEvent.call(player, player.media, 'ended');\n      });\n      player.embed.on('error', function (detail) {\n        player.media.error = detail;\n        triggerEvent.call(player, player.media, 'error');\n      }); // Rebuild UI\n\n      if (config.customControls) {\n        setTimeout(function () {\n          return ui.build.call(player);\n        }, 0);\n      }\n    }\n  };\n\n  // ==========================================================================\n\n  function parseId$1(url) {\n    if (is$1.empty(url)) {\n      return null;\n    }\n\n    var regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    return url.match(regex) ? RegExp.$2 : url;\n  } // Set playback state and trigger change (only on actual change)\n\n\n  function assurePlaybackState$1(play) {\n    if (play && !this.embed.hasPlayed) {\n      this.embed.hasPlayed = true;\n    }\n\n    if (this.media.paused === play) {\n      this.media.paused = !play;\n      triggerEvent.call(this, this.media, play ? 'play' : 'pause');\n    }\n  }\n\n  function getHost(config) {\n    if (config.noCookie) {\n      return 'https://www.youtube-nocookie.com';\n    }\n\n    if (window.location.protocol === 'http:') {\n      return 'http://www.youtube.com';\n    } // Use YouTube's default\n\n\n    return undefined;\n  }\n\n  var youtube = {\n    setup: function setup() {\n      var _this = this;\n\n      // Add embed class for responsive\n      toggleClass(this.elements.wrapper, this.config.classNames.embed, true); // Setup API\n\n      if (is$1.object(window.YT) && is$1.function(window.YT.Player)) {\n        youtube.ready.call(this);\n      } else {\n        // Reference current global callback\n        var callback = window.onYouTubeIframeAPIReady; // Set callback to process queue\n\n        window.onYouTubeIframeAPIReady = function () {\n          // Call global callback if set\n          if (is$1.function(callback)) {\n            callback();\n          }\n\n          youtube.ready.call(_this);\n        }; // Load the SDK\n\n\n        loadScript(this.config.urls.youtube.sdk).catch(function (error) {\n          _this.debug.warn('YouTube API failed to load', error);\n        });\n      }\n    },\n    // Get the media title\n    getTitle: function getTitle(videoId) {\n      var _this2 = this;\n\n      var url = format(this.config.urls.youtube.api, videoId);\n      fetch(url).then(function (data) {\n        if (is$1.object(data)) {\n          var title = data.title,\n              height = data.height,\n              width = data.width; // Set title\n\n          _this2.config.title = title;\n          ui.setTitle.call(_this2); // Set aspect ratio\n\n          _this2.embed.ratio = [width, height];\n        }\n\n        setAspectRatio.call(_this2);\n      }).catch(function () {\n        // Set aspect ratio\n        setAspectRatio.call(_this2);\n      });\n    },\n    // API ready\n    ready: function ready() {\n      var player = this;\n      var config = player.config.youtube; // Ignore already setup (race condition)\n\n      var currentId = player.media && player.media.getAttribute('id');\n\n      if (!is$1.empty(currentId) && currentId.startsWith('youtube-')) {\n        return;\n      } // Get the source URL or ID\n\n\n      var source = player.media.getAttribute('src'); // Get from <div> if needed\n\n      if (is$1.empty(source)) {\n        source = player.media.getAttribute(this.config.attributes.embed.id);\n      } // Replace the <iframe> with a <div> due to YouTube API issues\n\n\n      var videoId = parseId$1(source);\n      var id = generateId(player.provider); // Replace media element\n\n      var container = createElement('div', {\n        id: id,\n        'data-poster': config.customControls ? player.poster : undefined\n      });\n      player.media = replaceElement(container, player.media); // Only load the poster when using custom controls\n\n      if (config.customControls) {\n        var posterSrc = function posterSrc(s) {\n          return \"https://i.ytimg.com/vi/\".concat(videoId, \"/\").concat(s, \"default.jpg\");\n        }; // Check thumbnail images in order of quality, but reject fallback thumbnails (120px wide)\n\n\n        loadImage(posterSrc('maxres'), 121) // Higest quality and unpadded\n        .catch(function () {\n          return loadImage(posterSrc('sd'), 121);\n        }) // 480p padded 4:3\n        .catch(function () {\n          return loadImage(posterSrc('hq'));\n        }) // 360p padded 4:3. Always exists\n        .then(function (image) {\n          return ui.setPoster.call(player, image.src);\n        }).then(function (src) {\n          // If the image is padded, use background-size \"cover\" instead (like youtube does too with their posters)\n          if (!src.includes('maxres')) {\n            player.elements.poster.style.backgroundSize = 'cover';\n          }\n        }).catch(function () {});\n      } // Setup instance\n      // https://developers.google.com/youtube/iframe_api_reference\n\n\n      player.embed = new window.YT.Player(player.media, {\n        videoId: videoId,\n        host: getHost(config),\n        playerVars: extend({}, {\n          // Autoplay\n          autoplay: player.config.autoplay ? 1 : 0,\n          // iframe interface language\n          hl: player.config.hl,\n          // Only show controls if not fully supported or opted out\n          controls: player.supported.ui && config.customControls ? 0 : 1,\n          // Disable keyboard as we handle it\n          disablekb: 1,\n          // Allow iOS inline playback\n          playsinline: !player.config.fullscreen.iosNative ? 1 : 0,\n          // Captions are flaky on YouTube\n          cc_load_policy: player.captions.active ? 1 : 0,\n          cc_lang_pref: player.config.captions.language,\n          // Tracking for stats\n          widget_referrer: window ? window.location.href : null\n        }, config),\n        events: {\n          onError: function onError(event) {\n            // YouTube may fire onError twice, so only handle it once\n            if (!player.media.error) {\n              var code = event.data; // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n\n              var message = {\n                2: 'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.',\n                5: 'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.',\n                100: 'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.',\n                101: 'The owner of the requested video does not allow it to be played in embedded players.',\n                150: 'The owner of the requested video does not allow it to be played in embedded players.'\n              }[code] || 'An unknown error occured';\n              player.media.error = {\n                code: code,\n                message: message\n              };\n              triggerEvent.call(player, player.media, 'error');\n            }\n          },\n          onPlaybackRateChange: function onPlaybackRateChange(event) {\n            // Get the instance\n            var instance = event.target; // Get current speed\n\n            player.media.playbackRate = instance.getPlaybackRate();\n            triggerEvent.call(player, player.media, 'ratechange');\n          },\n          onReady: function onReady(event) {\n            // Bail if onReady has already been called. See issue #1108\n            if (is$1.function(player.media.play)) {\n              return;\n            } // Get the instance\n\n\n            var instance = event.target; // Get the title\n\n            youtube.getTitle.call(player, videoId); // Create a faux HTML5 API using the YouTube API\n\n            player.media.play = function () {\n              assurePlaybackState$1.call(player, true);\n              instance.playVideo();\n            };\n\n            player.media.pause = function () {\n              assurePlaybackState$1.call(player, false);\n              instance.pauseVideo();\n            };\n\n            player.media.stop = function () {\n              instance.stopVideo();\n            };\n\n            player.media.duration = instance.getDuration();\n            player.media.paused = true; // Seeking\n\n            player.media.currentTime = 0;\n            Object.defineProperty(player.media, 'currentTime', {\n              get: function get() {\n                return Number(instance.getCurrentTime());\n              },\n              set: function set(time) {\n                // If paused and never played, mute audio preventively (YouTube starts playing on seek if the video hasn't been played yet).\n                if (player.paused && !player.embed.hasPlayed) {\n                  player.embed.mute();\n                } // Set seeking state and trigger event\n\n\n                player.media.seeking = true;\n                triggerEvent.call(player, player.media, 'seeking'); // Seek after events sent\n\n                instance.seekTo(time);\n              }\n            }); // Playback speed\n\n            Object.defineProperty(player.media, 'playbackRate', {\n              get: function get() {\n                return instance.getPlaybackRate();\n              },\n              set: function set(input) {\n                instance.setPlaybackRate(input);\n              }\n            }); // Volume\n\n            var volume = player.config.volume;\n            Object.defineProperty(player.media, 'volume', {\n              get: function get() {\n                return volume;\n              },\n              set: function set(input) {\n                volume = input;\n                instance.setVolume(volume * 100);\n                triggerEvent.call(player, player.media, 'volumechange');\n              }\n            }); // Muted\n\n            var muted = player.config.muted;\n            Object.defineProperty(player.media, 'muted', {\n              get: function get() {\n                return muted;\n              },\n              set: function set(input) {\n                var toggle = is$1.boolean(input) ? input : muted;\n                muted = toggle;\n                instance[toggle ? 'mute' : 'unMute']();\n                instance.setVolume(volume * 100);\n                triggerEvent.call(player, player.media, 'volumechange');\n              }\n            }); // Source\n\n            Object.defineProperty(player.media, 'currentSrc', {\n              get: function get() {\n                return instance.getVideoUrl();\n              }\n            }); // Ended\n\n            Object.defineProperty(player.media, 'ended', {\n              get: function get() {\n                return player.currentTime === player.duration;\n              }\n            }); // Get available speeds\n\n            var speeds = instance.getAvailablePlaybackRates(); // Filter based on config\n\n            player.options.speed = speeds.filter(function (s) {\n              return player.config.speed.options.includes(s);\n            }); // Set the tabindex to avoid focus entering iframe\n\n            if (player.supported.ui && config.customControls) {\n              player.media.setAttribute('tabindex', -1);\n            }\n\n            triggerEvent.call(player, player.media, 'timeupdate');\n            triggerEvent.call(player, player.media, 'durationchange'); // Reset timer\n\n            clearInterval(player.timers.buffering); // Setup buffering\n\n            player.timers.buffering = setInterval(function () {\n              // Get loaded % from YouTube\n              player.media.buffered = instance.getVideoLoadedFraction(); // Trigger progress only when we actually buffer something\n\n              if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                triggerEvent.call(player, player.media, 'progress');\n              } // Set last buffer point\n\n\n              player.media.lastBuffered = player.media.buffered; // Bail if we're at 100%\n\n              if (player.media.buffered === 1) {\n                clearInterval(player.timers.buffering); // Trigger event\n\n                triggerEvent.call(player, player.media, 'canplaythrough');\n              }\n            }, 200); // Rebuild UI\n\n            if (config.customControls) {\n              setTimeout(function () {\n                return ui.build.call(player);\n              }, 50);\n            }\n          },\n          onStateChange: function onStateChange(event) {\n            // Get the instance\n            var instance = event.target; // Reset timer\n\n            clearInterval(player.timers.playing);\n            var seeked = player.media.seeking && [1, 2].includes(event.data);\n\n            if (seeked) {\n              // Unset seeking and fire seeked event\n              player.media.seeking = false;\n              triggerEvent.call(player, player.media, 'seeked');\n            } // Handle events\n            // -1   Unstarted\n            // 0    Ended\n            // 1    Playing\n            // 2    Paused\n            // 3    Buffering\n            // 5    Video cued\n\n\n            switch (event.data) {\n              case -1:\n                // Update scrubber\n                triggerEvent.call(player, player.media, 'timeupdate'); // Get loaded % from YouTube\n\n                player.media.buffered = instance.getVideoLoadedFraction();\n                triggerEvent.call(player, player.media, 'progress');\n                break;\n\n              case 0:\n                assurePlaybackState$1.call(player, false); // YouTube doesn't support loop for a single video, so mimick it.\n\n                if (player.media.loop) {\n                  // YouTube needs a call to `stopVideo` before playing again\n                  instance.stopVideo();\n                  instance.playVideo();\n                } else {\n                  triggerEvent.call(player, player.media, 'ended');\n                }\n\n                break;\n\n              case 1:\n                // Restore paused state (YouTube starts playing on seek if the video hasn't been played yet)\n                if (config.customControls && !player.config.autoplay && player.media.paused && !player.embed.hasPlayed) {\n                  player.media.pause();\n                } else {\n                  assurePlaybackState$1.call(player, true);\n                  triggerEvent.call(player, player.media, 'playing'); // Poll to get playback progress\n\n                  player.timers.playing = setInterval(function () {\n                    triggerEvent.call(player, player.media, 'timeupdate');\n                  }, 50); // Check duration again due to YouTube bug\n                  // https://github.com/sampotts/plyr/issues/374\n                  // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n\n                  if (player.media.duration !== instance.getDuration()) {\n                    player.media.duration = instance.getDuration();\n                    triggerEvent.call(player, player.media, 'durationchange');\n                  }\n                }\n\n                break;\n\n              case 2:\n                // Restore audio (YouTube starts playing on seek if the video hasn't been played yet)\n                if (!player.muted) {\n                  player.embed.unMute();\n                }\n\n                assurePlaybackState$1.call(player, false);\n                break;\n\n              case 3:\n                // Trigger waiting event to add loading classes to container as the video buffers.\n                triggerEvent.call(player, player.media, 'waiting');\n                break;\n            }\n\n            triggerEvent.call(player, player.elements.container, 'statechange', false, {\n              code: event.data\n            });\n          }\n        }\n      });\n    }\n  };\n\n  // ==========================================================================\n  var media = {\n    // Setup media\n    setup: function setup() {\n      // If there's no media, bail\n      if (!this.media) {\n        this.debug.warn('No media element found!');\n        return;\n      } // Add type class\n\n\n      toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true); // Add provider class\n\n      toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true); // Add video class for embeds\n      // This will require changes if audio embeds are added\n\n      if (this.isEmbed) {\n        toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n      } // Inject the player wrapper\n\n\n      if (this.isVideo) {\n        // Create the wrapper div\n        this.elements.wrapper = createElement('div', {\n          class: this.config.classNames.video\n        }); // Wrap the video in a container\n\n        wrap(this.media, this.elements.wrapper); // Poster image container\n\n        this.elements.poster = createElement('div', {\n          class: this.config.classNames.poster,\n          hidden: ''\n        });\n        this.elements.wrapper.appendChild(this.elements.poster);\n      }\n\n      if (this.isHTML5) {\n        html5.setup.call(this);\n      } else if (this.isYouTube) {\n        youtube.setup.call(this);\n      } else if (this.isVimeo) {\n        vimeo.setup.call(this);\n      }\n    }\n  };\n\n  var destroy = function destroy(instance) {\n    // Destroy our adsManager\n    if (instance.manager) {\n      instance.manager.destroy();\n    } // Destroy our adsManager\n\n\n    if (instance.elements.displayContainer) {\n      instance.elements.displayContainer.destroy();\n    }\n\n    instance.elements.container.remove();\n  };\n\n  var Ads = /*#__PURE__*/function () {\n    /**\n     * Ads constructor.\n     * @param {Object} player\n     * @return {Ads}\n     */\n    function Ads(player) {\n      var _this = this;\n\n      _classCallCheck(this, Ads);\n\n      this.player = player;\n      this.config = player.config.ads;\n      this.playing = false;\n      this.initialized = false;\n      this.elements = {\n        container: null,\n        displayContainer: null\n      };\n      this.manager = null;\n      this.loader = null;\n      this.cuePoints = null;\n      this.events = {};\n      this.safetyTimer = null;\n      this.countdownTimer = null; // Setup a promise to resolve when the IMA manager is ready\n\n      this.managerPromise = new Promise(function (resolve, reject) {\n        // The ad is loaded and ready\n        _this.on('loaded', resolve); // Ads failed\n\n\n        _this.on('error', reject);\n      });\n      this.load();\n    }\n\n    _createClass(Ads, [{\n      key: \"load\",\n\n      /**\n       * Load the IMA SDK\n       */\n      value: function load() {\n        var _this2 = this;\n\n        if (!this.enabled) {\n          return;\n        } // Check if the Google IMA3 SDK is loaded or load it ourselves\n\n\n        if (!is$1.object(window.google) || !is$1.object(window.google.ima)) {\n          loadScript(this.player.config.urls.googleIMA.sdk).then(function () {\n            _this2.ready();\n          }).catch(function () {\n            // Script failed to load or is blocked\n            _this2.trigger('error', new Error('Google IMA SDK failed to load'));\n          });\n        } else {\n          this.ready();\n        }\n      }\n      /**\n       * Get the ads instance ready\n       */\n\n    }, {\n      key: \"ready\",\n      value: function ready() {\n        var _this3 = this;\n\n        // Double check we're enabled\n        if (!this.enabled) {\n          destroy(this);\n        } // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n\n\n        this.startSafetyTimer(12000, 'ready()'); // Clear the safety timer\n\n        this.managerPromise.then(function () {\n          _this3.clearSafetyTimer('onAdsManagerLoaded()');\n        }); // Set listeners on the Plyr instance\n\n        this.listeners(); // Setup the IMA SDK\n\n        this.setupIMA();\n      } // Build the tag URL\n\n    }, {\n      key: \"setupIMA\",\n\n      /**\n       * In order for the SDK to display ads for our video, we need to tell it where to put them,\n       * so here we define our ad container. This div is set up to render on top of the video player.\n       * Using the code below, we tell the SDK to render ads within that div. We also provide a\n       * handle to the content video player - the SDK will poll the current time of our player to\n       * properly place mid-rolls. After we create the ad display container, we initialize it. On\n       * mobile devices, this initialization is done as the result of a user action.\n       */\n      value: function setupIMA() {\n        var _this4 = this;\n\n        // Create the container for our advertisements\n        this.elements.container = createElement('div', {\n          class: this.player.config.classNames.ads\n        });\n        this.player.elements.container.appendChild(this.elements.container); // So we can run VPAID2\n\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED); // Set language\n\n        google.ima.settings.setLocale(this.player.config.ads.language); // Set playback for iOS10+\n\n        google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.player.config.playsinline); // We assume the adContainer is the video container of the plyr element that will house the ads\n\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container, this.player.media); // Create ads loader\n\n        this.loader = new google.ima.AdsLoader(this.elements.displayContainer); // Listen and respond to ads loaded and error events\n\n        this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, function (event) {\n          return _this4.onAdsManagerLoaded(event);\n        }, false);\n        this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, function (error) {\n          return _this4.onAdError(error);\n        }, false); // Request video ads to be pre-loaded\n\n        this.requestAds();\n      }\n      /**\n       * Request advertisements\n       */\n\n    }, {\n      key: \"requestAds\",\n      value: function requestAds() {\n        var container = this.player.elements.container;\n\n        try {\n          // Request video ads\n          var request = new google.ima.AdsRequest();\n          request.adTagUrl = this.tagUrl; // Specify the linear and nonlinear slot sizes. This helps the SDK\n          // to select the correct creative if multiple are returned\n\n          request.linearAdSlotWidth = container.offsetWidth;\n          request.linearAdSlotHeight = container.offsetHeight;\n          request.nonLinearAdSlotWidth = container.offsetWidth;\n          request.nonLinearAdSlotHeight = container.offsetHeight; // We only overlay ads as we only support video.\n\n          request.forceNonLinearFullSlot = false; // Mute based on current state\n\n          request.setAdWillPlayMuted(!this.player.muted);\n          this.loader.requestAds(request);\n        } catch (e) {\n          this.onAdError(e);\n        }\n      }\n      /**\n       * Update the ad countdown\n       * @param {Boolean} start\n       */\n\n    }, {\n      key: \"pollCountdown\",\n      value: function pollCountdown() {\n        var _this5 = this;\n\n        var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (!start) {\n          clearInterval(this.countdownTimer);\n          this.elements.container.removeAttribute('data-badge-text');\n          return;\n        }\n\n        var update = function update() {\n          var time = formatTime(Math.max(_this5.manager.getRemainingTime(), 0));\n          var label = \"\".concat(i18n.get('advertisement', _this5.player.config), \" - \").concat(time);\n\n          _this5.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n      }\n      /**\n       * This method is called whenever the ads are ready inside the AdDisplayContainer\n       * @param {Event} adsManagerLoadedEvent\n       */\n\n    }, {\n      key: \"onAdsManagerLoaded\",\n      value: function onAdsManagerLoaded(event) {\n        var _this6 = this;\n\n        // Load could occur after a source change (race condition)\n        if (!this.enabled) {\n          return;\n        } // Get the ads manager\n\n\n        var settings = new google.ima.AdsRenderingSettings(); // Tell the SDK to save and restore content video state on our behalf\n\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true; // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n\n        this.manager = event.getAdsManager(this.player, settings); // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n\n        this.cuePoints = this.manager.getCuePoints(); // Add listeners to the required events\n        // Advertisement error events\n\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, function (error) {\n          return _this6.onAdError(error);\n        }); // Advertisement regular events\n\n        Object.keys(google.ima.AdEvent.Type).forEach(function (type) {\n          _this6.manager.addEventListener(google.ima.AdEvent.Type[type], function (e) {\n            return _this6.onAdEvent(e);\n          });\n        }); // Resolve our adsManager\n\n        this.trigger('loaded');\n      }\n    }, {\n      key: \"addCuePoints\",\n      value: function addCuePoints() {\n        var _this7 = this;\n\n        // Add advertisement cue's within the time line if available\n        if (!is$1.empty(this.cuePoints)) {\n          this.cuePoints.forEach(function (cuePoint) {\n            if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < _this7.player.duration) {\n              var seekElement = _this7.player.elements.progress;\n\n              if (is$1.element(seekElement)) {\n                var cuePercentage = 100 / _this7.player.duration * cuePoint;\n                var cue = createElement('span', {\n                  class: _this7.player.config.classNames.cues\n                });\n                cue.style.left = \"\".concat(cuePercentage.toString(), \"%\");\n                seekElement.appendChild(cue);\n              }\n            }\n          });\n        }\n      }\n      /**\n       * This is where all the event handling takes place. Retrieve the ad from the event. Some\n       * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n       * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n       * @param {Event} event\n       */\n\n    }, {\n      key: \"onAdEvent\",\n      value: function onAdEvent(event) {\n        var _this8 = this;\n\n        var container = this.player.elements.container; // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n\n        var ad = event.getAd();\n        var adData = event.getAdData(); // Proxy event\n\n        var dispatchEvent = function dispatchEvent(type) {\n          triggerEvent.call(_this8.player, _this8.player.media, \"ads\".concat(type.replace(/_/g, '').toLowerCase()));\n        }; // Bubble the event\n\n\n        dispatchEvent(event.type);\n\n        switch (event.type) {\n          case google.ima.AdEvent.Type.LOADED:\n            // This is the first event sent for an ad - it is possible to determine whether the\n            // ad is a video ad or an overlay\n            this.trigger('loaded'); // Start countdown\n\n            this.pollCountdown(true);\n\n            if (!ad.isLinear()) {\n              // Position AdDisplayContainer correctly for overlay\n              ad.width = container.offsetWidth;\n              ad.height = container.offsetHeight;\n            } // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n            // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n\n\n            break;\n\n          case google.ima.AdEvent.Type.STARTED:\n            // Set volume to match player\n            this.manager.setVolume(this.player.volume);\n            break;\n\n          case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n            // All ads for the current videos are done. We can now request new advertisements\n            // in case the video is re-played\n            // TODO: Example for what happens when a next video in a playlist would be loaded.\n            // So here we load a new video when all ads are done.\n            // Then we load new ads within a new adsManager. When the video\n            // Is started - after - the ads are loaded, then we get ads.\n            // You can also easily test cancelling and reloading by running\n            // player.ads.cancel() and player.ads.play from the console I guess.\n            // this.player.source = {\n            //     type: 'video',\n            //     title: 'View From A Blue Moon',\n            //     sources: [{\n            //         src:\n            // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n            // 'video/mp4', }], poster:\n            // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n            // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n            // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n            // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n            // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n            // };\n            // TODO: So there is still this thing where a video should only be allowed to start\n            // playing when the IMA SDK is ready or has failed\n            if (this.player.ended) {\n              this.loadAds();\n            } else {\n              // The SDK won't allow new ads to be called without receiving a contentComplete()\n              this.loader.contentComplete();\n            }\n\n            break;\n\n          case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n            // This event indicates the ad has started - the video player can adjust the UI,\n            // for example display a pause button and remaining time. Fired when content should\n            // be paused. This usually happens right before an ad is about to cover the content\n            this.pauseContent();\n            break;\n\n          case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n            // This event indicates the ad has finished - the video player can perform\n            // appropriate UI actions, such as removing the timer for remaining time detection.\n            // Fired when content should be resumed. This usually happens when an ad finishes\n            // or collapses\n            this.pollCountdown();\n            this.resumeContent();\n            break;\n\n          case google.ima.AdEvent.Type.LOG:\n            if (adData.adError) {\n              this.player.debug.warn(\"Non-fatal ad error: \".concat(adData.adError.getMessage()));\n            }\n\n            break;\n        }\n      }\n      /**\n       * Any ad error handling comes through here\n       * @param {Event} event\n       */\n\n    }, {\n      key: \"onAdError\",\n      value: function onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n      }\n      /**\n       * Setup hooks for Plyr and window events. This ensures\n       * the mid- and post-roll launch at the correct time. And\n       * resize the advertisement when the player resizes\n       */\n\n    }, {\n      key: \"listeners\",\n      value: function listeners() {\n        var _this9 = this;\n\n        var container = this.player.elements.container;\n        var time;\n        this.player.on('canplay', function () {\n          _this9.addCuePoints();\n        });\n        this.player.on('ended', function () {\n          _this9.loader.contentComplete();\n        });\n        this.player.on('timeupdate', function () {\n          time = _this9.player.currentTime;\n        });\n        this.player.on('seeked', function () {\n          var seekedTime = _this9.player.currentTime;\n\n          if (is$1.empty(_this9.cuePoints)) {\n            return;\n          }\n\n          _this9.cuePoints.forEach(function (cuePoint, index) {\n            if (time < cuePoint && cuePoint < seekedTime) {\n              _this9.manager.discardAdBreak();\n\n              _this9.cuePoints.splice(index, 1);\n            }\n          });\n        }); // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n\n        window.addEventListener('resize', function () {\n          if (_this9.manager) {\n            _this9.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n          }\n        });\n      }\n      /**\n       * Initialize the adsManager and start playing advertisements\n       */\n\n    }, {\n      key: \"play\",\n      value: function play() {\n        var _this10 = this;\n\n        var container = this.player.elements.container;\n\n        if (!this.managerPromise) {\n          this.resumeContent();\n        } // Play the requested advertisement whenever the adsManager is ready\n\n\n        this.managerPromise.then(function () {\n          // Set volume to match player\n          _this10.manager.setVolume(_this10.player.volume); // Initialize the container. Must be done via a user action on mobile devices\n\n\n          _this10.elements.displayContainer.initialize();\n\n          try {\n            if (!_this10.initialized) {\n              // Initialize the ads manager. Ad rules playlist will start at this time\n              _this10.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL); // Call play to start showing the ad. Single video and overlay ads will\n              // start at this time; the call will be ignored for ad rules\n\n\n              _this10.manager.start();\n            }\n\n            _this10.initialized = true;\n          } catch (adError) {\n            // An error may be thrown if there was a problem with the\n            // VAST response\n            _this10.onAdError(adError);\n          }\n        }).catch(function () {});\n      }\n      /**\n       * Resume our video\n       */\n\n    }, {\n      key: \"resumeContent\",\n      value: function resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = ''; // Ad is stopped\n\n        this.playing = false; // Play video\n\n        silencePromise(this.player.media.play());\n      }\n      /**\n       * Pause our video\n       */\n\n    }, {\n      key: \"pauseContent\",\n      value: function pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3; // Ad is playing\n\n        this.playing = true; // Pause our video.\n\n        this.player.media.pause();\n      }\n      /**\n       * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n       * allowed to call new ads based on google policies, as they interpret this as an accidental\n       * video requests. https://developers.google.com/interactive-\n       * media-ads/docs/sdks/android/faq#8\n       */\n\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        // Pause our video\n        if (this.initialized) {\n          this.resumeContent();\n        } // Tell our instance that we're done for now\n\n\n        this.trigger('error'); // Re-create our adsManager\n\n        this.loadAds();\n      }\n      /**\n       * Re-create our adsManager\n       */\n\n    }, {\n      key: \"loadAds\",\n      value: function loadAds() {\n        var _this11 = this;\n\n        // Tell our adsManager to go bye bye\n        this.managerPromise.then(function () {\n          // Destroy our adsManager\n          if (_this11.manager) {\n            _this11.manager.destroy();\n          } // Re-set our adsManager promises\n\n\n          _this11.managerPromise = new Promise(function (resolve) {\n            _this11.on('loaded', resolve);\n\n            _this11.player.debug.log(_this11.manager);\n          }); // Now that the manager has been destroyed set it to also be un-initialized\n\n          _this11.initialized = false; // Now request some new advertisements\n\n          _this11.requestAds();\n        }).catch(function () {});\n      }\n      /**\n       * Handles callbacks after an ad event was invoked\n       * @param {String} event - Event type\n       */\n\n    }, {\n      key: \"trigger\",\n      value: function trigger(event) {\n        var _this12 = this;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var handlers = this.events[event];\n\n        if (is$1.array(handlers)) {\n          handlers.forEach(function (handler) {\n            if (is$1.function(handler)) {\n              handler.apply(_this12, args);\n            }\n          });\n        }\n      }\n      /**\n       * Add event listeners\n       * @param {String} event - Event type\n       * @param {Function} callback - Callback for when event occurs\n       * @return {Ads}\n       */\n\n    }, {\n      key: \"on\",\n      value: function on(event, callback) {\n        if (!is$1.array(this.events[event])) {\n          this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n        return this;\n      }\n      /**\n       * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n       * The advertisement has 12 seconds to get its things together. We stop this timer when the\n       * advertisement is playing, or when a user action is required to start, then we clear the\n       * timer on ad ready\n       * @param {Number} time\n       * @param {String} from\n       */\n\n    }, {\n      key: \"startSafetyTimer\",\n      value: function startSafetyTimer(time, from) {\n        var _this13 = this;\n\n        this.player.debug.log(\"Safety timer invoked from: \".concat(from));\n        this.safetyTimer = setTimeout(function () {\n          _this13.cancel();\n\n          _this13.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n      }\n      /**\n       * Clear our safety timer(s)\n       * @param {String} from\n       */\n\n    }, {\n      key: \"clearSafetyTimer\",\n      value: function clearSafetyTimer(from) {\n        if (!is$1.nullOrUndefined(this.safetyTimer)) {\n          this.player.debug.log(\"Safety timer cleared from: \".concat(from));\n          clearTimeout(this.safetyTimer);\n          this.safetyTimer = null;\n        }\n      }\n    }, {\n      key: \"enabled\",\n      get: function get() {\n        var config = this.config;\n        return this.player.isHTML5 && this.player.isVideo && config.enabled && (!is$1.empty(config.publisherId) || is$1.url(config.tagUrl));\n      }\n    }, {\n      key: \"tagUrl\",\n      get: function get() {\n        var config = this.config;\n\n        if (is$1.url(config.tagUrl)) {\n          return config.tagUrl;\n        }\n\n        var params = {\n          AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n          AV_CHANNELID: '5a0458dc28a06145e4519d21',\n          AV_URL: window.location.hostname,\n          cb: Date.now(),\n          AV_WIDTH: 640,\n          AV_HEIGHT: 480,\n          AV_CDIM2: config.publisherId\n        };\n        var base = 'https://go.aniview.com/api/adserver6/vast/';\n        return \"\".concat(base, \"?\").concat(buildUrlParams(params));\n      }\n    }]);\n\n    return Ads;\n  }();\n\n  var parseVtt = function parseVtt(vttDataString) {\n    var processedList = [];\n    var frames = vttDataString.split(/\\r\\n\\r\\n|\\n\\n|\\r\\r/);\n    frames.forEach(function (frame) {\n      var result = {};\n      var lines = frame.split(/\\r\\n|\\n|\\r/);\n      lines.forEach(function (line) {\n        if (!is$1.number(result.startTime)) {\n          // The line with start and end times on it is the first line of interest\n          var matchTimes = line.match(/([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})( ?--> ?)([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})/); // Note that this currently ignores caption formatting directives that are optionally on the end of this line - fine for non-captions VTT\n\n          if (matchTimes) {\n            result.startTime = Number(matchTimes[1] || 0) * 60 * 60 + Number(matchTimes[2]) * 60 + Number(matchTimes[3]) + Number(\"0.\".concat(matchTimes[4]));\n            result.endTime = Number(matchTimes[6] || 0) * 60 * 60 + Number(matchTimes[7]) * 60 + Number(matchTimes[8]) + Number(\"0.\".concat(matchTimes[9]));\n          }\n        } else if (!is$1.empty(line.trim()) && is$1.empty(result.text)) {\n          // If we already have the startTime, then we're definitely up to the text line(s)\n          var lineSplit = line.trim().split('#xywh=');\n\n          var _lineSplit = _slicedToArray(lineSplit, 1);\n\n          result.text = _lineSplit[0];\n\n          // If there's content in lineSplit[1], then we have sprites. If not, then it's just one frame per image\n          if (lineSplit[1]) {\n            var _lineSplit$1$split = lineSplit[1].split(',');\n\n            var _lineSplit$1$split2 = _slicedToArray(_lineSplit$1$split, 4);\n\n            result.x = _lineSplit$1$split2[0];\n            result.y = _lineSplit$1$split2[1];\n            result.w = _lineSplit$1$split2[2];\n            result.h = _lineSplit$1$split2[3];\n          }\n        }\n      });\n\n      if (result.text) {\n        processedList.push(result);\n      }\n    });\n    return processedList;\n  };\n  /**\n   * Preview thumbnails for seek hover and scrubbing\n   * Seeking: Hover over the seek bar (desktop only): shows a small preview container above the seek bar\n   * Scrubbing: Click and drag the seek bar (desktop and mobile): shows the preview image over the entire video, as if the video is scrubbing at very high speed\n   *\n   * Notes:\n   * - Thumbs are set via JS settings on Plyr init, not HTML5 'track' property. Using the track property would be a bit gross, because it doesn't support custom 'kinds'. kind=metadata might be used for something else, and we want to allow multiple thumbnails tracks. Tracks must have a unique combination of 'kind' and 'label'. We would have to do something like kind=metadata,label=thumbnails1 / kind=metadata,label=thumbnails2. Square peg, round hole\n   * - VTT info: the image URL is relative to the VTT, not the current document. But if the url starts with a slash, it will naturally be relative to the current domain. https://support.jwplayer.com/articles/how-to-add-preview-thumbnails\n   * - This implementation uses multiple separate img elements. Other implementations use background-image on one element. This would be nice and simple, but Firefox and Safari have flickering issues with replacing backgrounds of larger images. It seems that YouTube perhaps only avoids this because they don't have the option for high-res previews (even the fullscreen ones, when mousedown/seeking). Images appear over the top of each other, and previous ones are discarded once the new ones have been rendered\n   */\n\n\n  var fitRatio = function fitRatio(ratio, outer) {\n    var targetRatio = outer.width / outer.height;\n    var result = {};\n\n    if (ratio > targetRatio) {\n      result.width = outer.width;\n      result.height = 1 / ratio * outer.width;\n    } else {\n      result.height = outer.height;\n      result.width = ratio * outer.height;\n    }\n\n    return result;\n  };\n\n  var PreviewThumbnails = /*#__PURE__*/function () {\n    /**\n     * PreviewThumbnails constructor.\n     * @param {Plyr} player\n     * @return {PreviewThumbnails}\n     */\n    function PreviewThumbnails(player) {\n      _classCallCheck(this, PreviewThumbnails);\n\n      this.player = player;\n      this.thumbnails = [];\n      this.loaded = false;\n      this.lastMouseMoveTime = Date.now();\n      this.mouseDown = false;\n      this.loadedImages = [];\n      this.elements = {\n        thumb: {},\n        scrubbing: {}\n      };\n      this.load();\n    }\n\n    _createClass(PreviewThumbnails, [{\n      key: \"load\",\n      value: function load() {\n        var _this = this;\n\n        // Toggle the regular seek tooltip\n        if (this.player.elements.display.seekTooltip) {\n          this.player.elements.display.seekTooltip.hidden = this.enabled;\n        }\n\n        if (!this.enabled) {\n          return;\n        }\n\n        this.getThumbnails().then(function () {\n          if (!_this.enabled) {\n            return;\n          } // Render DOM elements\n\n\n          _this.render(); // Check to see if thumb container size was specified manually in CSS\n\n\n          _this.determineContainerAutoSizing();\n\n          _this.loaded = true;\n        });\n      } // Download VTT files and parse them\n\n    }, {\n      key: \"getThumbnails\",\n      value: function getThumbnails() {\n        var _this2 = this;\n\n        return new Promise(function (resolve) {\n          var src = _this2.player.config.previewThumbnails.src;\n\n          if (is$1.empty(src)) {\n            throw new Error('Missing previewThumbnails.src config attribute');\n          } // Resolve promise\n\n\n          var sortAndResolve = function sortAndResolve() {\n            // Sort smallest to biggest (e.g., [120p, 480p, 1080p])\n            _this2.thumbnails.sort(function (x, y) {\n              return x.height - y.height;\n            });\n\n            _this2.player.debug.log('Preview thumbnails', _this2.thumbnails);\n\n            resolve();\n          }; // Via callback()\n\n\n          if (is$1.function(src)) {\n            src(function (thumbnails) {\n              _this2.thumbnails = thumbnails;\n              sortAndResolve();\n            });\n          } // VTT urls\n          else {\n              // If string, convert into single-element list\n              var urls = is$1.string(src) ? [src] : src; // Loop through each src URL. Download and process the VTT file, storing the resulting data in this.thumbnails\n\n              var promises = urls.map(function (u) {\n                return _this2.getThumbnail(u);\n              }); // Resolve\n\n              Promise.all(promises).then(sortAndResolve);\n            }\n        });\n      } // Process individual VTT file\n\n    }, {\n      key: \"getThumbnail\",\n      value: function getThumbnail(url) {\n        var _this3 = this;\n\n        return new Promise(function (resolve) {\n          fetch(url).then(function (response) {\n            var thumbnail = {\n              frames: parseVtt(response),\n              height: null,\n              urlPrefix: ''\n            }; // If the URLs don't start with '/', then we need to set their relative path to be the location of the VTT file\n            // If the URLs do start with '/', then they obviously don't need a prefix, so it will remain blank\n            // If the thumbnail URLs start with with none of '/', 'http://' or 'https://', then we need to set their relative path to be the location of the VTT file\n\n            if (!thumbnail.frames[0].text.startsWith('/') && !thumbnail.frames[0].text.startsWith('http://') && !thumbnail.frames[0].text.startsWith('https://')) {\n              thumbnail.urlPrefix = url.substring(0, url.lastIndexOf('/') + 1);\n            } // Download the first frame, so that we can determine/set the height of this thumbnailsDef\n\n\n            var tempImage = new Image();\n\n            tempImage.onload = function () {\n              thumbnail.height = tempImage.naturalHeight;\n              thumbnail.width = tempImage.naturalWidth;\n\n              _this3.thumbnails.push(thumbnail);\n\n              resolve();\n            };\n\n            tempImage.src = thumbnail.urlPrefix + thumbnail.frames[0].text;\n          });\n        });\n      }\n    }, {\n      key: \"startMove\",\n      value: function startMove(event) {\n        if (!this.loaded) {\n          return;\n        }\n\n        if (!is$1.event(event) || !['touchmove', 'mousemove'].includes(event.type)) {\n          return;\n        } // Wait until media has a duration\n\n\n        if (!this.player.media.duration) {\n          return;\n        }\n\n        if (event.type === 'touchmove') {\n          // Calculate seek hover position as approx video seconds\n          this.seekTime = this.player.media.duration * (this.player.elements.inputs.seek.value / 100);\n        } else {\n          // Calculate seek hover position as approx video seconds\n          var clientRect = this.player.elements.progress.getBoundingClientRect();\n          var percentage = 100 / clientRect.width * (event.pageX - clientRect.left);\n          this.seekTime = this.player.media.duration * (percentage / 100);\n\n          if (this.seekTime < 0) {\n            // The mousemove fires for 10+px out to the left\n            this.seekTime = 0;\n          }\n\n          if (this.seekTime > this.player.media.duration - 1) {\n            // Took 1 second off the duration for safety, because different players can disagree on the real duration of a video\n            this.seekTime = this.player.media.duration - 1;\n          }\n\n          this.mousePosX = event.pageX; // Set time text inside image container\n\n          this.elements.thumb.time.innerText = formatTime(this.seekTime);\n        } // Download and show image\n\n\n        this.showImageAtCurrentTime();\n      }\n    }, {\n      key: \"endMove\",\n      value: function endMove() {\n        this.toggleThumbContainer(false, true);\n      }\n    }, {\n      key: \"startScrubbing\",\n      value: function startScrubbing(event) {\n        // Only act on left mouse button (0), or touch device (event.button does not exist or is false)\n        if (is$1.nullOrUndefined(event.button) || event.button === false || event.button === 0) {\n          this.mouseDown = true; // Wait until media has a duration\n\n          if (this.player.media.duration) {\n            this.toggleScrubbingContainer(true);\n            this.toggleThumbContainer(false, true); // Download and show image\n\n            this.showImageAtCurrentTime();\n          }\n        }\n      }\n    }, {\n      key: \"endScrubbing\",\n      value: function endScrubbing() {\n        var _this4 = this;\n\n        this.mouseDown = false; // Hide scrubbing preview. But wait until the video has successfully seeked before hiding the scrubbing preview\n\n        if (Math.ceil(this.lastTime) === Math.ceil(this.player.media.currentTime)) {\n          // The video was already seeked/loaded at the chosen time - hide immediately\n          this.toggleScrubbingContainer(false);\n        } else {\n          // The video hasn't seeked yet. Wait for that\n          once.call(this.player, this.player.media, 'timeupdate', function () {\n            // Re-check mousedown - we might have already started scrubbing again\n            if (!_this4.mouseDown) {\n              _this4.toggleScrubbingContainer(false);\n            }\n          });\n        }\n      }\n      /**\n       * Setup hooks for Plyr and window events\n       */\n\n    }, {\n      key: \"listeners\",\n      value: function listeners() {\n        var _this5 = this;\n\n        // Hide thumbnail preview - on mouse click, mouse leave (in listeners.js for now), and video play/seek. All four are required, e.g., for buffering\n        this.player.on('play', function () {\n          _this5.toggleThumbContainer(false, true);\n        });\n        this.player.on('seeked', function () {\n          _this5.toggleThumbContainer(false);\n        });\n        this.player.on('timeupdate', function () {\n          _this5.lastTime = _this5.player.media.currentTime;\n        });\n      }\n      /**\n       * Create HTML elements for image containers\n       */\n\n    }, {\n      key: \"render\",\n      value: function render() {\n        // Create HTML element: plyr__preview-thumbnail-container\n        this.elements.thumb.container = createElement('div', {\n          class: this.player.config.classNames.previewThumbnails.thumbContainer\n        }); // Wrapper for the image for styling\n\n        this.elements.thumb.imageContainer = createElement('div', {\n          class: this.player.config.classNames.previewThumbnails.imageContainer\n        });\n        this.elements.thumb.container.appendChild(this.elements.thumb.imageContainer); // Create HTML element, parent+span: time text (e.g., 01:32:00)\n\n        var timeContainer = createElement('div', {\n          class: this.player.config.classNames.previewThumbnails.timeContainer\n        });\n        this.elements.thumb.time = createElement('span', {}, '00:00');\n        timeContainer.appendChild(this.elements.thumb.time);\n        this.elements.thumb.container.appendChild(timeContainer); // Inject the whole thumb\n\n        if (is$1.element(this.player.elements.progress)) {\n          this.player.elements.progress.appendChild(this.elements.thumb.container);\n        } // Create HTML element: plyr__preview-scrubbing-container\n\n\n        this.elements.scrubbing.container = createElement('div', {\n          class: this.player.config.classNames.previewThumbnails.scrubbingContainer\n        });\n        this.player.elements.wrapper.appendChild(this.elements.scrubbing.container);\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        if (this.elements.thumb.container) {\n          this.elements.thumb.container.remove();\n        }\n\n        if (this.elements.scrubbing.container) {\n          this.elements.scrubbing.container.remove();\n        }\n      }\n    }, {\n      key: \"showImageAtCurrentTime\",\n      value: function showImageAtCurrentTime() {\n        var _this6 = this;\n\n        if (this.mouseDown) {\n          this.setScrubbingContainerSize();\n        } else {\n          this.setThumbContainerSizeAndPos();\n        } // Find the desired thumbnail index\n        // TODO: Handle a video longer than the thumbs where thumbNum is null\n\n\n        var thumbNum = this.thumbnails[0].frames.findIndex(function (frame) {\n          return _this6.seekTime >= frame.startTime && _this6.seekTime <= frame.endTime;\n        });\n        var hasThumb = thumbNum >= 0;\n        var qualityIndex = 0; // Show the thumb container if we're not scrubbing\n\n        if (!this.mouseDown) {\n          this.toggleThumbContainer(hasThumb);\n        } // No matching thumb found\n\n\n        if (!hasThumb) {\n          return;\n        } // Check to see if we've already downloaded higher quality versions of this image\n\n\n        this.thumbnails.forEach(function (thumbnail, index) {\n          if (_this6.loadedImages.includes(thumbnail.frames[thumbNum].text)) {\n            qualityIndex = index;\n          }\n        }); // Only proceed if either thumbnum or thumbfilename has changed\n\n        if (thumbNum !== this.showingThumb) {\n          this.showingThumb = thumbNum;\n          this.loadImage(qualityIndex);\n        }\n      } // Show the image that's currently specified in this.showingThumb\n\n    }, {\n      key: \"loadImage\",\n      value: function loadImage() {\n        var _this7 = this;\n\n        var qualityIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var thumbNum = this.showingThumb;\n        var thumbnail = this.thumbnails[qualityIndex];\n        var urlPrefix = thumbnail.urlPrefix;\n        var frame = thumbnail.frames[thumbNum];\n        var thumbFilename = thumbnail.frames[thumbNum].text;\n        var thumbUrl = urlPrefix + thumbFilename;\n\n        if (!this.currentImageElement || this.currentImageElement.dataset.filename !== thumbFilename) {\n          // If we're already loading a previous image, remove its onload handler - we don't want it to load after this one\n          // Only do this if not using sprites. Without sprites we really want to show as many images as possible, as a best-effort\n          if (this.loadingImage && this.usingSprites) {\n            this.loadingImage.onload = null;\n          } // We're building and adding a new image. In other implementations of similar functionality (YouTube), background image\n          // is instead used. But this causes issues with larger images in Firefox and Safari - switching between background\n          // images causes a flicker. Putting a new image over the top does not\n\n\n          var previewImage = new Image();\n          previewImage.src = thumbUrl;\n          previewImage.dataset.index = thumbNum;\n          previewImage.dataset.filename = thumbFilename;\n          this.showingThumbFilename = thumbFilename;\n          this.player.debug.log(\"Loading image: \".concat(thumbUrl)); // For some reason, passing the named function directly causes it to execute immediately. So I've wrapped it in an anonymous function...\n\n          previewImage.onload = function () {\n            return _this7.showImage(previewImage, frame, qualityIndex, thumbNum, thumbFilename, true);\n          };\n\n          this.loadingImage = previewImage;\n          this.removeOldImages(previewImage);\n        } else {\n          // Update the existing image\n          this.showImage(this.currentImageElement, frame, qualityIndex, thumbNum, thumbFilename, false);\n          this.currentImageElement.dataset.index = thumbNum;\n          this.removeOldImages(this.currentImageElement);\n        }\n      }\n    }, {\n      key: \"showImage\",\n      value: function showImage(previewImage, frame, qualityIndex, thumbNum, thumbFilename) {\n        var newImage = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        this.player.debug.log(\"Showing thumb: \".concat(thumbFilename, \". num: \").concat(thumbNum, \". qual: \").concat(qualityIndex, \". newimg: \").concat(newImage));\n        this.setImageSizeAndOffset(previewImage, frame);\n\n        if (newImage) {\n          this.currentImageContainer.appendChild(previewImage);\n          this.currentImageElement = previewImage;\n\n          if (!this.loadedImages.includes(thumbFilename)) {\n            this.loadedImages.push(thumbFilename);\n          }\n        } // Preload images before and after the current one\n        // Show higher quality of the same frame\n        // Each step here has a short time delay, and only continues if still hovering/seeking the same spot. This is to protect slow connections from overloading\n\n\n        this.preloadNearby(thumbNum, true).then(this.preloadNearby(thumbNum, false)).then(this.getHigherQuality(qualityIndex, previewImage, frame, thumbFilename));\n      } // Remove all preview images that aren't the designated current image\n\n    }, {\n      key: \"removeOldImages\",\n      value: function removeOldImages(currentImage) {\n        var _this8 = this;\n\n        // Get a list of all images, convert it from a DOM list to an array\n        Array.from(this.currentImageContainer.children).forEach(function (image) {\n          if (image.tagName.toLowerCase() !== 'img') {\n            return;\n          }\n\n          var removeDelay = _this8.usingSprites ? 500 : 1000;\n\n          if (image.dataset.index !== currentImage.dataset.index && !image.dataset.deleting) {\n            // Wait 200ms, as the new image can take some time to show on certain browsers (even though it was downloaded before showing). This will prevent flicker, and show some generosity towards slower clients\n            // First set attribute 'deleting' to prevent multi-handling of this on repeat firing of this function\n            // eslint-disable-next-line no-param-reassign\n            image.dataset.deleting = true; // This has to be set before the timeout - to prevent issues switching between hover and scrub\n\n            var currentImageContainer = _this8.currentImageContainer;\n            setTimeout(function () {\n              currentImageContainer.removeChild(image);\n\n              _this8.player.debug.log(\"Removing thumb: \".concat(image.dataset.filename));\n            }, removeDelay);\n          }\n        });\n      } // Preload images before and after the current one. Only if the user is still hovering/seeking the same frame\n      // This will only preload the lowest quality\n\n    }, {\n      key: \"preloadNearby\",\n      value: function preloadNearby(thumbNum) {\n        var _this9 = this;\n\n        var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            var oldThumbFilename = _this9.thumbnails[0].frames[thumbNum].text;\n\n            if (_this9.showingThumbFilename === oldThumbFilename) {\n              // Find the nearest thumbs with different filenames. Sometimes it'll be the next index, but in the case of sprites, it might be 100+ away\n              var thumbnailsClone;\n\n              if (forward) {\n                thumbnailsClone = _this9.thumbnails[0].frames.slice(thumbNum);\n              } else {\n                thumbnailsClone = _this9.thumbnails[0].frames.slice(0, thumbNum).reverse();\n              }\n\n              var foundOne = false;\n              thumbnailsClone.forEach(function (frame) {\n                var newThumbFilename = frame.text;\n\n                if (newThumbFilename !== oldThumbFilename) {\n                  // Found one with a different filename. Make sure it hasn't already been loaded on this page visit\n                  if (!_this9.loadedImages.includes(newThumbFilename)) {\n                    foundOne = true;\n\n                    _this9.player.debug.log(\"Preloading thumb filename: \".concat(newThumbFilename));\n\n                    var urlPrefix = _this9.thumbnails[0].urlPrefix;\n                    var thumbURL = urlPrefix + newThumbFilename;\n                    var previewImage = new Image();\n                    previewImage.src = thumbURL;\n\n                    previewImage.onload = function () {\n                      _this9.player.debug.log(\"Preloaded thumb filename: \".concat(newThumbFilename));\n\n                      if (!_this9.loadedImages.includes(newThumbFilename)) _this9.loadedImages.push(newThumbFilename); // We don't resolve until the thumb is loaded\n\n                      resolve();\n                    };\n                  }\n                }\n              }); // If there are none to preload then we want to resolve immediately\n\n              if (!foundOne) {\n                resolve();\n              }\n            }\n          }, 300);\n        });\n      } // If user has been hovering current image for half a second, look for a higher quality one\n\n    }, {\n      key: \"getHigherQuality\",\n      value: function getHigherQuality(currentQualityIndex, previewImage, frame, thumbFilename) {\n        var _this10 = this;\n\n        if (currentQualityIndex < this.thumbnails.length - 1) {\n          // Only use the higher quality version if it's going to look any better - if the current thumb is of a lower pixel density than the thumbnail container\n          var previewImageHeight = previewImage.naturalHeight;\n\n          if (this.usingSprites) {\n            previewImageHeight = frame.h;\n          }\n\n          if (previewImageHeight < this.thumbContainerHeight) {\n            // Recurse back to the loadImage function - show a higher quality one, but only if the viewer is on this frame for a while\n            setTimeout(function () {\n              // Make sure the mouse hasn't already moved on and started hovering at another image\n              if (_this10.showingThumbFilename === thumbFilename) {\n                _this10.player.debug.log(\"Showing higher quality thumb for: \".concat(thumbFilename));\n\n                _this10.loadImage(currentQualityIndex + 1);\n              }\n            }, 300);\n          }\n        }\n      }\n    }, {\n      key: \"toggleThumbContainer\",\n      value: function toggleThumbContainer() {\n        var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var clearShowing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var className = this.player.config.classNames.previewThumbnails.thumbContainerShown;\n        this.elements.thumb.container.classList.toggle(className, toggle);\n\n        if (!toggle && clearShowing) {\n          this.showingThumb = null;\n          this.showingThumbFilename = null;\n        }\n      }\n    }, {\n      key: \"toggleScrubbingContainer\",\n      value: function toggleScrubbingContainer() {\n        var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var className = this.player.config.classNames.previewThumbnails.scrubbingContainerShown;\n        this.elements.scrubbing.container.classList.toggle(className, toggle);\n\n        if (!toggle) {\n          this.showingThumb = null;\n          this.showingThumbFilename = null;\n        }\n      }\n    }, {\n      key: \"determineContainerAutoSizing\",\n      value: function determineContainerAutoSizing() {\n        if (this.elements.thumb.imageContainer.clientHeight > 20 || this.elements.thumb.imageContainer.clientWidth > 20) {\n          // This will prevent auto sizing in this.setThumbContainerSizeAndPos()\n          this.sizeSpecifiedInCSS = true;\n        }\n      } // Set the size to be about a quarter of the size of video. Unless option dynamicSize === false, in which case it needs to be set in CSS\n\n    }, {\n      key: \"setThumbContainerSizeAndPos\",\n      value: function setThumbContainerSizeAndPos() {\n        if (!this.sizeSpecifiedInCSS) {\n          var thumbWidth = Math.floor(this.thumbContainerHeight * this.thumbAspectRatio);\n          this.elements.thumb.imageContainer.style.height = \"\".concat(this.thumbContainerHeight, \"px\");\n          this.elements.thumb.imageContainer.style.width = \"\".concat(thumbWidth, \"px\");\n        } else if (this.elements.thumb.imageContainer.clientHeight > 20 && this.elements.thumb.imageContainer.clientWidth < 20) {\n          var _thumbWidth = Math.floor(this.elements.thumb.imageContainer.clientHeight * this.thumbAspectRatio);\n\n          this.elements.thumb.imageContainer.style.width = \"\".concat(_thumbWidth, \"px\");\n        } else if (this.elements.thumb.imageContainer.clientHeight < 20 && this.elements.thumb.imageContainer.clientWidth > 20) {\n          var thumbHeight = Math.floor(this.elements.thumb.imageContainer.clientWidth / this.thumbAspectRatio);\n          this.elements.thumb.imageContainer.style.height = \"\".concat(thumbHeight, \"px\");\n        }\n\n        this.setThumbContainerPos();\n      }\n    }, {\n      key: \"setThumbContainerPos\",\n      value: function setThumbContainerPos() {\n        var seekbarRect = this.player.elements.progress.getBoundingClientRect();\n        var plyrRect = this.player.elements.container.getBoundingClientRect();\n        var container = this.elements.thumb.container; // Find the lowest and highest desired left-position, so we don't slide out the side of the video container\n\n        var minVal = plyrRect.left - seekbarRect.left + 10;\n        var maxVal = plyrRect.right - seekbarRect.left - container.clientWidth - 10; // Set preview container position to: mousepos, minus seekbar.left, minus half of previewContainer.clientWidth\n\n        var previewPos = this.mousePosX - seekbarRect.left - container.clientWidth / 2;\n\n        if (previewPos < minVal) {\n          previewPos = minVal;\n        }\n\n        if (previewPos > maxVal) {\n          previewPos = maxVal;\n        }\n\n        container.style.left = \"\".concat(previewPos, \"px\");\n      } // Can't use 100% width, in case the video is a different aspect ratio to the video container\n\n    }, {\n      key: \"setScrubbingContainerSize\",\n      value: function setScrubbingContainerSize() {\n        var _fitRatio = fitRatio(this.thumbAspectRatio, {\n          width: this.player.media.clientWidth,\n          height: this.player.media.clientHeight\n        }),\n            width = _fitRatio.width,\n            height = _fitRatio.height;\n\n        this.elements.scrubbing.container.style.width = \"\".concat(width, \"px\");\n        this.elements.scrubbing.container.style.height = \"\".concat(height, \"px\");\n      } // Sprites need to be offset to the correct location\n\n    }, {\n      key: \"setImageSizeAndOffset\",\n      value: function setImageSizeAndOffset(previewImage, frame) {\n        if (!this.usingSprites) {\n          return;\n        } // Find difference between height and preview container height\n\n\n        var multiplier = this.thumbContainerHeight / frame.h; // eslint-disable-next-line no-param-reassign\n\n        previewImage.style.height = \"\".concat(previewImage.naturalHeight * multiplier, \"px\"); // eslint-disable-next-line no-param-reassign\n\n        previewImage.style.width = \"\".concat(previewImage.naturalWidth * multiplier, \"px\"); // eslint-disable-next-line no-param-reassign\n\n        previewImage.style.left = \"-\".concat(frame.x * multiplier, \"px\"); // eslint-disable-next-line no-param-reassign\n\n        previewImage.style.top = \"-\".concat(frame.y * multiplier, \"px\");\n      }\n    }, {\n      key: \"enabled\",\n      get: function get() {\n        return this.player.isHTML5 && this.player.isVideo && this.player.config.previewThumbnails.enabled;\n      }\n    }, {\n      key: \"currentImageContainer\",\n      get: function get() {\n        if (this.mouseDown) {\n          return this.elements.scrubbing.container;\n        }\n\n        return this.elements.thumb.imageContainer;\n      }\n    }, {\n      key: \"usingSprites\",\n      get: function get() {\n        return Object.keys(this.thumbnails[0].frames[0]).includes('w');\n      }\n    }, {\n      key: \"thumbAspectRatio\",\n      get: function get() {\n        if (this.usingSprites) {\n          return this.thumbnails[0].frames[0].w / this.thumbnails[0].frames[0].h;\n        }\n\n        return this.thumbnails[0].width / this.thumbnails[0].height;\n      }\n    }, {\n      key: \"thumbContainerHeight\",\n      get: function get() {\n        if (this.mouseDown) {\n          var _fitRatio2 = fitRatio(this.thumbAspectRatio, {\n            width: this.player.media.clientWidth,\n            height: this.player.media.clientHeight\n          }),\n              height = _fitRatio2.height;\n\n          return height;\n        } // If css is used this needs to return the css height for sprites to work (see setImageSizeAndOffset)\n\n\n        if (this.sizeSpecifiedInCSS) {\n          return this.elements.thumb.imageContainer.clientHeight;\n        }\n\n        return Math.floor(this.player.media.clientWidth / this.thumbAspectRatio / 4);\n      }\n    }, {\n      key: \"currentImageElement\",\n      get: function get() {\n        if (this.mouseDown) {\n          return this.currentScrubbingImageElement;\n        }\n\n        return this.currentThumbnailImageElement;\n      },\n      set: function set(element) {\n        if (this.mouseDown) {\n          this.currentScrubbingImageElement = element;\n        } else {\n          this.currentThumbnailImageElement = element;\n        }\n      }\n    }]);\n\n    return PreviewThumbnails;\n  }();\n\n  var source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements: function insertElements(type, attributes) {\n      var _this = this;\n\n      if (is$1.string(attributes)) {\n        insertElement(type, this.media, {\n          src: attributes\n        });\n      } else if (is$1.array(attributes)) {\n        attributes.forEach(function (attribute) {\n          insertElement(type, _this.media, attribute);\n        });\n      }\n    },\n    // Update source\n    // Sources are not checked for support so be careful\n    change: function change(input) {\n      var _this2 = this;\n\n      if (!getDeep(input, 'sources.length')) {\n        this.debug.warn('Invalid source format');\n        return;\n      } // Cancel current network requests\n\n\n      html5.cancelRequests.call(this); // Destroy instance and re-setup\n\n      this.destroy.call(this, function () {\n        // Reset quality options\n        _this2.options.quality = []; // Remove elements\n\n        removeElement(_this2.media);\n        _this2.media = null; // Reset class name\n\n        if (is$1.element(_this2.elements.container)) {\n          _this2.elements.container.removeAttribute('class');\n        } // Set the type and provider\n\n\n        var sources = input.sources,\n            type = input.type;\n\n        var _sources = _slicedToArray(sources, 1),\n            _sources$ = _sources[0],\n            _sources$$provider = _sources$.provider,\n            provider = _sources$$provider === void 0 ? providers.html5 : _sources$$provider,\n            src = _sources$.src;\n\n        var tagName = provider === 'html5' ? type : 'div';\n        var attributes = provider === 'html5' ? {} : {\n          src: src\n        };\n        Object.assign(_this2, {\n          provider: provider,\n          type: type,\n          // Check for support\n          supported: support.check(type, provider, _this2.config.playsinline),\n          // Create new element\n          media: createElement(tagName, attributes)\n        }); // Inject the new element\n\n        _this2.elements.container.appendChild(_this2.media); // Autoplay the new source?\n\n\n        if (is$1.boolean(input.autoplay)) {\n          _this2.config.autoplay = input.autoplay;\n        } // Set attributes for audio and video\n\n\n        if (_this2.isHTML5) {\n          if (_this2.config.crossorigin) {\n            _this2.media.setAttribute('crossorigin', '');\n          }\n\n          if (_this2.config.autoplay) {\n            _this2.media.setAttribute('autoplay', '');\n          }\n\n          if (!is$1.empty(input.poster)) {\n            _this2.poster = input.poster;\n          }\n\n          if (_this2.config.loop.active) {\n            _this2.media.setAttribute('loop', '');\n          }\n\n          if (_this2.config.muted) {\n            _this2.media.setAttribute('muted', '');\n          }\n\n          if (_this2.config.playsinline) {\n            _this2.media.setAttribute('playsinline', '');\n          }\n        } // Restore class hook\n\n\n        ui.addStyleHook.call(_this2); // Set new sources for html5\n\n        if (_this2.isHTML5) {\n          source.insertElements.call(_this2, 'source', sources);\n        } // Set video title\n\n\n        _this2.config.title = input.title; // Set up from scratch\n\n        media.setup.call(_this2); // HTML5 stuff\n\n        if (_this2.isHTML5) {\n          // Setup captions\n          if (Object.keys(input).includes('tracks')) {\n            source.insertElements.call(_this2, 'track', input.tracks);\n          }\n        } // If HTML5 or embed but not fully supported, setupInterface and call ready now\n\n\n        if (_this2.isHTML5 || _this2.isEmbed && !_this2.supported.ui) {\n          // Setup interface\n          ui.build.call(_this2);\n        } // Load HTML5 sources\n\n\n        if (_this2.isHTML5) {\n          _this2.media.load();\n        } // Update previewThumbnails config & reload plugin\n\n\n        if (!is$1.empty(input.previewThumbnails)) {\n          Object.assign(_this2.config.previewThumbnails, input.previewThumbnails); // Cleanup previewThumbnails plugin if it was loaded\n\n          if (_this2.previewThumbnails && _this2.previewThumbnails.loaded) {\n            _this2.previewThumbnails.destroy();\n\n            _this2.previewThumbnails = null;\n          } // Create new instance if it is still enabled\n\n\n          if (_this2.config.previewThumbnails.enabled) {\n            _this2.previewThumbnails = new PreviewThumbnails(_this2);\n          }\n        } // Update the fullscreen support\n\n\n        _this2.fullscreen.update();\n      }, true);\n    }\n  };\n\n  /**\n   * Returns a number whose value is limited to the given range.\n   *\n   * Example: limit the output of this computation to between 0 and 255\n   * (x * 255).clamp(0, 255)\n   *\n   * @param {Number} input\n   * @param {Number} min The lower boundary of the output range\n   * @param {Number} max The upper boundary of the output range\n   * @returns A number in the range [min, max]\n   * @type Number\n   */\n  function clamp() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 255;\n    return Math.min(Math.max(input, min), max);\n  }\n\n  // TODO: Use a WeakMap for private globals\n  // const globals = new WeakMap();\n  // Plyr instance\n\n  var Plyr = /*#__PURE__*/function () {\n    function Plyr(target, options) {\n      var _this = this;\n\n      _classCallCheck(this, Plyr);\n\n      this.timers = {}; // State\n\n      this.ready = false;\n      this.loading = false;\n      this.failed = false; // Touch device\n\n      this.touch = support.touch; // Set the media element\n\n      this.media = target; // String selector passed\n\n      if (is$1.string(this.media)) {\n        this.media = document.querySelectorAll(this.media);\n      } // jQuery, NodeList or Array passed, use first element\n\n\n      if (window.jQuery && this.media instanceof jQuery || is$1.nodeList(this.media) || is$1.array(this.media)) {\n        // eslint-disable-next-line\n        this.media = this.media[0];\n      } // Set config\n\n\n      this.config = extend({}, defaults$1, Plyr.defaults, options || {}, function () {\n        try {\n          return JSON.parse(_this.media.getAttribute('data-plyr-config'));\n        } catch (e) {\n          return {};\n        }\n      }()); // Elements cache\n\n      this.elements = {\n        container: null,\n        fullscreen: null,\n        captions: null,\n        buttons: {},\n        display: {},\n        progress: {},\n        inputs: {},\n        settings: {\n          popup: null,\n          menu: null,\n          panels: {},\n          buttons: {}\n        }\n      }; // Captions\n\n      this.captions = {\n        active: null,\n        currentTrack: -1,\n        meta: new WeakMap()\n      }; // Fullscreen\n\n      this.fullscreen = {\n        active: false\n      }; // Options\n\n      this.options = {\n        speed: [],\n        quality: []\n      }; // Debugging\n      // TODO: move to globals\n\n      this.debug = new Console(this.config.debug); // Log config options and support\n\n      this.debug.log('Config', this.config);\n      this.debug.log('Support', support); // We need an element to setup\n\n      if (is$1.nullOrUndefined(this.media) || !is$1.element(this.media)) {\n        this.debug.error('Setup failed: no suitable element passed');\n        return;\n      } // Bail if the element is initialized\n\n\n      if (this.media.plyr) {\n        this.debug.warn('Target already setup');\n        return;\n      } // Bail if not enabled\n\n\n      if (!this.config.enabled) {\n        this.debug.error('Setup failed: disabled by config');\n        return;\n      } // Bail if disabled or no basic support\n      // You may want to disable certain UAs etc\n\n\n      if (!support.check().api) {\n        this.debug.error('Setup failed: no support');\n        return;\n      } // Cache original element state for .destroy()\n\n\n      var clone = this.media.cloneNode(true);\n      clone.autoplay = false;\n      this.elements.original = clone; // Set media type based on tag or data attribute\n      // Supported: video, audio, vimeo, youtube\n\n      var type = this.media.tagName.toLowerCase(); // Embed properties\n\n      var iframe = null;\n      var url = null; // Different setup based on type\n\n      switch (type) {\n        case 'div':\n          // Find the frame\n          iframe = this.media.querySelector('iframe'); // <iframe> type\n\n          if (is$1.element(iframe)) {\n            // Detect provider\n            url = parseUrl(iframe.getAttribute('src'));\n            this.provider = getProviderByUrl(url.toString()); // Rework elements\n\n            this.elements.container = this.media;\n            this.media = iframe; // Reset classname\n\n            this.elements.container.className = ''; // Get attributes from URL and set config\n\n            if (url.search.length) {\n              var truthy = ['1', 'true'];\n\n              if (truthy.includes(url.searchParams.get('autoplay'))) {\n                this.config.autoplay = true;\n              }\n\n              if (truthy.includes(url.searchParams.get('loop'))) {\n                this.config.loop.active = true;\n              } // TODO: replace fullscreen.iosNative with this playsinline config option\n              // YouTube requires the playsinline in the URL\n\n\n              if (this.isYouTube) {\n                this.config.playsinline = truthy.includes(url.searchParams.get('playsinline'));\n                this.config.youtube.hl = url.searchParams.get('hl'); // TODO: Should this be setting language?\n              } else {\n                this.config.playsinline = true;\n              }\n            }\n          } else {\n            // <div> with attributes\n            this.provider = this.media.getAttribute(this.config.attributes.embed.provider); // Remove attribute\n\n            this.media.removeAttribute(this.config.attributes.embed.provider);\n          } // Unsupported or missing provider\n\n\n          if (is$1.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n            this.debug.error('Setup failed: Invalid provider');\n            return;\n          } // Audio will come later for external providers\n\n\n          this.type = types.video;\n          break;\n\n        case 'video':\n        case 'audio':\n          this.type = type;\n          this.provider = providers.html5; // Get config from attributes\n\n          if (this.media.hasAttribute('crossorigin')) {\n            this.config.crossorigin = true;\n          }\n\n          if (this.media.hasAttribute('autoplay')) {\n            this.config.autoplay = true;\n          }\n\n          if (this.media.hasAttribute('playsinline') || this.media.hasAttribute('webkit-playsinline')) {\n            this.config.playsinline = true;\n          }\n\n          if (this.media.hasAttribute('muted')) {\n            this.config.muted = true;\n          }\n\n          if (this.media.hasAttribute('loop')) {\n            this.config.loop.active = true;\n          }\n\n          break;\n\n        default:\n          this.debug.error('Setup failed: unsupported type');\n          return;\n      } // Check for support again but with type\n\n\n      this.supported = support.check(this.type, this.provider, this.config.playsinline); // If no support for even API, bail\n\n      if (!this.supported.api) {\n        this.debug.error('Setup failed: no support');\n        return;\n      }\n\n      this.eventListeners = []; // Create listeners\n\n      this.listeners = new Listeners(this); // Setup local storage for user settings\n\n      this.storage = new Storage(this); // Store reference\n\n      this.media.plyr = this; // Wrap media\n\n      if (!is$1.element(this.elements.container)) {\n        this.elements.container = createElement('div', {\n          tabindex: 0\n        });\n        wrap(this.media, this.elements.container);\n      } // Migrate custom properties from media to container (so they work 😉)\n\n\n      ui.migrateStyles.call(this); // Add style hook\n\n      ui.addStyleHook.call(this); // Setup media\n\n      media.setup.call(this); // Listen for events if debugging\n\n      if (this.config.debug) {\n        on.call(this, this.elements.container, this.config.events.join(' '), function (event) {\n          _this.debug.log(\"event: \".concat(event.type));\n        });\n      } // Setup fullscreen\n\n\n      this.fullscreen = new Fullscreen(this); // Setup interface\n      // If embed but not fully supported, build interface now to avoid flash of controls\n\n      if (this.isHTML5 || this.isEmbed && !this.supported.ui) {\n        ui.build.call(this);\n      } // Container listeners\n\n\n      this.listeners.container(); // Global listeners\n\n      this.listeners.global(); // Setup ads if provided\n\n      if (this.config.ads.enabled) {\n        this.ads = new Ads(this);\n      } // Autoplay if required\n\n\n      if (this.isHTML5 && this.config.autoplay) {\n        this.once('canplay', function () {\n          return silencePromise(_this.play());\n        });\n      } // Seek time will be recorded (in listeners.js) so we can prevent hiding controls for a few seconds after seek\n\n\n      this.lastSeekTime = 0; // Setup preview thumbnails if enabled\n\n      if (this.config.previewThumbnails.enabled) {\n        this.previewThumbnails = new PreviewThumbnails(this);\n      }\n    } // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n\n\n    _createClass(Plyr, [{\n      key: \"play\",\n\n      /**\n       * Play the media, or play the advertisement (if they are not blocked)\n       */\n      value: function play() {\n        var _this2 = this;\n\n        if (!is$1.function(this.media.play)) {\n          return null;\n        } // Intecept play with ads\n\n\n        if (this.ads && this.ads.enabled) {\n          this.ads.managerPromise.then(function () {\n            return _this2.ads.play();\n          }).catch(function () {\n            return silencePromise(_this2.media.play());\n          });\n        } // Return the promise (for HTML5)\n\n\n        return this.media.play();\n      }\n      /**\n       * Pause the media\n       */\n\n    }, {\n      key: \"pause\",\n      value: function pause() {\n        if (!this.playing || !is$1.function(this.media.pause)) {\n          return null;\n        }\n\n        return this.media.pause();\n      }\n      /**\n       * Get playing state\n       */\n\n    }, {\n      key: \"togglePlay\",\n\n      /**\n       * Toggle playback based on current status\n       * @param {Boolean} input\n       */\n      value: function togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        var toggle = is$1.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n          return this.play();\n        }\n\n        return this.pause();\n      }\n      /**\n       * Stop playback\n       */\n\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        if (this.isHTML5) {\n          this.pause();\n          this.restart();\n        } else if (is$1.function(this.media.stop)) {\n          this.media.stop();\n        }\n      }\n      /**\n       * Restart playback\n       */\n\n    }, {\n      key: \"restart\",\n      value: function restart() {\n        this.currentTime = 0;\n      }\n      /**\n       * Rewind\n       * @param {Number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n       */\n\n    }, {\n      key: \"rewind\",\n      value: function rewind(seekTime) {\n        this.currentTime -= is$1.number(seekTime) ? seekTime : this.config.seekTime;\n      }\n      /**\n       * Fast forward\n       * @param {Number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n       */\n\n    }, {\n      key: \"forward\",\n      value: function forward(seekTime) {\n        this.currentTime += is$1.number(seekTime) ? seekTime : this.config.seekTime;\n      }\n      /**\n       * Seek to a time\n       * @param {Number} input - where to seek to in seconds. Defaults to 0 (the start)\n       */\n\n    }, {\n      key: \"increaseVolume\",\n\n      /**\n       * Increase volume\n       * @param {Boolean} step - How much to decrease by (between 0 and 1)\n       */\n      value: function increaseVolume(step) {\n        var volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (is$1.number(step) ? step : 0);\n      }\n      /**\n       * Decrease volume\n       * @param {Boolean} step - How much to decrease by (between 0 and 1)\n       */\n\n    }, {\n      key: \"decreaseVolume\",\n      value: function decreaseVolume(step) {\n        this.increaseVolume(-step);\n      }\n      /**\n       * Set muted state\n       * @param {Boolean} mute\n       */\n\n    }, {\n      key: \"toggleCaptions\",\n\n      /**\n       * Toggle captions\n       * @param {Boolean} input - Whether to enable captions\n       */\n      value: function toggleCaptions(input) {\n        captions.toggle.call(this, input, false);\n      }\n      /**\n       * Set the caption track by index\n       * @param {Number} - Caption index\n       */\n\n    }, {\n      key: \"airplay\",\n\n      /**\n       * Trigger the airplay dialog\n       * TODO: update player with state, support, enabled\n       */\n      value: function airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n          this.media.webkitShowPlaybackTargetPicker();\n        }\n      }\n      /**\n       * Toggle the player controls\n       * @param {Boolean} [toggle] - Whether to show the controls\n       */\n\n    }, {\n      key: \"toggleControls\",\n      value: function toggleControls(toggle) {\n        // Don't toggle if missing UI support or if it's audio\n        if (this.supported.ui && !this.isAudio) {\n          // Get state before change\n          var isHidden = hasClass(this.elements.container, this.config.classNames.hideControls); // Negate the argument if not undefined since adding the class to hides the controls\n\n          var force = typeof toggle === 'undefined' ? undefined : !toggle; // Apply and get updated state\n\n          var hiding = toggleClass(this.elements.container, this.config.classNames.hideControls, force); // Close menu\n\n          if (hiding && is$1.array(this.config.controls) && this.config.controls.includes('settings') && !is$1.empty(this.config.settings)) {\n            controls.toggleMenu.call(this, false);\n          } // Trigger event on change\n\n\n          if (hiding !== isHidden) {\n            var eventName = hiding ? 'controlshidden' : 'controlsshown';\n            triggerEvent.call(this, this.media, eventName);\n          }\n\n          return !hiding;\n        }\n\n        return false;\n      }\n      /**\n       * Add event listeners\n       * @param {String} event - Event type\n       * @param {Function} callback - Callback for when event occurs\n       */\n\n    }, {\n      key: \"on\",\n      value: function on$1(event, callback) {\n        on.call(this, this.elements.container, event, callback);\n      }\n      /**\n       * Add event listeners once\n       * @param {String} event - Event type\n       * @param {Function} callback - Callback for when event occurs\n       */\n\n    }, {\n      key: \"once\",\n      value: function once$1(event, callback) {\n        once.call(this, this.elements.container, event, callback);\n      }\n      /**\n       * Remove event listeners\n       * @param {String} event - Event type\n       * @param {Function} callback - Callback for when event occurs\n       */\n\n    }, {\n      key: \"off\",\n      value: function off$1(event, callback) {\n        off(this.elements.container, event, callback);\n      }\n      /**\n       * Destroy an instance\n       * Event listeners are removed when elements are removed\n       * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n       * @param {Function} callback - Callback for when destroy is complete\n       * @param {Boolean} soft - Whether it's a soft destroy (for source changes etc)\n       */\n\n    }, {\n      key: \"destroy\",\n      value: function destroy(callback) {\n        var _this3 = this;\n\n        var soft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (!this.ready) {\n          return;\n        }\n\n        var done = function done() {\n          // Reset overflow (incase destroyed while in fullscreen)\n          document.body.style.overflow = ''; // GC for embed\n\n          _this3.embed = null; // If it's a soft destroy, make minimal changes\n\n          if (soft) {\n            if (Object.keys(_this3.elements).length) {\n              // Remove elements\n              removeElement(_this3.elements.buttons.play);\n              removeElement(_this3.elements.captions);\n              removeElement(_this3.elements.controls);\n              removeElement(_this3.elements.wrapper); // Clear for GC\n\n              _this3.elements.buttons.play = null;\n              _this3.elements.captions = null;\n              _this3.elements.controls = null;\n              _this3.elements.wrapper = null;\n            } // Callback\n\n\n            if (is$1.function(callback)) {\n              callback();\n            }\n          } else {\n            // Unbind listeners\n            unbindListeners.call(_this3); // Cancel current network requests\n\n            html5.cancelRequests.call(_this3); // Replace the container with the original element provided\n\n            replaceElement(_this3.elements.original, _this3.elements.container); // Event\n\n            triggerEvent.call(_this3, _this3.elements.original, 'destroyed', true); // Callback\n\n            if (is$1.function(callback)) {\n              callback.call(_this3.elements.original);\n            } // Reset state\n\n\n            _this3.ready = false; // Clear for garbage collection\n\n            setTimeout(function () {\n              _this3.elements = null;\n              _this3.media = null;\n            }, 200);\n          }\n        }; // Stop playback\n\n\n        this.stop(); // Clear timeouts\n\n        clearTimeout(this.timers.loading);\n        clearTimeout(this.timers.controls);\n        clearTimeout(this.timers.resized); // Provider specific stuff\n\n        if (this.isHTML5) {\n          // Restore native video controls\n          ui.toggleNativeControls.call(this, true); // Clean up\n\n          done();\n        } else if (this.isYouTube) {\n          // Clear timers\n          clearInterval(this.timers.buffering);\n          clearInterval(this.timers.playing); // Destroy YouTube API\n\n          if (this.embed !== null && is$1.function(this.embed.destroy)) {\n            this.embed.destroy();\n          } // Clean up\n\n\n          done();\n        } else if (this.isVimeo) {\n          // Destroy Vimeo API\n          // then clean up (wait, to prevent postmessage errors)\n          if (this.embed !== null) {\n            this.embed.unload().then(done);\n          } // Vimeo does not always return\n\n\n          setTimeout(done, 200);\n        }\n      }\n      /**\n       * Check for support for a mime type (HTML5 only)\n       * @param {String} type - Mime type\n       */\n\n    }, {\n      key: \"supports\",\n      value: function supports(type) {\n        return support.mime.call(this, type);\n      }\n      /**\n       * Check for support\n       * @param {String} type - Player type (audio/video)\n       * @param {String} provider - Provider (html5/youtube/vimeo)\n       * @param {Boolean} inline - Where player has `playsinline` sttribute\n       */\n\n    }, {\n      key: \"isHTML5\",\n      get: function get() {\n        return this.provider === providers.html5;\n      }\n    }, {\n      key: \"isEmbed\",\n      get: function get() {\n        return this.isYouTube || this.isVimeo;\n      }\n    }, {\n      key: \"isYouTube\",\n      get: function get() {\n        return this.provider === providers.youtube;\n      }\n    }, {\n      key: \"isVimeo\",\n      get: function get() {\n        return this.provider === providers.vimeo;\n      }\n    }, {\n      key: \"isVideo\",\n      get: function get() {\n        return this.type === types.video;\n      }\n    }, {\n      key: \"isAudio\",\n      get: function get() {\n        return this.type === types.audio;\n      }\n    }, {\n      key: \"playing\",\n      get: function get() {\n        return Boolean(this.ready && !this.paused && !this.ended);\n      }\n      /**\n       * Get paused state\n       */\n\n    }, {\n      key: \"paused\",\n      get: function get() {\n        return Boolean(this.media.paused);\n      }\n      /**\n       * Get stopped state\n       */\n\n    }, {\n      key: \"stopped\",\n      get: function get() {\n        return Boolean(this.paused && this.currentTime === 0);\n      }\n      /**\n       * Get ended state\n       */\n\n    }, {\n      key: \"ended\",\n      get: function get() {\n        return Boolean(this.media.ended);\n      }\n    }, {\n      key: \"currentTime\",\n      set: function set(input) {\n        // Bail if media duration isn't available yet\n        if (!this.duration) {\n          return;\n        } // Validate input\n\n\n        var inputIsValid = is$1.number(input) && input > 0; // Set\n\n        this.media.currentTime = inputIsValid ? Math.min(input, this.duration) : 0; // Logging\n\n        this.debug.log(\"Seeking to \".concat(this.currentTime, \" seconds\"));\n      }\n      /**\n       * Get current time\n       */\n      ,\n      get: function get() {\n        return Number(this.media.currentTime);\n      }\n      /**\n       * Get buffered\n       */\n\n    }, {\n      key: \"buffered\",\n      get: function get() {\n        var buffered = this.media.buffered; // YouTube / Vimeo return a float between 0-1\n\n        if (is$1.number(buffered)) {\n          return buffered;\n        } // HTML5\n        // TODO: Handle buffered chunks of the media\n        // (i.e. seek to another section buffers only that section)\n\n\n        if (buffered && buffered.length && this.duration > 0) {\n          return buffered.end(0) / this.duration;\n        }\n\n        return 0;\n      }\n      /**\n       * Get seeking status\n       */\n\n    }, {\n      key: \"seeking\",\n      get: function get() {\n        return Boolean(this.media.seeking);\n      }\n      /**\n       * Get the duration of the current media\n       */\n\n    }, {\n      key: \"duration\",\n      get: function get() {\n        // Faux duration set via config\n        var fauxDuration = parseFloat(this.config.duration); // Media duration can be NaN or Infinity before the media has loaded\n\n        var realDuration = (this.media || {}).duration;\n        var duration = !is$1.number(realDuration) || realDuration === Infinity ? 0 : realDuration; // If config duration is funky, use regular duration\n\n        return fauxDuration || duration;\n      }\n      /**\n       * Set the player volume\n       * @param {Number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n       */\n\n    }, {\n      key: \"volume\",\n      set: function set(value) {\n        var volume = value;\n        var max = 1;\n        var min = 0;\n\n        if (is$1.string(volume)) {\n          volume = Number(volume);\n        } // Load volume from storage if no value specified\n\n\n        if (!is$1.number(volume)) {\n          volume = this.storage.get('volume');\n        } // Use config if all else fails\n\n\n        if (!is$1.number(volume)) {\n          volume = this.config.volume;\n        } // Maximum is volumeMax\n\n\n        if (volume > max) {\n          volume = max;\n        } // Minimum is volumeMin\n\n\n        if (volume < min) {\n          volume = min;\n        } // Update config\n\n\n        this.config.volume = volume; // Set the player volume\n\n        this.media.volume = volume; // If muted, and we're increasing volume manually, reset muted state\n\n        if (!is$1.empty(value) && this.muted && volume > 0) {\n          this.muted = false;\n        }\n      }\n      /**\n       * Get the current player volume\n       */\n      ,\n      get: function get() {\n        return Number(this.media.volume);\n      }\n    }, {\n      key: \"muted\",\n      set: function set(mute) {\n        var toggle = mute; // Load muted state from storage\n\n        if (!is$1.boolean(toggle)) {\n          toggle = this.storage.get('muted');\n        } // Use config if all else fails\n\n\n        if (!is$1.boolean(toggle)) {\n          toggle = this.config.muted;\n        } // Update config\n\n\n        this.config.muted = toggle; // Set mute on the player\n\n        this.media.muted = toggle;\n      }\n      /**\n       * Get current muted state\n       */\n      ,\n      get: function get() {\n        return Boolean(this.media.muted);\n      }\n      /**\n       * Check if the media has audio\n       */\n\n    }, {\n      key: \"hasAudio\",\n      get: function get() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n          return true;\n        }\n\n        if (this.isAudio) {\n          return true;\n        } // Get audio tracks\n\n\n        return Boolean(this.media.mozHasAudio) || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);\n      }\n      /**\n       * Set playback speed\n       * @param {Number} speed - the speed of playback (0.5-2.0)\n       */\n\n    }, {\n      key: \"speed\",\n      set: function set(input) {\n        var _this4 = this;\n\n        var speed = null;\n\n        if (is$1.number(input)) {\n          speed = input;\n        }\n\n        if (!is$1.number(speed)) {\n          speed = this.storage.get('speed');\n        }\n\n        if (!is$1.number(speed)) {\n          speed = this.config.speed.selected;\n        } // Clamp to min/max\n\n\n        var min = this.minimumSpeed,\n            max = this.maximumSpeed;\n        speed = clamp(speed, min, max); // Update config\n\n        this.config.speed.selected = speed; // Set media speed\n\n        setTimeout(function () {\n          _this4.media.playbackRate = speed;\n        }, 0);\n      }\n      /**\n       * Get current playback speed\n       */\n      ,\n      get: function get() {\n        return Number(this.media.playbackRate);\n      }\n      /**\n       * Get the minimum allowed speed\n       */\n\n    }, {\n      key: \"minimumSpeed\",\n      get: function get() {\n        if (this.isYouTube) {\n          // https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate\n          return Math.min.apply(Math, _toConsumableArray(this.options.speed));\n        }\n\n        if (this.isVimeo) {\n          // https://github.com/vimeo/player.js/#setplaybackrateplaybackrate-number-promisenumber-rangeerrorerror\n          return 0.5;\n        } // https://stackoverflow.com/a/32320020/1191319\n\n\n        return 0.0625;\n      }\n      /**\n       * Get the maximum allowed speed\n       */\n\n    }, {\n      key: \"maximumSpeed\",\n      get: function get() {\n        if (this.isYouTube) {\n          // https://developers.google.com/youtube/iframe_api_reference#setPlaybackRate\n          return Math.max.apply(Math, _toConsumableArray(this.options.speed));\n        }\n\n        if (this.isVimeo) {\n          // https://github.com/vimeo/player.js/#setplaybackrateplaybackrate-number-promisenumber-rangeerrorerror\n          return 2;\n        } // https://stackoverflow.com/a/32320020/1191319\n\n\n        return 16;\n      }\n      /**\n       * Set playback quality\n       * Currently HTML5 & YouTube only\n       * @param {Number} input - Quality level\n       */\n\n    }, {\n      key: \"quality\",\n      set: function set(input) {\n        var config = this.config.quality;\n        var options = this.options.quality;\n\n        if (!options.length) {\n          return;\n        }\n\n        var quality = [!is$1.empty(input) && Number(input), this.storage.get('quality'), config.selected, config.default].find(is$1.number);\n        var updateStorage = true;\n\n        if (!options.includes(quality)) {\n          var value = closest$1(options, quality);\n          this.debug.warn(\"Unsupported quality option: \".concat(quality, \", using \").concat(value, \" instead\"));\n          quality = value; // Don't update storage if quality is not supported\n\n          updateStorage = false;\n        } // Update config\n\n\n        config.selected = quality; // Set quality\n\n        this.media.quality = quality; // Save to storage\n\n        if (updateStorage) {\n          this.storage.set({\n            quality: quality\n          });\n        }\n      }\n      /**\n       * Get current quality level\n       */\n      ,\n      get: function get() {\n        return this.media.quality;\n      }\n      /**\n       * Toggle loop\n       * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n       * @param {Boolean} input - Whether to loop or not\n       */\n\n    }, {\n      key: \"loop\",\n      set: function set(input) {\n        var toggle = is$1.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle; // Set default to be a true toggle\n\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n             switch (type) {\n                case 'start':\n                    if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                        this.config.loop.end = null;\n                    }\n                    this.config.loop.start = this.currentTime;\n                    // this.config.loop.indicator.start = this.elements.display.played.value;\n                    break;\n                 case 'end':\n                    if (this.config.loop.start >= this.currentTime) {\n                        return this;\n                    }\n                    this.config.loop.end = this.currentTime;\n                    // this.config.loop.indicator.end = this.elements.display.played.value;\n                    break;\n                 case 'all':\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                    this.config.loop.indicator.start = 0;\n                    this.config.loop.indicator.end = 100;\n                    break;\n                 case 'toggle':\n                    if (this.config.loop.active) {\n                        this.config.loop.start = 0;\n                        this.config.loop.end = null;\n                    } else {\n                        this.config.loop.start = 0;\n                        this.config.loop.end = this.duration - 2;\n                    }\n                    break;\n                 default:\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                    break;\n            } */\n      }\n      /**\n       * Get current loop state\n       */\n      ,\n      get: function get() {\n        return Boolean(this.media.loop);\n      }\n      /**\n       * Set new media source\n       * @param {Object} input - The new source object (see docs)\n       */\n\n    }, {\n      key: \"source\",\n      set: function set(input) {\n        source.change.call(this, input);\n      }\n      /**\n       * Get current source\n       */\n      ,\n      get: function get() {\n        return this.media.currentSrc;\n      }\n      /**\n       * Get a download URL (either source or custom)\n       */\n\n    }, {\n      key: \"download\",\n      get: function get() {\n        var download = this.config.urls.download;\n        return is$1.url(download) ? download : this.source;\n      }\n      /**\n       * Set the download URL\n       */\n      ,\n      set: function set(input) {\n        if (!is$1.url(input)) {\n          return;\n        }\n\n        this.config.urls.download = input;\n        controls.setDownloadUrl.call(this);\n      }\n      /**\n       * Set the poster image for a video\n       * @param {String} input - the URL for the new poster image\n       */\n\n    }, {\n      key: \"poster\",\n      set: function set(input) {\n        if (!this.isVideo) {\n          this.debug.warn('Poster can only be set for video');\n          return;\n        }\n\n        ui.setPoster.call(this, input, false).catch(function () {});\n      }\n      /**\n       * Get the current poster image\n       */\n      ,\n      get: function get() {\n        if (!this.isVideo) {\n          return null;\n        }\n\n        return this.media.getAttribute('poster') || this.media.getAttribute('data-poster');\n      }\n      /**\n       * Get the current aspect ratio in use\n       */\n\n    }, {\n      key: \"ratio\",\n      get: function get() {\n        if (!this.isVideo) {\n          return null;\n        }\n\n        var ratio = reduceAspectRatio(getAspectRatio.call(this));\n        return is$1.array(ratio) ? ratio.join(':') : ratio;\n      }\n      /**\n       * Set video aspect ratio\n       */\n      ,\n      set: function set(input) {\n        if (!this.isVideo) {\n          this.debug.warn('Aspect ratio can only be set for video');\n          return;\n        }\n\n        if (!is$1.string(input) || !validateRatio(input)) {\n          this.debug.error(\"Invalid aspect ratio specified (\".concat(input, \")\"));\n          return;\n        }\n\n        this.config.ratio = input;\n        setAspectRatio.call(this);\n      }\n      /**\n       * Set the autoplay state\n       * @param {Boolean} input - Whether to autoplay or not\n       */\n\n    }, {\n      key: \"autoplay\",\n      set: function set(input) {\n        var toggle = is$1.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n      }\n      /**\n       * Get the current autoplay state\n       */\n      ,\n      get: function get() {\n        return Boolean(this.config.autoplay);\n      }\n    }, {\n      key: \"currentTrack\",\n      set: function set(input) {\n        captions.set.call(this, input, false);\n      }\n      /**\n       * Get the current caption track index (-1 if disabled)\n       */\n      ,\n      get: function get() {\n        var _this$captions = this.captions,\n            toggled = _this$captions.toggled,\n            currentTrack = _this$captions.currentTrack;\n        return toggled ? currentTrack : -1;\n      }\n      /**\n       * Set the wanted language for captions\n       * Since tracks can be added later it won't update the actual caption track until there is a matching track\n       * @param {String} - Two character ISO language code (e.g. EN, FR, PT, etc)\n       */\n\n    }, {\n      key: \"language\",\n      set: function set(input) {\n        captions.setLanguage.call(this, input, false);\n      }\n      /**\n       * Get the current track's language\n       */\n      ,\n      get: function get() {\n        return (captions.getCurrentTrack.call(this) || {}).language;\n      }\n      /**\n       * Toggle picture-in-picture playback on WebKit/MacOS\n       * TODO: update player with state, support, enabled\n       * TODO: detect outside changes\n       */\n\n    }, {\n      key: \"pip\",\n      set: function set(input) {\n        // Bail if no support\n        if (!support.pip) {\n          return;\n        } // Toggle based on current state if not passed\n\n\n        var toggle = is$1.boolean(input) ? input : !this.pip; // Toggle based on current state\n        // Safari\n\n        if (is$1.function(this.media.webkitSetPresentationMode)) {\n          this.media.webkitSetPresentationMode(toggle ? pip.active : pip.inactive);\n        } // Chrome\n\n\n        if (is$1.function(this.media.requestPictureInPicture)) {\n          if (!this.pip && toggle) {\n            this.media.requestPictureInPicture();\n          } else if (this.pip && !toggle) {\n            document.exitPictureInPicture();\n          }\n        }\n      }\n      /**\n       * Get the current picture-in-picture state\n       */\n      ,\n      get: function get() {\n        if (!support.pip) {\n          return null;\n        } // Safari\n\n\n        if (!is$1.empty(this.media.webkitPresentationMode)) {\n          return this.media.webkitPresentationMode === pip.active;\n        } // Chrome\n\n\n        return this.media === document.pictureInPictureElement;\n      }\n    }], [{\n      key: \"supported\",\n      value: function supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n      }\n      /**\n       * Load an SVG sprite into the page\n       * @param {String} url - URL for the SVG sprite\n       * @param {String} [id] - Unique ID\n       */\n\n    }, {\n      key: \"loadSprite\",\n      value: function loadSprite$1(url, id) {\n        return loadSprite(url, id);\n      }\n      /**\n       * Setup multiple instances\n       * @param {*} selector\n       * @param {Object} options\n       */\n\n    }, {\n      key: \"setup\",\n      value: function setup(selector) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var targets = null;\n\n        if (is$1.string(selector)) {\n          targets = Array.from(document.querySelectorAll(selector));\n        } else if (is$1.nodeList(selector)) {\n          targets = Array.from(selector);\n        } else if (is$1.array(selector)) {\n          targets = selector.filter(is$1.element);\n        }\n\n        if (is$1.empty(targets)) {\n          return null;\n        }\n\n        return targets.map(function (t) {\n          return new Plyr(t, options);\n        });\n      }\n    }]);\n\n    return Plyr;\n  }();\n\n  Plyr.defaults = cloneDeep(defaults$1);\n\n  return Plyr;\n\n})));\n","export const getShuffledArr = (arr) => {\n  return arr.sort(function () {\n    return Math.random() - 0.5;\n  });\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}